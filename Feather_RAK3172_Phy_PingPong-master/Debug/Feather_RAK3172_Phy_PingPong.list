
Feather_RAK3172_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc4  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800c0fc  0800c0fc  0001c0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c600  0800c600  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c600  0800c600  0001c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c608  0800c608  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c608  0800c608  0001c608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c60c  0800c60c  0001c60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  2000001c  0800c62c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800c62c  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204df  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c39  00000000  00000000  00040568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001712  00000000  00000000  00048068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bd4  00000000  00000000  0004977a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023f02  00000000  00000000  0006a34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2697  00000000  00000000  0008e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bd8  00000000  00000000  001408e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001484c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800c0e4 	.word	0x0800c0e4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800c0e4 	.word	0x0800c0e4

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b970 	b.w	8000480 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	460f      	mov	r7, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14a      	bne.n	800025e <__udivmoddi4+0xa6>
 80001c8:	428a      	cmp	r2, r1
 80001ca:	4694      	mov	ip, r2
 80001cc:	d965      	bls.n	800029a <__udivmoddi4+0xe2>
 80001ce:	fab2 f382 	clz	r3, r2
 80001d2:	b143      	cbz	r3, 80001e6 <__udivmoddi4+0x2e>
 80001d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80001d8:	f1c3 0220 	rsb	r2, r3, #32
 80001dc:	409f      	lsls	r7, r3
 80001de:	fa20 f202 	lsr.w	r2, r0, r2
 80001e2:	4317      	orrs	r7, r2
 80001e4:	409c      	lsls	r4, r3
 80001e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ea:	fa1f f58c 	uxth.w	r5, ip
 80001ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80001f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001fc:	fb01 f005 	mul.w	r0, r1, r5
 8000200:	4290      	cmp	r0, r2
 8000202:	d90a      	bls.n	800021a <__udivmoddi4+0x62>
 8000204:	eb1c 0202 	adds.w	r2, ip, r2
 8000208:	f101 37ff 	add.w	r7, r1, #4294967295
 800020c:	f080 811b 	bcs.w	8000446 <__udivmoddi4+0x28e>
 8000210:	4290      	cmp	r0, r2
 8000212:	f240 8118 	bls.w	8000446 <__udivmoddi4+0x28e>
 8000216:	3902      	subs	r1, #2
 8000218:	4462      	add	r2, ip
 800021a:	1a12      	subs	r2, r2, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000222:	fb0e 2210 	mls	r2, lr, r0, r2
 8000226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022a:	fb00 f505 	mul.w	r5, r0, r5
 800022e:	42a5      	cmp	r5, r4
 8000230:	d90a      	bls.n	8000248 <__udivmoddi4+0x90>
 8000232:	eb1c 0404 	adds.w	r4, ip, r4
 8000236:	f100 32ff 	add.w	r2, r0, #4294967295
 800023a:	f080 8106 	bcs.w	800044a <__udivmoddi4+0x292>
 800023e:	42a5      	cmp	r5, r4
 8000240:	f240 8103 	bls.w	800044a <__udivmoddi4+0x292>
 8000244:	4464      	add	r4, ip
 8000246:	3802      	subs	r0, #2
 8000248:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40dc      	lsrs	r4, r3
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	428b      	cmp	r3, r1
 8000260:	d908      	bls.n	8000274 <__udivmoddi4+0xbc>
 8000262:	2e00      	cmp	r6, #0
 8000264:	f000 80ec 	beq.w	8000440 <__udivmoddi4+0x288>
 8000268:	2100      	movs	r1, #0
 800026a:	e9c6 0500 	strd	r0, r5, [r6]
 800026e:	4608      	mov	r0, r1
 8000270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000274:	fab3 f183 	clz	r1, r3
 8000278:	2900      	cmp	r1, #0
 800027a:	d149      	bne.n	8000310 <__udivmoddi4+0x158>
 800027c:	42ab      	cmp	r3, r5
 800027e:	d302      	bcc.n	8000286 <__udivmoddi4+0xce>
 8000280:	4282      	cmp	r2, r0
 8000282:	f200 80f7 	bhi.w	8000474 <__udivmoddi4+0x2bc>
 8000286:	1a84      	subs	r4, r0, r2
 8000288:	eb65 0203 	sbc.w	r2, r5, r3
 800028c:	2001      	movs	r0, #1
 800028e:	4617      	mov	r7, r2
 8000290:	2e00      	cmp	r6, #0
 8000292:	d0e2      	beq.n	800025a <__udivmoddi4+0xa2>
 8000294:	e9c6 4700 	strd	r4, r7, [r6]
 8000298:	e7df      	b.n	800025a <__udivmoddi4+0xa2>
 800029a:	b902      	cbnz	r2, 800029e <__udivmoddi4+0xe6>
 800029c:	deff      	udf	#255	; 0xff
 800029e:	fab2 f382 	clz	r3, r2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f040 808f 	bne.w	80003c6 <__udivmoddi4+0x20e>
 80002a8:	1a8a      	subs	r2, r1, r2
 80002aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ae:	fa1f fe8c 	uxth.w	lr, ip
 80002b2:	2101      	movs	r1, #1
 80002b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002b8:	fb07 2015 	mls	r0, r7, r5, r2
 80002bc:	0c22      	lsrs	r2, r4, #16
 80002be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c2:	fb0e f005 	mul.w	r0, lr, r5
 80002c6:	4290      	cmp	r0, r2
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0x124>
 80002ca:	eb1c 0202 	adds.w	r2, ip, r2
 80002ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0x122>
 80002d4:	4290      	cmp	r0, r2
 80002d6:	f200 80ca 	bhi.w	800046e <__udivmoddi4+0x2b6>
 80002da:	4645      	mov	r5, r8
 80002dc:	1a12      	subs	r2, r2, r0
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e4:	fb07 2210 	mls	r2, r7, r0, r2
 80002e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	45a6      	cmp	lr, r4
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x14e>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x14c>
 80002fe:	45a6      	cmp	lr, r4
 8000300:	f200 80ba 	bhi.w	8000478 <__udivmoddi4+0x2c0>
 8000304:	4610      	mov	r0, r2
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800030e:	e79f      	b.n	8000250 <__udivmoddi4+0x98>
 8000310:	f1c1 0720 	rsb	r7, r1, #32
 8000314:	408b      	lsls	r3, r1
 8000316:	fa22 fc07 	lsr.w	ip, r2, r7
 800031a:	ea4c 0c03 	orr.w	ip, ip, r3
 800031e:	fa05 f401 	lsl.w	r4, r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	40fd      	lsrs	r5, r7
 8000328:	4323      	orrs	r3, r4
 800032a:	fa00 f901 	lsl.w	r9, r0, r1
 800032e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	fbb5 f8f0 	udiv	r8, r5, r0
 800033a:	0c1c      	lsrs	r4, r3, #16
 800033c:	fb00 5518 	mls	r5, r0, r8, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	d90b      	bls.n	8000368 <__udivmoddi4+0x1b0>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f108 3aff 	add.w	sl, r8, #4294967295
 8000358:	f080 8087 	bcs.w	800046a <__udivmoddi4+0x2b2>
 800035c:	42a5      	cmp	r5, r4
 800035e:	f240 8084 	bls.w	800046a <__udivmoddi4+0x2b2>
 8000362:	f1a8 0802 	sub.w	r8, r8, #2
 8000366:	4464      	add	r4, ip
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	b29d      	uxth	r5, r3
 800036c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000370:	fb00 4413 	mls	r4, r0, r3, r4
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	fb03 fe0e 	mul.w	lr, r3, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x1da>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f103 30ff 	add.w	r0, r3, #4294967295
 8000388:	d26b      	bcs.n	8000462 <__udivmoddi4+0x2aa>
 800038a:	45a6      	cmp	lr, r4
 800038c:	d969      	bls.n	8000462 <__udivmoddi4+0x2aa>
 800038e:	3b02      	subs	r3, #2
 8000390:	4464      	add	r4, ip
 8000392:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000396:	fba0 8302 	umull	r8, r3, r0, r2
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	429c      	cmp	r4, r3
 80003a0:	46c6      	mov	lr, r8
 80003a2:	461d      	mov	r5, r3
 80003a4:	d355      	bcc.n	8000452 <__udivmoddi4+0x29a>
 80003a6:	d052      	beq.n	800044e <__udivmoddi4+0x296>
 80003a8:	b156      	cbz	r6, 80003c0 <__udivmoddi4+0x208>
 80003aa:	ebb9 030e 	subs.w	r3, r9, lr
 80003ae:	eb64 0405 	sbc.w	r4, r4, r5
 80003b2:	fa04 f707 	lsl.w	r7, r4, r7
 80003b6:	40cb      	lsrs	r3, r1
 80003b8:	40cc      	lsrs	r4, r1
 80003ba:	431f      	orrs	r7, r3
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c3 0120 	rsb	r1, r3, #32
 80003ca:	fa02 fc03 	lsl.w	ip, r2, r3
 80003ce:	fa20 f201 	lsr.w	r2, r0, r1
 80003d2:	fa25 f101 	lsr.w	r1, r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	432a      	orrs	r2, r5
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e6:	fb07 1510 	mls	r5, r7, r0, r1
 80003ea:	0c11      	lsrs	r1, r2, #16
 80003ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f0:	fb00 f50e 	mul.w	r5, r0, lr
 80003f4:	428d      	cmp	r5, r1
 80003f6:	fa04 f403 	lsl.w	r4, r4, r3
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x256>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 38ff 	add.w	r8, r0, #4294967295
 8000404:	d22f      	bcs.n	8000466 <__udivmoddi4+0x2ae>
 8000406:	428d      	cmp	r5, r1
 8000408:	d92d      	bls.n	8000466 <__udivmoddi4+0x2ae>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	b292      	uxth	r2, r2
 8000412:	fbb1 f5f7 	udiv	r5, r1, r7
 8000416:	fb07 1115 	mls	r1, r7, r5, r1
 800041a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800041e:	fb05 f10e 	mul.w	r1, r5, lr
 8000422:	4291      	cmp	r1, r2
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x280>
 8000426:	eb1c 0202 	adds.w	r2, ip, r2
 800042a:	f105 38ff 	add.w	r8, r5, #4294967295
 800042e:	d216      	bcs.n	800045e <__udivmoddi4+0x2a6>
 8000430:	4291      	cmp	r1, r2
 8000432:	d914      	bls.n	800045e <__udivmoddi4+0x2a6>
 8000434:	3d02      	subs	r5, #2
 8000436:	4462      	add	r2, ip
 8000438:	1a52      	subs	r2, r2, r1
 800043a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800043e:	e739      	b.n	80002b4 <__udivmoddi4+0xfc>
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e709      	b.n	800025a <__udivmoddi4+0xa2>
 8000446:	4639      	mov	r1, r7
 8000448:	e6e7      	b.n	800021a <__udivmoddi4+0x62>
 800044a:	4610      	mov	r0, r2
 800044c:	e6fc      	b.n	8000248 <__udivmoddi4+0x90>
 800044e:	45c1      	cmp	r9, r8
 8000450:	d2aa      	bcs.n	80003a8 <__udivmoddi4+0x1f0>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb63 050c 	sbc.w	r5, r3, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7a4      	b.n	80003a8 <__udivmoddi4+0x1f0>
 800045e:	4645      	mov	r5, r8
 8000460:	e7ea      	b.n	8000438 <__udivmoddi4+0x280>
 8000462:	4603      	mov	r3, r0
 8000464:	e795      	b.n	8000392 <__udivmoddi4+0x1da>
 8000466:	4640      	mov	r0, r8
 8000468:	e7d1      	b.n	800040e <__udivmoddi4+0x256>
 800046a:	46d0      	mov	r8, sl
 800046c:	e77c      	b.n	8000368 <__udivmoddi4+0x1b0>
 800046e:	3d02      	subs	r5, #2
 8000470:	4462      	add	r2, ip
 8000472:	e733      	b.n	80002dc <__udivmoddi4+0x124>
 8000474:	4608      	mov	r0, r1
 8000476:	e70b      	b.n	8000290 <__udivmoddi4+0xd8>
 8000478:	4464      	add	r4, ip
 800047a:	3802      	subs	r0, #2
 800047c:	e743      	b.n	8000306 <__udivmoddi4+0x14e>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4313      	orrs	r3, r2
 800049a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800049c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4013      	ands	r3, r2
 80004a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a8:	68fb      	ldr	r3, [r7, #12]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	2001      	movs	r0, #1
 80004c0:	f7ff ffe0 	bl	8000484 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	200b      	movs	r0, #11
 80004ca:	f001 fa3e 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004ce:	200b      	movs	r0, #11
 80004d0:	f001 fa55 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4013      	ands	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fc:	68fb      	ldr	r3, [r7, #12]
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	2002      	movs	r0, #2
 800051e:	f7ff ffdb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ffd8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000528:	2004      	movs	r0, #4
 800052a:	f7ff ffd5 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_Port, RF_SW_CTRL1_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	482f      	ldr	r0, [pc, #188]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000536:	f002 f86e 	bl	8002616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f002 f867 	bl	8002616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_Port, RF_SW_CTRL2_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	482a      	ldr	r0, [pc, #168]	; (80005f8 <MX_GPIO_Init+0xf0>)
 8000550:	f002 f861 	bl	8002616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SW_CTRL1_Pin;
 8000554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_Port, &GPIO_InitStruct);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4822      	ldr	r0, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xec>)
 800056c:	f001 fe0e 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000570:	2302      	movs	r3, #2
 8000572:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000574:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000578:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057a:	2301      	movs	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f001 fe01 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FREQ_HIGH_Pin;
 800058a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(FREQ_HIGH_GPIO_Port, &GPIO_InitStruct);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4619      	mov	r1, r3
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <MX_GPIO_Init+0xec>)
 800059e:	f001 fdf5 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Green_LED_Pin;
 80005a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Green_LED_GPIO_Port, &GPIO_InitStruct);
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f001 fde6 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SW_CTRL2_Pin;
 80005c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_Port, &GPIO_InitStruct);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <MX_GPIO_Init+0xf0>)
 80005d8:	f001 fdd8 	bl	800218c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2007      	movs	r0, #7
 80005e2:	f001 f9b2 	bl	800194a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005e6:	2007      	movs	r0, #7
 80005e8:	f001 f9c9 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	48000400 	.word	0x48000400
 80005f8:	48000800 	.word	0x48000800

080005fc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800060c:	f023 0218 	bic.w	r2, r3, #24
 8000610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4313      	orrs	r3, r2
 8000618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f001 f867 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f807 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f7ff ff69 	bl	8000508 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000636:	f00a f870 	bl	800a71a <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 800063a:	f00a f876 	bl	800a72a <MX_SubGHz_Phy_Process>
 800063e:	e7fc      	b.n	800063a <main+0x14>

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09a      	sub	sp, #104	; 0x68
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2248      	movs	r2, #72	; 0x48
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00b fd0e 	bl	800c070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000666:	f002 f82f 	bl	80026c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff ffc6 	bl	80005fc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xb0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <SystemClock_Config+0xb0>)
 800067a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemClock_Config+0xb0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800068c:	2324      	movs	r3, #36	; 0x24
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000690:	2381      	movs	r3, #129	; 0x81
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000698:	2300      	movs	r3, #0
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800069c:	23b0      	movs	r3, #176	; 0xb0
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fb59 	bl	8002d60 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b4:	f000 f81e 	bl	80006f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006b8:	234f      	movs	r3, #79	; 0x4f
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fec4 	bl	8003464 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f807 	bl	80006f4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3768      	adds	r7, #104	; 0x68
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>

080006fe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800070a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800072c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4013      	ands	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	222c      	movs	r2, #44	; 0x2c
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f00b fc87 	bl	800c070 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000764:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <MX_RTC_Init+0xa4>)
 8000766:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <MX_RTC_Init+0xa0>)
 800076a:	221f      	movs	r2, #31
 800076c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_RTC_Init+0xa0>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000786:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_RTC_Init+0xa0>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_RTC_Init+0xa0>)
 8000798:	f003 fb20 	bl	8003ddc <HAL_RTC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80007a2:	f7ff ffa7 	bl	80006f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <MX_RTC_Init+0xa0>)
 80007a8:	f003 fe16 	bl	80043d8 <HAL_RTCEx_SetSSRU_IT>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80007b2:	f7ff ff9f 	bl	80006f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 80007b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80007ba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80007c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c8:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80007ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_RTC_Init+0xa0>)
 80007d8:	f003 fb82 	bl	8003ee0 <HAL_RTC_SetAlarm_IT>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_RTC_Init+0x96>
  {
    Error_Handler();
 80007e2:	f7ff ff87 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3730      	adds	r7, #48	; 0x30
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000038 	.word	0x20000038
 80007f4:	40002800 	.word	0x40002800

080007f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	; 0x40
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2238      	movs	r2, #56	; 0x38
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fc31 	bl	800c070 <memset>
  if(rtcHandle->Instance==RTC)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <HAL_RTC_MspInit+0x74>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d125      	bne.n	8000864 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800081e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f9bd 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000834:	f7ff ff5e 	bl	80006f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000838:	f7ff ff61 	bl	80006fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800083c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000840:	f7ff ff6d 	bl	800071e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2002      	movs	r0, #2
 800084a:	f001 f87e 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800084e:	2002      	movs	r0, #2
 8000850:	f001 f895 	bl	800197e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	202a      	movs	r0, #42	; 0x2a
 800085a:	f001 f876 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800085e:	202a      	movs	r0, #42	; 0x2a
 8000860:	f001 f88d 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3740      	adds	r7, #64	; 0x40
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40002800 	.word	0x40002800

08000870 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8000876:	2201      	movs	r2, #1
 8000878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	58000400 	.word	0x58000400

08000888 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80008a4:	f000 ff4a 	bl	800173c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80008a8:	f7ff ffe2 	bl	8000870 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 ff9d 	bl	80027ec <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80008ba:	f000 ff4d 	bl	8001758 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80008be:	f000 fda5 	bl	800140c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80008ca:	f000 ff37 	bl	800173c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80008ce:	2101      	movs	r1, #1
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 ff07 	bl	80026e4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80008de:	f000 ff3b 	bl	8001758 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <NMI_Handler+0x4>

080008f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <HardFault_Handler+0x4>

080008fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <BusFault_Handler+0x4>

0800090a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <UsageFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000946:	f003 fd83 	bl	8004450 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000038 	.word	0x20000038

08000954 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000958:	2002      	movs	r0, #2
 800095a:	f001 fe8d 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <DMA1_Channel1_IRQHandler+0x10>)
 800096a:	f001 fa9f 	bl	8001eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000118 	.word	0x20000118

08000978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <USART2_IRQHandler+0x10>)
 800097e:	f004 fbb1 	bl	80050e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000084 	.word	0x20000084

0800098c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <RTC_Alarm_IRQHandler+0x10>)
 8000992:	f003 fc0d 	bl	80041b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000038 	.word	0x20000038

080009a0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <SUBGHZ_Radio_IRQHandler+0x10>)
 80009a6:	f004 f8c1 	bl	8004b2c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000070 	.word	0x20000070

080009b4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d8:	68fb      	ldr	r3, [r7, #12]
}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SUBGHZ_Init+0x20>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_SUBGHZ_Init+0x20>)
 80009f0:	f003 fe1a 	bl	8004628 <HAL_SUBGHZ_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80009fa:	f7ff fe7b 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000070 	.word	0x20000070

08000a08 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff ffcf 	bl	80009b4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f000 ff95 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000a20:	2032      	movs	r0, #50	; 0x32
 8000a22:	f000 ffac 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	608b      	str	r3, [r1, #8]
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ffe8 	bl	8000a2e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000a5e:	f00a fde3 	bl	800b628 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <SystemApp_Init+0x38>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8000a68:	f000 f89e 	bl	8000ba8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000a6c:	f00b f86c 	bl	800bb48 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <SystemApp_Init+0x3c>)
 8000a72:	f00b f905 	bl	800bc80 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000a76:	2002      	movs	r0, #2
 8000a78:	f00b f910 	bl	800bc9c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000a7c:	f00a f88c 	bl	800ab98 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f00a f8c8 	bl	800ac18 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000007c 	.word	0x2000007c
 8000a90:	08000aa1 	.word	0x08000aa1

08000a94 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000a98:	f00a f8ee 	bl	800ac78 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00a f98c 	bl	800adcc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aba:	9200      	str	r2, [sp, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <TimestampNow+0x3c>)
 8000abe:	2110      	movs	r1, #16
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f81d 	bl	8000b00 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fb56 	bl	8000178 <strlen>
 8000acc:	4603      	mov	r3, r0
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	0800c0fc 	.word	0x0800c0fc

08000ae0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f00a f866 	bl	800abb8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2002      	movs	r0, #2
 8000af8:	f00a f85e 	bl	800abb8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000b00:	b40c      	push	{r2, r3}
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f00a faa3 	bl	800b064 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b28:	b002      	add	sp, #8
 8000b2a:	4770      	bx	lr

08000b2c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_GetTick+0x24>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000b52:	f000 f8f9 	bl	8000d48 <TIMER_IF_GetTimerValue>
 8000b56:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000007c 	.word	0x2000007c

08000b68 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f96f 	bl	8000e56 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b8e:	4905      	ldr	r1, [pc, #20]	; (8000ba4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	58000800 	.word	0x58000800

08000ba8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000bb0:	f7ff ffe6 	bl	8000b80 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bb4:	f000 fdde 	bl	8001774 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bb8:	f000 fde2 	bl	8001780 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8000bbc:	f000 fde6 	bl	800178c <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
	...

08000be8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <TIMER_IF_Init+0x5c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01b      	beq.n	8000c38 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <TIMER_IF_Init+0x60>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000c08:	f7ff fda2 	bl	8000750 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000c0c:	f000 f856 	bl	8000cbc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <TIMER_IF_Init+0x60>)
 8000c16:	f003 fa6f 	bl	80040f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <TIMER_IF_Init+0x60>)
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000c22:	4809      	ldr	r0, [pc, #36]	; (8000c48 <TIMER_IF_Init+0x60>)
 8000c24:	f003 fba6 	bl	8004374 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f9d3 	bl	8000fd4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000c2e:	f000 f85f 	bl	8000cf0 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <TIMER_IF_Init+0x5c>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000007d 	.word	0x2000007d
 8000c48:	20000038 	.word	0x20000038

08000c4c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	222c      	movs	r2, #44	; 0x2c
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00b fa04 	bl	800c070 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000c68:	f000 f828 	bl	8000cbc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <TIMER_IF_StartTimer+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000c84:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c88:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	2201      	movs	r2, #1
 8000c96:	4619      	mov	r1, r3
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <TIMER_IF_StartTimer+0x6c>)
 8000c9a:	f003 f921 	bl	8003ee0 <HAL_RTC_SetAlarm_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000ca4:	f7ff fd26 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3738      	adds	r7, #56	; 0x38
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000080 	.word	0x20000080
 8000cb8:	20000038 	.word	0x20000038

08000cbc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <TIMER_IF_StopTimer+0x2c>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <TIMER_IF_StopTimer+0x30>)
 8000cd2:	f003 fa11 	bl	80040f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <TIMER_IF_StopTimer+0x30>)
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40002800 	.word	0x40002800
 8000cec:	20000038 	.word	0x20000038

08000cf0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000cf4:	f000 f98e 	bl	8001014 <GetTimerTicks>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <TIMER_IF_SetTimerContext+0x18>)
 8000cfc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000cfe:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <TIMER_IF_SetTimerContext+0x18>)
 8000d00:	681b      	ldr	r3, [r3, #0]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000080 	.word	0x20000080

08000d0c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <TIMER_IF_GetTimerContext+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000080 	.word	0x20000080

08000d20 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000d2a:	f000 f973 	bl	8001014 <GetTimerTicks>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000080 	.word	0x20000080

08000d48 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <TIMER_IF_GetTimerValue+0x24>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000d5a:	f000 f95b 	bl	8001014 <GetTimerTicks>
 8000d5e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000007d 	.word	0x2000007d

08000d70 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000d7e:	687b      	ldr	r3, [r7, #4]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d8a:	b5b0      	push	{r4, r5, r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d92:	2100      	movs	r1, #0
 8000d94:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	2000      	movs	r0, #0
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	0d95      	lsrs	r5, r2, #22
 8000da0:	0294      	lsls	r4, r2, #10
 8000da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	4620      	mov	r0, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	f7ff f9eb 	bl	8000188 <__aeabi_uldivmod>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4613      	mov	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bdb0      	pop	{r4, r5, r7, pc}

08000dc4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000dc4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000dce:	2100      	movs	r1, #0
 8000dd0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	460c      	mov	r4, r1
 8000dd8:	4605      	mov	r5, r0
 8000dda:	4620      	mov	r0, r4
 8000ddc:	4629      	mov	r1, r5
 8000dde:	f04f 0a00 	mov.w	sl, #0
 8000de2:	f04f 0b00 	mov.w	fp, #0
 8000de6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8000dea:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8000dee:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8000df2:	4650      	mov	r0, sl
 8000df4:	4659      	mov	r1, fp
 8000df6:	1b02      	subs	r2, r0, r4
 8000df8:	eb61 0305 	sbc.w	r3, r1, r5
 8000dfc:	f04f 0000 	mov.w	r0, #0
 8000e00:	f04f 0100 	mov.w	r1, #0
 8000e04:	0099      	lsls	r1, r3, #2
 8000e06:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e0a:	0090      	lsls	r0, r2, #2
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	eb12 0804 	adds.w	r8, r2, r4
 8000e14:	eb43 0905 	adc.w	r9, r3, r5
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e2c:	4690      	mov	r8, r2
 8000e2e:	4699      	mov	r9, r3
 8000e30:	4640      	mov	r0, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	0a82      	lsrs	r2, r0, #10
 8000e3e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000e42:	0a8b      	lsrs	r3, r1, #10
 8000e44:	4613      	mov	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000e48:	68fb      	ldr	r3, [r7, #12]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000e54:	4770      	bx	lr

08000e56 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ff93 	bl	8000d8a <TIMER_IF_Convert_ms2Tick>
 8000e64:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8000e66:	f000 f8d5 	bl	8001014 <GetTimerTicks>
 8000e6a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e6c:	e000      	b.n	8000e70 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8000e6e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8000e70:	f000 f8d0 	bl	8001014 <GetTimerTicks>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f6      	bhi.n	8000e6e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8000e92:	f00a fd17 	bl	800b8c4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8000ea6:	f000 f8a5 	bl	8000ff4 <TIMER_IF_BkUp_Read_MSBticks>
 8000eaa:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f88f 	bl	8000fd4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8000ebe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8000ecc:	f000 f8a2 	bl	8001014 <GetTimerTicks>
 8000ed0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8000ed2:	f000 f88f 	bl	8000ff4 <TIMER_IF_BkUp_Read_MSBticks>
 8000ed6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	2200      	movs	r2, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	60fa      	str	r2, [r7, #12]
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	000b      	movs	r3, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	eb12 0804 	adds.w	r8, r2, r4
 8000efa:	eb43 0905 	adc.w	r9, r3, r5
 8000efe:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8000f02:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	0a82      	lsrs	r2, r0, #10
 8000f10:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000f14:	0a8b      	lsrs	r3, r1, #10
 8000f16:	4613      	mov	r3, r2
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8000f28:	f04f 0b00 	mov.w	fp, #0
 8000f2c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff46 	bl	8000dc4 <TIMER_IF_Convert_Tick2ms>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8000f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000f4c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8000f5a:	f003 fa9d 	bl	8004498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000038 	.word	0x20000038

08000f6c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	2101      	movs	r1, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8000f7a:	f003 fa8d 	bl	8004498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000038 	.word	0x20000038

08000f8c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000f96:	2100      	movs	r1, #0
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8000f9a:	f003 fa95 	bl	80044c8 <HAL_RTCEx_BKUPRead>
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000038 	.word	0x20000038

08000fb0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8000fbe:	f003 fa83 	bl	80044c8 <HAL_RTCEx_BKUPRead>
 8000fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000038 	.word	0x20000038

08000fd4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8000fe2:	f003 fa59 	bl	8004498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000038 	.word	0x20000038

08000ff4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8000ffe:	f003 fa63 	bl	80044c8 <HAL_RTCEx_BKUPRead>
 8001002:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001004:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000038 	.word	0x20000038

08001014 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <GetTimerTicks+0x34>)
 800101c:	f7ff fdd8 	bl	8000bd0 <LL_RTC_TIME_GetSubSecond>
 8001020:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001022:	e003      	b.n	800102c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <GetTimerTicks+0x34>)
 8001026:	f7ff fdd3 	bl	8000bd0 <LL_RTC_TIME_GetSubSecond>
 800102a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <GetTimerTicks+0x34>)
 800102e:	f7ff fdcf 	bl	8000bd0 <LL_RTC_TIME_GetSubSecond>
 8001032:	4602      	mov	r2, r0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4293      	cmp	r3, r2
 8001038:	d1f4      	bne.n	8001024 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40002800 	.word	0x40002800

0800104c <LL_AHB2_GRP1_EnableClock>:
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4313      	orrs	r3, r2
 8001062:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001068:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <LL_APB1_GRP1_EnableClock>:
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800108a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4313      	orrs	r3, r2
 8001092:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <LL_APB1_GRP1_DisableClock>:
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80010b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	43db      	mvns	r3, r3
 80010be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c2:	4013      	ands	r3, r2
 80010c4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <MX_USART2_UART_Init+0x94>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_USART2_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_USART2_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_USART2_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_USART2_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <MX_USART2_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x90>)
 800111a:	f003 fec6 	bl	8004eaa <HAL_UART_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001124:	f7ff fae6 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <MX_USART2_UART_Init+0x90>)
 800112c:	f005 ffe9 	bl	8007102 <HAL_UARTEx_SetTxFifoThreshold>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001136:	f7ff fadd 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x90>)
 800113e:	f006 f81e 	bl	800717e <HAL_UARTEx_SetRxFifoThreshold>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001148:	f7ff fad4 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_USART2_UART_Init+0x90>)
 800114e:	f005 ff9d 	bl	800708c <HAL_UARTEx_EnableFifoMode>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001158:	f7ff facc 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000084 	.word	0x20000084
 8001164:	40004400 	.word	0x40004400

08001168 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b096      	sub	sp, #88	; 0x58
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00a ff71 	bl	800c070 <memset>
  if(uartHandle->Instance==USART2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2f      	ldr	r2, [pc, #188]	; (8001250 <HAL_UART_MspInit+0xe8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d156      	bne.n	8001246 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001198:	2302      	movs	r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_UART_MspInit+0xec>)
 800119e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fcff 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f7ff faa0 	bl	80006f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011b8:	f7ff ff60 	bl	800107c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff ff45 	bl	800104c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 80011c2:	230c      	movs	r3, #12
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d2:	2307      	movs	r3, #7
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 ffd4 	bl	800218c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_UART_MspInit+0xf0>)
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_UART_MspInit+0xf4>)
 80011e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_UART_MspInit+0xf0>)
 80011ec:	2214      	movs	r2, #20
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_UART_MspInit+0xf0>)
 80011f2:	2210      	movs	r2, #16
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0xf0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_UART_MspInit+0xf0>)
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_UART_MspInit+0xf0>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_UART_MspInit+0xf0>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_UART_MspInit+0xf0>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_UART_MspInit+0xf0>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800121a:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_UART_MspInit+0xf0>)
 800121c:	f000 fbcc 	bl	80019b8 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001226:	f7ff fa65 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_UART_MspInit+0xf0>)
 800122e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_UART_MspInit+0xf0>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	2025      	movs	r0, #37	; 0x25
 800123c:	f000 fb85 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001240:	2025      	movs	r0, #37	; 0x25
 8001242:	f000 fb9c 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3758      	adds	r7, #88	; 0x58
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40004400 	.word	0x40004400
 8001254:	000c0004 	.word	0x000c0004
 8001258:	20000118 	.word	0x20000118
 800125c:	40020008 	.word	0x40020008

08001260 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_UART_MspDeInit+0x3c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d110      	bne.n	8001294 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001276:	f7ff ff19 	bl	80010ac <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, TX2_Pin|RX2_Pin);
 800127a:	210c      	movs	r1, #12
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f001 f8e4 	bl	800244c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fc3d 	bl	8001b08 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800128e:	2025      	movs	r0, #37	; 0x25
 8001290:	f000 fb83 	bl	800199a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40004400 	.word	0x40004400

080012a0 <LL_APB1_GRP1_ForceReset>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_APB1_GRP1_ReleaseReset>:
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80012ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d8:	4013      	ands	r3, r2
 80012da:	638b      	str	r3, [r1, #56]	; 0x38
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <LL_EXTI_EnableIT_0_31>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <LL_EXTI_EnableIT_0_31+0x24>)
 80012f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012f6:	4905      	ldr	r1, [pc, #20]	; (800130c <LL_EXTI_EnableIT_0_31+0x24>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	58000800 	.word	0x58000800

08001310 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <vcom_Init+0x28>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800131e:	f7ff f8c9 	bl	80004b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001322:	f7ff fed5 	bl	80010d0 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001326:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800132a:	f7ff ffdd 	bl	80012e8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800132e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000017c 	.word	0x2000017c

0800133c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001340:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001344:	f7ff ffac 	bl	80012a0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001348:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800134c:	f7ff ffb9 	bl	80012c2 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <vcom_DeInit+0x28>)
 8001352:	f7ff ff85 	bl	8001260 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001356:	200f      	movs	r0, #15
 8001358:	f000 fb1f 	bl	800199a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800135c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000084 	.word	0x20000084

08001368 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	461a      	mov	r2, r3
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <vcom_Trace_DMA+0x24>)
 800137c:	f003 fe32 	bl	8004fe4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8001380:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000084 	.word	0x20000084

08001390 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <vcom_ReceiveInit+0x70>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800139e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013a2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013ac:	4815      	ldr	r0, [pc, #84]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013ae:	f005 fde0 	bl	8006f72 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80013b2:	bf00      	nop
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d0f7      	beq.n	80013b4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80013c4:	bf00      	nop
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013d4:	d1f7      	bne.n	80013c6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013e4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013e8:	f005 fe1e 	bl	8007028 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	4906      	ldr	r1, [pc, #24]	; (8001408 <vcom_ReceiveInit+0x78>)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <vcom_ReceiveInit+0x74>)
 80013f2:	f003 fdab 	bl	8004f4c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80013f6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000180 	.word	0x20000180
 8001404:	20000084 	.word	0x20000084
 8001408:	20000178 	.word	0x20000178

0800140c <vcom_Resume>:

void vcom_Resume(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <vcom_Resume+0x28>)
 8001412:	f003 fd4a 	bl	8004eaa <HAL_UART_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <vcom_Resume+0x14>
  {
    Error_Handler();
 800141c:	f7ff f96a 	bl	80006f4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <vcom_Resume+0x2c>)
 8001422:	f000 fac9 	bl	80019b8 <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <vcom_Resume+0x24>
  {
    Error_Handler();
 800142c:	f7ff f962 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000084 	.word	0x20000084
 8001438:	20000118 	.word	0x20000118

0800143c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_UART_TxCpltCallback+0x24>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d103      	bne.n	8001456 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_UART_TxCpltCallback+0x28>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2000      	movs	r0, #0
 8001454:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004400 	.word	0x40004400
 8001464:	2000017c 	.word	0x2000017c

08001468 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <HAL_UART_RxCpltCallback+0x44>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d113      	bne.n	80014a2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_UART_RxCpltCallback+0x48>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_UART_RxCpltCallback+0x30>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_UART_RxCpltCallback+0x48>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	2101      	movs	r1, #1
 8001494:	4807      	ldr	r0, [pc, #28]	; (80014b4 <HAL_UART_RxCpltCallback+0x4c>)
 8001496:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	4906      	ldr	r1, [pc, #24]	; (80014b4 <HAL_UART_RxCpltCallback+0x4c>)
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f003 fd55 	bl	8004f4c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004400 	.word	0x40004400
 80014b0:	20000180 	.word	0x20000180
 80014b4:	20000178 	.word	0x20000178

080014b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014bc:	f7ff fb82 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014e6:	f00a fdcb 	bl	800c080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ea:	f7ff f89c 	bl	8000626 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   r0, =_estack
 80014f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014fc:	0800c610 	.word	0x0800c610
  ldr r2, =_sbss
 8001500:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001504:	2000088c 	.word	0x2000088c

08001508 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>

0800150a <LL_AHB2_GRP1_EnableClock>:
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
   * so correct it here
   */
//  SUBGRF_WriteRegister( REG_XTA_TRIM, 0x10 );
//  SUBGRF_WriteRegister( REG_XTB_TRIM, 0x10 );

  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff ffda 	bl	800150a <LL_AHB2_GRP1_EnableClock>
  RF_SW_CTRL2_GPIO_CLK_ENABLE();
 8001556:	2004      	movs	r0, #4
 8001558:	f7ff ffd7 	bl	800150a <LL_AHB2_GRP1_EnableClock>

  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800155c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001560:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <BSP_RADIO_Init+0x70>)
 8001574:	f000 fe0a 	bl	800218c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <BSP_RADIO_Init+0x74>)
 8001584:	f000 fe02 	bl	800218c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <BSP_RADIO_Init+0x74>)
 8001590:	f001 f841 	bl	8002616 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	4804      	ldr	r0, [pc, #16]	; (80015ac <BSP_RADIO_Init+0x70>)
 800159c:	f001 f83b 	bl	8002616 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800

080015b4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d83f      	bhi.n	8001644 <BSP_RADIO_ConfigRFSwitch+0x90>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <BSP_RADIO_ConfigRFSwitch+0x18>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015f7 	.word	0x080015f7
 80015d4:	08001611 	.word	0x08001611
 80015d8:	0800162b 	.word	0x0800162b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e2:	481b      	ldr	r0, [pc, #108]	; (8001650 <BSP_RADIO_ConfigRFSwitch+0x9c>)
 80015e4:	f001 f817 	bl	8002616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <BSP_RADIO_ConfigRFSwitch+0xa0>)
 80015f0:	f001 f811 	bl	8002616 <HAL_GPIO_WritePin>
      break;      
 80015f4:	e027      	b.n	8001646 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	4814      	ldr	r0, [pc, #80]	; (8001650 <BSP_RADIO_ConfigRFSwitch+0x9c>)
 80015fe:	f001 f80a 	bl	8002616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001608:	4812      	ldr	r0, [pc, #72]	; (8001654 <BSP_RADIO_ConfigRFSwitch+0xa0>)
 800160a:	f001 f804 	bl	8002616 <HAL_GPIO_WritePin>
      break;
 800160e:	e01a      	b.n	8001646 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <BSP_RADIO_ConfigRFSwitch+0x9c>)
 8001618:	f000 fffd 	bl	8002616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <BSP_RADIO_ConfigRFSwitch+0xa0>)
 8001624:	f000 fff7 	bl	8002616 <HAL_GPIO_WritePin>
      break;
 8001628:	e00d      	b.n	8001646 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <BSP_RADIO_ConfigRFSwitch+0x9c>)
 8001632:	f000 fff0 	bl	8002616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <BSP_RADIO_ConfigRFSwitch+0xa0>)
 800163e:	f000 ffea 	bl	8002616 <HAL_GPIO_WritePin>
      break;
 8001642:	e000      	b.n	8001646 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8001644:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	48000400 	.word	0x48000400
 8001654:	48000800 	.word	0x48000800

08001658 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800165c:	2302      	movs	r3, #2
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_NOT_SUPPORTED;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e001      	b.n	800169c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001698:	2316      	movs	r3, #22
 800169a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6053      	str	r3, [r2, #4]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	e0042000 	.word	0xe0042000

080016c4 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	6053      	str	r3, [r2, #4]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	e0042000 	.word	0xe0042000

080016e0 <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6053      	str	r3, [r2, #4]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	e0042000 	.word	0xe0042000

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f000 f914 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800170c:	f002 f86e 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8001710:	4603      	mov	r3, r0
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_Init+0x3c>)
 8001714:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	200f      	movs	r0, #15
 8001718:	f7ff fa08 	bl	8000b2c <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e001      	b.n	800172c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001728:	f7ff f8dd 	bl	80008e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000000 	.word	0x20000000

0800173c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <HAL_SuspendTick+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_SuspendTick+0x18>)
 8001746:	f023 0302 	bic.w	r3, r3, #2
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_ResumeTick+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_ResumeTick+0x18>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001778:	f7ff ff96 	bl	80016a8 <LL_DBGMCU_EnableDBGSleepMode>
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001784:	f7ff ff9e 	bl	80016c4 <LL_DBGMCU_EnableDBGStopMode>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001790:	f7ff ffa6 	bl	80016e0 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <__NVIC_EnableIRQ+0x34>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	2b00      	cmp	r3, #0
 8001844:	db12      	blt.n	800186c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	490a      	ldr	r1, [pc, #40]	; (8001878 <__NVIC_DisableIRQ+0x44>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	3320      	adds	r3, #32
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001860:	f3bf 8f4f 	dsb	sy
}
 8001864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001866:	f3bf 8f6f 	isb	sy
}
 800186a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff2b 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff42 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ffb4 	bl	80018d0 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff83 	bl	800187c <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff35 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff43 	bl	8001834 <__NVIC_DisableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e08e      	b.n	8001ae8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_DMA_Init+0x138>)
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d80f      	bhi.n	80019f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b45      	ldr	r3, [pc, #276]	; (8001af4 <HAL_DMA_Init+0x13c>)
 80019de:	4413      	add	r3, r2
 80019e0:	4a45      	ldr	r2, [pc, #276]	; (8001af8 <HAL_DMA_Init+0x140>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a42      	ldr	r2, [pc, #264]	; (8001afc <HAL_DMA_Init+0x144>)
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b40      	ldr	r3, [pc, #256]	; (8001b00 <HAL_DMA_Init+0x148>)
 80019fe:	4413      	add	r3, r2
 8001a00:	4a3d      	ldr	r2, [pc, #244]	; (8001af8 <HAL_DMA_Init+0x140>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	009a      	lsls	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_DMA_Init+0x14c>)
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fb24 	bl	80020b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a74:	d102      	bne.n	8001a7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_DMA_Init+0x106>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d80c      	bhi.n	8001abe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fb4d 	bl	8002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	e008      	b.n	8001ad0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40020407 	.word	0x40020407
 8001af4:	bffdfff8 	.word	0xbffdfff8
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	40020000 	.word	0x40020000
 8001b00:	bffdfbf8 	.word	0xbffdfbf8
 8001b04:	40020400 	.word	0x40020400

08001b08 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e07b      	b.n	8001c12 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_DMA_DeInit+0x114>)
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d80f      	bhi.n	8001b56 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_DMA_DeInit+0x118>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_DMA_DeInit+0x11c>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	009a      	lsls	r2, r3, #2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <HAL_DMA_DeInit+0x120>)
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40
 8001b54:	e00e      	b.n	8001b74 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <HAL_DMA_DeInit+0x124>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_DMA_DeInit+0x11c>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a2f      	ldr	r2, [pc, #188]	; (8001c30 <HAL_DMA_DeInit+0x128>)
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f003 021c 	and.w	r2, r3, #28
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fa8f 	bl	80020b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ba6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00f      	beq.n	8001bd0 <HAL_DMA_DeInit+0xc8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d80b      	bhi.n	8001bd0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fac3 	bl	8002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bce:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40020407 	.word	0x40020407
 8001c20:	bffdfff8 	.word	0xbffdfff8
 8001c24:	cccccccd 	.word	0xcccccccd
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	bffdfbf8 	.word	0xbffdfbf8
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Start_IT+0x20>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e069      	b.n	8001d28 <HAL_DMA_Start_IT+0xf4>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d155      	bne.n	8001d14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f9d3 	bl	8002038 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 020e 	orr.w	r2, r2, #14
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e00f      	b.n	8001ccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0204 	bic.w	r2, r2, #4
 8001cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 020a 	orr.w	r2, r2, #10
 8001cca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e008      	b.n	8001d26 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e04f      	b.n	8001de2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d008      	beq.n	8001d60 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e040      	b.n	8001de2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020e 	bic.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f003 021c 	and.w	r2, r3, #28
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d005      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e047      	b.n	8001ea0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 020e 	bic.w	r2, r2, #14
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f003 021c 	and.w	r2, r3, #28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
    }
  }
  return status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f003 031c 	and.w	r3, r3, #28
 8001ecc:	2204      	movs	r2, #4
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d027      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x7c>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d022      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 021c 	and.w	r2, r3, #28
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8081 	beq.w	8002020 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001f26:	e07b      	b.n	8002020 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f003 031c 	and.w	r3, r3, #28
 8001f30:	2202      	movs	r2, #2
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d03d      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x10c>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d038      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 020a 	bic.w	r2, r2, #10
 8001f62:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_DMA_IRQHandler+0x180>)
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d909      	bls.n	8001f8c <HAL_DMA_IRQHandler+0xe0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7c:	f003 031c 	and.w	r3, r3, #28
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_DMA_IRQHandler+0x184>)
 8001f82:	2102      	movs	r1, #2
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	6053      	str	r3, [r2, #4]
 8001f8a:	e008      	b.n	8001f9e <HAL_DMA_IRQHandler+0xf2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 031c 	and.w	r3, r3, #28
 8001f94:	4a27      	ldr	r2, [pc, #156]	; (8002034 <HAL_DMA_IRQHandler+0x188>)
 8001f96:	2102      	movs	r1, #2
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d038      	beq.n	8002020 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001fb6:	e033      	b.n	8002020 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f003 031c 	and.w	r3, r3, #28
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02a      	beq.n	8002022 <HAL_DMA_IRQHandler+0x176>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d025      	beq.n	8002022 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 020e 	bic.w	r2, r2, #14
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f003 021c 	and.w	r2, r3, #28
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002020:	bf00      	nop
 8002022:	bf00      	nop
}
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40020080 	.word	0x40020080
 8002030:	40020400 	.word	0x40020400
 8002034:	40020000 	.word	0x40020000

08002038 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800204e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002060:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 021c 	and.w	r2, r3, #28
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2101      	movs	r1, #1
 8002070:	fa01 f202 	lsl.w	r2, r1, r2
 8002074:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b10      	cmp	r3, #16
 8002084:	d108      	bne.n	8002098 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002096:	e007      	b.n	80020a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
	...

080020b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d813      	bhi.n	80020f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020d4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3b08      	subs	r3, #8
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e011      	b.n	8002114 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	4b10      	ldr	r3, [pc, #64]	; (800213c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80020fa:	4413      	add	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b08      	subs	r3, #8
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	3307      	adds	r3, #7
 8002112:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2201      	movs	r2, #1
 8002122:	409a      	lsls	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40020407 	.word	0x40020407
 8002138:	cccccccd 	.word	0xcccccccd
 800213c:	4002081c 	.word	0x4002081c
 8002140:	40020880 	.word	0x40020880

08002144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002154:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002168:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	3b01      	subs	r3, #1
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	1000823f 	.word	0x1000823f
 8002188:	40020940 	.word	0x40020940

0800218c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219a:	e140      	b.n	800241e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8132 	beq.w	8002418 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_GPIO_Init+0x40>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4013      	ands	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0201 	and.w	r2, r3, #1
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b03      	cmp	r3, #3
 8002238:	d017      	beq.n	800226a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 808c 	beq.w	8002418 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_GPIO_Init+0x2b0>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	2207      	movs	r2, #7
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232a:	d00d      	beq.n	8002348 <HAL_GPIO_Init+0x1bc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a44      	ldr	r2, [pc, #272]	; (8002440 <HAL_GPIO_Init+0x2b4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x1b8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a43      	ldr	r2, [pc, #268]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_GPIO_Init+0x1b4>
 800233c:	2302      	movs	r3, #2
 800233e:	e004      	b.n	800234a <HAL_GPIO_Init+0x1be>
 8002340:	2307      	movs	r3, #7
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x1be>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_GPIO_Init+0x1be>
 8002348:	2300      	movs	r3, #0
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	f002 0203 	and.w	r2, r2, #3
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	4093      	lsls	r3, r2
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800235a:	4938      	ldr	r1, [pc, #224]	; (800243c <HAL_GPIO_Init+0x2b0>)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	3302      	adds	r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002368:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800238c:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80023e2:	4a19      	ldr	r2, [pc, #100]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80023ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	f47f aeb7 	bne.w	800219c <HAL_GPIO_Init+0x10>
  }
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40010000 	.word	0x40010000
 8002440:	48000400 	.word	0x48000400
 8002444:	48000800 	.word	0x48000800
 8002448:	58000800 	.word	0x58000800

0800244c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800245a:	e0af      	b.n	80025bc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800245c:	2201      	movs	r2, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a2 	beq.w	80025b6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002472:	4a59      	ldr	r2, [pc, #356]	; (80025d8 <HAL_GPIO_DeInit+0x18c>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	2207      	movs	r2, #7
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4013      	ands	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800249a:	d00d      	beq.n	80024b8 <HAL_GPIO_DeInit+0x6c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_DeInit+0x190>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d007      	beq.n	80024b4 <HAL_GPIO_DeInit+0x68>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_DeInit+0x194>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_GPIO_DeInit+0x64>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_DeInit+0x6e>
 80024b0:	2307      	movs	r3, #7
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_DeInit+0x6e>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_DeInit+0x6e>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d136      	bne.n	8002538 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4943      	ldr	r1, [pc, #268]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	493f      	ldr	r1, [pc, #252]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	493b      	ldr	r1, [pc, #236]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80024fc:	4b39      	ldr	r3, [pc, #228]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	43db      	mvns	r3, r3
 8002504:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_GPIO_DeInit+0x198>)
 8002506:	4013      	ands	r3, r2
 8002508:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	2207      	movs	r2, #7
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800251a:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <HAL_GPIO_DeInit+0x18c>)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43da      	mvns	r2, r3
 800252a:	482b      	ldr	r0, [pc, #172]	; (80025d8 <HAL_GPIO_DeInit+0x18c>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	400a      	ands	r2, r1
 8002532:	3302      	adds	r3, #2
 8002534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2103      	movs	r1, #3
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	08d2      	lsrs	r2, r2, #3
 800256c:	4019      	ands	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2103      	movs	r1, #3
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	2101      	movs	r1, #1
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	401a      	ands	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2103      	movs	r1, #3
 80025aa:	fa01 f303 	lsl.w	r3, r1, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	401a      	ands	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f47f af49 	bne.w	800245c <HAL_GPIO_DeInit+0x10>
  }
}
 80025ca:	bf00      	nop
 80025cc:	bf00      	nop
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40010000 	.word	0x40010000
 80025dc:	48000400 	.word	0x48000400
 80025e0:	48000800 	.word	0x48000800
 80025e4:	58000800 	.word	0x58000800

080025e8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]
 8002622:	4613      	mov	r3, r2
 8002624:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002626:	787b      	ldrb	r3, [r7, #1]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262c:	887a      	ldrh	r2, [r7, #2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002632:	e002      	b.n	800263a <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002634:	887a      	ldrh	r2, [r7, #2]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	43d9      	mvns	r1, r3
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	400b      	ands	r3, r1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(Button_Pin) != RESET)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(Button_Pin);
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	2202      	movs	r2, #2
 8002692:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f806 	bl	80026a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	58000800 	.word	0x58000800

080026a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f7ff ffc3 	bl	8002644 <HAL_GPIO_TogglePin>

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80026d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	58000400 	.word	0x58000400

080026e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_PWR_EnterSLEEPMode+0x60>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002702:	d10d      	bne.n	8002720 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002704:	f000 f83c 	bl	8002780 <HAL_PWREx_DisableLowPowerRunMode>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800270e:	e015      	b.n	800273c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800271c:	f000 f822 	bl	8002764 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002732:	bf30      	wfi
 8002734:	e002      	b.n	800273c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002736:	bf40      	sev
    __WFE();
 8002738:	bf20      	wfe
    __WFE();
 800273a:	bf20      	wfe
  }
}
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	58000400 	.word	0x58000400
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_PWREx_GetVoltageRange+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	58000400 	.word	0x58000400

08002764 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800276e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	58000400 	.word	0x58000400

08002780 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800278c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002790:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2232      	movs	r2, #50	; 0x32
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4a12      	ldr	r2, [pc, #72]	; (80027e8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9b      	lsrs	r3, r3, #18
 80027a4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027a6:	e002      	b.n	80027ae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80027ae:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ba:	d102      	bne.n	80027c2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f2      	bne.n	80027a8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80027c2:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ce:	d101      	bne.n	80027d4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e000      	b.n	80027d6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	58000400 	.word	0x58000400
 80027e4:	20000000 	.word	0x20000000
 80027e8:	431bde83 	.word	0x431bde83

080027ec <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0307 	bic.w	r3, r3, #7
 80027fe:	4a0e      	ldr	r2, [pc, #56]	; (8002838 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800280c:	f043 0304 	orr.w	r3, r3, #4
 8002810:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002818:	bf30      	wfi
 800281a:	e002      	b.n	8002822 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800281c:	bf40      	sev
    __WFE();
 800281e:	bf20      	wfe
    __WFE();
 8002820:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6113      	str	r3, [r2, #16]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	58000400 	.word	0x58000400
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002850:	d101      	bne.n	8002856 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr
 8002860:	58000400 	.word	0x58000400

08002864 <LL_RCC_HSE_EnableTcxo>:
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_RCC_HSE_DisableTcxo>:
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002892:	6013      	str	r3, [r2, #0]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ae:	d101      	bne.n	80028b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_RCC_HSE_Enable>:
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_RCC_HSE_Disable>:
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_HSE_IsReady>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002908:	d101      	bne.n	800290e <LL_RCC_HSE_IsReady+0x18>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <LL_RCC_HSE_IsReady+0x1a>
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_HSI_Enable>:
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_HSI_Disable>:
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_HSI_IsReady>:
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d101      	bne.n	8002968 <LL_RCC_HSI_IsReady+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_RCC_HSI_IsReady+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <LL_RCC_LSE_IsReady>:
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800299e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d101      	bne.n	80029b2 <LL_RCC_LSE_IsReady+0x18>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_RCC_LSE_IsReady+0x1a>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_LSI_Enable>:
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <LL_RCC_LSI_Disable>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_LSI_IsReady>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d101      	bne.n	8002a14 <LL_RCC_LSI_IsReady+0x18>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <LL_RCC_LSI_IsReady+0x1a>
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <LL_RCC_MSI_Enable>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_MSI_Disable>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <LL_RCC_MSI_IsReady>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d101      	bne.n	8002a6c <LL_RCC_MSI_IsReady+0x16>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <LL_RCC_MSI_IsReady+0x18>
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d101      	bne.n	8002a8c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_MSI_GetRange>:
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_SetSysClkSource>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_GetSysClkSource>:
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_SetAHBPrescaler>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_SetAHB3Prescaler>:
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b5e:	f023 020f 	bic.w	r2, r3, #15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_SetAPB1Prescaler>:
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_SetAPB2Prescaler>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_GetAHBPrescaler>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <LL_RCC_GetAHB3Prescaler>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <LL_RCC_GetAPB1Prescaler>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_GetAPB2Prescaler>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c50:	6013      	str	r3, [r2, #0]
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c6c:	d101      	bne.n	8002c72 <LL_RCC_PLL_IsReady+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <LL_RCC_PLL_IsReady+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d101      	bne.n	8002cee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d101      	bne.n	8002d12 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d2e:	d101      	bne.n	8002d34 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d50:	d101      	bne.n	8002d56 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e36f      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	f7ff fece 	bl	8002b12 <LL_RCC_GetSysClkSource>
 8002d76:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d78:	f7ff ffa2 	bl	8002cc0 <LL_RCC_PLL_GetMainSource>
 8002d7c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80c4 	beq.w	8002f14 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_RCC_OscConfig+0x3e>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d176      	bne.n	8002e86 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d173      	bne.n	8002e86 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e353      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x68>
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc6:	e006      	b.n	8002dd6 <HAL_RCC_OscConfig+0x76>
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d222      	bcs.n	8002e20 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fd3c 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e331      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fe53 	bl	8002ac4 <LL_RCC_MSI_SetCalibTrimming>
 8002e1e:	e021      	b.n	8002e64 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fe3a 	bl	8002ac4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fd01 	bl	800385c <RCC_SetFlashLatencyFromMSIRange>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2f6      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e64:	f000 fcc2 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4aa7      	ldr	r2, [pc, #668]	; (8003108 <HAL_RCC_OscConfig+0x3a8>)
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e6e:	4ba7      	ldr	r3, [pc, #668]	; (800310c <HAL_RCC_OscConfig+0x3ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fe5a 	bl	8000b2c <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d047      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	e2e5      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e8e:	f7ff fdc6 	bl	8002a1e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e92:	f7fd fe55 	bl	8000b40 <HAL_GetTick>
 8002e96:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e9a:	f7fd fe51 	bl	8000b40 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2d2      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002eac:	f7ff fdd3 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f1      	beq.n	8002e9a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fdef 	bl	8002ac4 <LL_RCC_MSI_SetCalibTrimming>
 8002ee6:	e015      	b.n	8002f14 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ee8:	f7ff fda7 	bl	8002a3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eec:	f7fd fe28 	bl	8000b40 <HAL_GetTick>
 8002ef0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef4:	f7fd fe24 	bl	8000b40 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e2a5      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f06:	f7ff fda6 	bl	8002a56 <LL_RCC_MSI_IsReady>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f1      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x194>
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f12:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d058      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d108      	bne.n	8002f3e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d105      	bne.n	8002f3e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d14b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e289      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d102      	bne.n	8002f64 <HAL_RCC_OscConfig+0x204>
 8002f5e:	f7ff fcae 	bl	80028be <LL_RCC_HSE_Enable>
 8002f62:	e00d      	b.n	8002f80 <HAL_RCC_OscConfig+0x220>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f6c:	d104      	bne.n	8002f78 <HAL_RCC_OscConfig+0x218>
 8002f6e:	f7ff fc79 	bl	8002864 <LL_RCC_HSE_EnableTcxo>
 8002f72:	f7ff fca4 	bl	80028be <LL_RCC_HSE_Enable>
 8002f76:	e003      	b.n	8002f80 <HAL_RCC_OscConfig+0x220>
 8002f78:	f7ff fcaf 	bl	80028da <LL_RCC_HSE_Disable>
 8002f7c:	f7ff fc80 	bl	8002880 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fdda 	bl	8000b40 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fd fdd6 	bl	8000b40 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e257      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002fa2:	f7ff fca8 	bl	80028f6 <LL_RCC_HSE_IsReady>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f1      	beq.n	8002f90 <HAL_RCC_OscConfig+0x230>
 8002fac:	e011      	b.n	8002fd2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fd fdc7 	bl	8000b40 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb6:	f7fd fdc3 	bl	8000b40 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e244      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fc8:	f7ff fc95 	bl	80028f6 <LL_RCC_HSE_IsReady>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f1      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d046      	beq.n	800306c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x290>
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d10e      	bne.n	8003008 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e22a      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fcb6 	bl	8002972 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003006:	e031      	b.n	800306c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d019      	beq.n	8003044 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	f7ff fc82 	bl	8002918 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fd fd94 	bl	8000b40 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301c:	f7fd fd90 	bl	8000b40 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e211      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800302e:	f7ff fc8f 	bl	8002950 <LL_RCC_HSI_IsReady>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f1      	beq.n	800301c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fc98 	bl	8002972 <LL_RCC_HSI_SetCalibTrimming>
 8003042:	e013      	b.n	800306c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	f7ff fc76 	bl	8002934 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fd fd7a 	bl	8000b40 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003050:	f7fd fd76 	bl	8000b40 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1f7      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003062:	f7ff fc75 	bl	8002950 <LL_RCC_HSI_IsReady>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f1      	bne.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d06e      	beq.n	8003156 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d056      	beq.n	800312e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003088:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	429a      	cmp	r2, r3
 8003096:	d031      	beq.n	80030fc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e1d0      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80030ba:	f7ff fc8f 	bl	80029dc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030be:	f7fd fd3f 	bl	8000b40 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fd fd3b 	bl	8000b40 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b11      	cmp	r3, #17
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1bc      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030d8:	f7ff fc90 	bl	80029fc <LL_RCC_LSI_IsReady>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f1      	bne.n	80030c6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	f023 0210 	bic.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fc:	f7ff fc5e 	bl	80029bc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fd fd1e 	bl	8000b40 <HAL_GetTick>
 8003104:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003106:	e00c      	b.n	8003122 <HAL_RCC_OscConfig+0x3c2>
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fd fd16 	bl	8000b40 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b11      	cmp	r3, #17
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e197      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003122:	f7ff fc6b 	bl	80029fc <LL_RCC_LSI_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f1      	beq.n	8003110 <HAL_RCC_OscConfig+0x3b0>
 800312c:	e013      	b.n	8003156 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	f7ff fc55 	bl	80029dc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7fd fd05 	bl	8000b40 <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313a:	f7fd fd01 	bl	8000b40 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b11      	cmp	r3, #17
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e182      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800314c:	f7ff fc56 	bl	80029fc <LL_RCC_LSI_IsReady>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f1      	bne.n	800313a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80d8 	beq.w	8003314 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003164:	f7ff fb6c 	bl	8002840 <LL_PWR_IsEnabledBkUpAccess>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d113      	bne.n	8003196 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800316e:	f7ff faab 	bl	80026c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fd fce5 	bl	8000b40 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fd fce1 	bl	8000b40 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e162      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800318c:	f7ff fb58 	bl	8002840 <LL_PWR_IsEnabledBkUpAccess>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f1      	beq.n	800317a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d07b      	beq.n	8003296 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b85      	cmp	r3, #133	; 0x85
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fd fcbd 	bl	8000b40 <HAL_GetTick>
 80031c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fd fcaf 	bl	8000b40 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e12e      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031f4:	f7ff fbd1 	bl	800299a <LL_RCC_LSE_IsReady>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b81      	cmp	r3, #129	; 0x81
 8003204:	d003      	beq.n	800320e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b85      	cmp	r3, #133	; 0x85
 800320c:	d121      	bne.n	8003252 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fd fc97 	bl	8000b40 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fd fc89 	bl	8000b40 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e108      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ec      	beq.n	800322a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003250:	e060      	b.n	8003314 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fc75 	bl	8000b40 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fd fc67 	bl	8000b40 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0e6      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ec      	bne.n	800326e <HAL_RCC_OscConfig+0x50e>
 8003294:	e03e      	b.n	8003314 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fd fc53 	bl	8000b40 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800329c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7fd fc45 	bl	8000b40 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0c4      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ec      	bne.n	80032b2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fc32 	bl	8000b40 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032f2:	e00a      	b.n	800330a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f4:	f7fd fc24 	bl	8000b40 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0a3      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800330a:	f7ff fb46 	bl	800299a <LL_RCC_LSE_IsReady>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ef      	bne.n	80032f4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8099 	beq.w	8003450 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d06c      	beq.n	80033fe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2b02      	cmp	r3, #2
 800332a:	d14b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	f7ff fc87 	bl	8002c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fd fc06 	bl	8000b40 <HAL_GetTick>
 8003334:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fc02 	bl	8000b40 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b0a      	cmp	r3, #10
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e083      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800334a:	f7ff fc86 	bl	8002c5a <LL_RCC_PLL_IsReady>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f1      	bne.n	8003338 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b40      	ldr	r3, [pc, #256]	; (800345c <HAL_RCC_OscConfig+0x6fc>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800336c:	0212      	lsls	r2, r2, #8
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003374:	4311      	orrs	r1, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003380:	430a      	orrs	r2, r1
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338a:	f7ff fc4a 	bl	8002c22 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fd fbcf 	bl	8000b40 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fd fbcb 	bl	8000b40 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b0a      	cmp	r3, #10
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e04c      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80033b8:	f7ff fc4f 	bl	8002c5a <LL_RCC_PLL_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f1      	beq.n	80033a6 <HAL_RCC_OscConfig+0x646>
 80033c2:	e045      	b.n	8003450 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	f7ff fc3b 	bl	8002c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fbba 	bl	8000b40 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fbb6 	bl	8000b40 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b0a      	cmp	r3, #10
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e037      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033e2:	f7ff fc3a 	bl	8002c5a <LL_RCC_PLL_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f1      	bne.n	80033d0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f6:	4b1a      	ldr	r3, [pc, #104]	; (8003460 <HAL_RCC_OscConfig+0x700>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
 80033fc:	e028      	b.n	8003450 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e023      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	429a      	cmp	r2, r3
 800341e:	d115      	bne.n	800344c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	429a      	cmp	r2, r3
 800342c:	d10e      	bne.n	800344c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	429a      	cmp	r2, r3
 800343c:	d106      	bne.n	800344c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	11c1808c 	.word	0x11c1808c
 8003460:	eefefffc 	.word	0xeefefffc

08003464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e10f      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003478:	4b89      	ldr	r3, [pc, #548]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d91b      	bls.n	80034be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003486:	4b86      	ldr	r3, [pc, #536]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 0207 	bic.w	r2, r3, #7
 800348e:	4984      	ldr	r1, [pc, #528]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003496:	f7fd fb53 	bl	8000b40 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800349e:	f7fd fb4f 	bl	8000b40 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0f3      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b0:	4b7b      	ldr	r3, [pc, #492]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d1ef      	bne.n	800349e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb2a 	bl	8002b28 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fb34 	bl	8000b40 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034dc:	f7fd fb30 	bl	8000b40 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0d4      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ee:	f7ff fbf2 	bl	8002cd6 <LL_RCC_IsActiveFlag_HPRE>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f1      	beq.n	80034dc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fb20 	bl	8002b4e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800350e:	f7fd fb17 	bl	8000b40 <HAL_GetTick>
 8003512:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003516:	f7fd fb13 	bl	8000b40 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0b7      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003528:	f7ff fbe6 	bl	8002cf8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f1      	beq.n	8003516 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fb19 	bl	8002b7a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003548:	f7fd fafa 	bl	8000b40 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003550:	f7fd faf6 	bl	8000b40 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e09a      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003562:	f7ff fbdb 	bl	8002d1c <LL_RCC_IsActiveFlag_PPRE1>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f1      	beq.n	8003550 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d017      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fb0e 	bl	8002ba0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003584:	f7fd fadc 	bl	8000b40 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800358c:	f7fd fad8 	bl	8000b40 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e07c      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800359e:	f7ff fbce 	bl	8002d3e <LL_RCC_IsActiveFlag_PPRE2>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f1      	beq.n	800358c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d043      	beq.n	800363c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035bc:	f7ff f99b 	bl	80028f6 <LL_RCC_HSE_IsReady>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11e      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e066      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035d2:	f7ff fb42 	bl	8002c5a <LL_RCC_PLL_IsReady>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d113      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e05b      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035e8:	f7ff fa35 	bl	8002a56 <LL_RCC_MSI_IsReady>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e050      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035f6:	f7ff f9ab 	bl	8002950 <LL_RCC_HSI_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e049      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fa6f 	bl	8002aec <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800360e:	f7fd fa97 	bl	8000b40 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003614:	e00a      	b.n	800362c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003616:	f7fd fa93 	bl	8000b40 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f241 3288 	movw	r2, #5000	; 0x1388
 8003624:	4293      	cmp	r3, r2
 8003626:	d901      	bls.n	800362c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e035      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	f7ff fa71 	bl	8002b12 <LL_RCC_GetSysClkSource>
 8003630:	4602      	mov	r2, r0
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	429a      	cmp	r2, r3
 800363a:	d1ec      	bne.n	8003616 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d21b      	bcs.n	8003682 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 0207 	bic.w	r2, r3, #7
 8003652:	4913      	ldr	r1, [pc, #76]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365a:	f7fd fa71 	bl	8000b40 <HAL_GetTick>
 800365e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003660:	e008      	b.n	8003674 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003662:	f7fd fa6d 	bl	8000b40 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e011      	b.n	8003698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x23c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d1ef      	bne.n	8003662 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003682:	f000 f8b3 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003686:	4603      	mov	r3, r0
 8003688:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <HAL_RCC_ClockConfig+0x240>)
 800368a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_ClockConfig+0x244>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fa4b 	bl	8000b2c <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	58004000 	.word	0x58004000
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000004 	.word	0x20000004

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ba:	f7ff fa2a 	bl	8002b12 <LL_RCC_GetSysClkSource>
 80036be:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c0:	f7ff fafe 	bl	8002cc0 <LL_RCC_PLL_GetMainSource>
 80036c4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d139      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d136      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036d8:	f7ff f9cd 	bl	8002a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d115      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x62>
 80036e2:	f7ff f9c8 	bl	8002a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_GetSysClockFreq+0x4e>
 80036ec:	f7ff f9d3 	bl	8002a96 <LL_RCC_MSI_GetRange>
 80036f0:	4603      	mov	r3, r0
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	e005      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x5a>
 80036fa:	f7ff f9d7 	bl	8002aac <LL_RCC_MSI_GetRangeAfterStandby>
 80036fe:	4603      	mov	r3, r0
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	e014      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x8c>
 800370e:	f7ff f9b2 	bl	8002a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003712:	4603      	mov	r3, r0
 8003714:	2b01      	cmp	r3, #1
 8003716:	d106      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x7a>
 8003718:	f7ff f9bd 	bl	8002a96 <LL_RCC_MSI_GetRange>
 800371c:	4603      	mov	r3, r0
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	e005      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x86>
 8003726:	f7ff f9c1 	bl	8002aac <LL_RCC_MSI_GetRangeAfterStandby>
 800372a:	4603      	mov	r3, r0
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003744:	e012      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d102      	bne.n	8003752 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00c      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d109      	bne.n	800376c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003758:	f7ff f8a0 	bl	800289c <LL_RCC_HSE_IsEnabledDiv2>
 800375c:	4603      	mov	r3, r0
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e001      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003768:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800376a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800376c:	f7ff f9d1 	bl	8002b12 <LL_RCC_GetSysClkSource>
 8003770:	4603      	mov	r3, r0
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d12f      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003776:	f7ff faa3 	bl	8002cc0 <LL_RCC_PLL_GetMainSource>
 800377a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0xde>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <HAL_RCC_GetSysClockFreq+0xe4>
 8003788:	e00d      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800378c:	60fb      	str	r3, [r7, #12]
        break;
 800378e:	e00d      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003790:	f7ff f884 	bl	800289c <LL_RCC_HSE_IsEnabledDiv2>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800379c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800379e:	e005      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037a2:	60fb      	str	r3, [r7, #12]
        break;
 80037a4:	e002      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	60fb      	str	r3, [r7, #12]
        break;
 80037aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037ac:	f7ff fa66 	bl	8002c7c <LL_RCC_PLL_GetN>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	fb03 f402 	mul.w	r4, r3, r2
 80037b8:	f7ff fa77 	bl	8002caa <LL_RCC_PLL_GetDivider>
 80037bc:	4603      	mov	r3, r0
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	3301      	adds	r3, #1
 80037c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80037c6:	f7ff fa65 	bl	8002c94 <LL_RCC_PLL_GetR>
 80037ca:	4603      	mov	r3, r0
 80037cc:	0f5b      	lsrs	r3, r3, #29
 80037ce:	3301      	adds	r3, #1
 80037d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80037d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037d6:	697b      	ldr	r3, [r7, #20]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	0800c3f8 	.word	0x0800c3f8
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	01e84800 	.word	0x01e84800

080037ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b598      	push	{r3, r4, r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037f0:	f7ff ff5c 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 80037f4:	4604      	mov	r4, r0
 80037f6:	f7ff f9e6 	bl	8002bc6 <LL_RCC_GetAHBPrescaler>
 80037fa:	4603      	mov	r3, r0
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	4a03      	ldr	r2, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x24>)
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd98      	pop	{r3, r4, r7, pc}
 8003810:	0800c398 	.word	0x0800c398

08003814 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b598      	push	{r3, r4, r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003818:	f7ff ffe8 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800381c:	4604      	mov	r4, r0
 800381e:	f7ff f9ea 	bl	8002bf6 <LL_RCC_GetAPB1Prescaler>
 8003822:	4603      	mov	r3, r0
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd98      	pop	{r3, r4, r7, pc}
 8003834:	0800c3d8 	.word	0x0800c3d8

08003838 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b598      	push	{r3, r4, r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800383c:	f7ff ffd6 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003840:	4604      	mov	r4, r0
 8003842:	f7ff f9e3 	bl	8002c0c <LL_RCC_GetAPB2Prescaler>
 8003846:	4603      	mov	r3, r0
 8003848:	0adb      	lsrs	r3, r3, #11
 800384a:	4a03      	ldr	r2, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd98      	pop	{r3, r4, r7, pc}
 8003858:	0800c3d8 	.word	0x0800c3d8

0800385c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800386e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003872:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003874:	f7ff f9b2 	bl	8002bdc <LL_RCC_GetAHB3Prescaler>
 8003878:	4603      	mov	r3, r0
 800387a:	091b      	lsrs	r3, r3, #4
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	0c9c      	lsrs	r4, r3, #18
 8003898:	f7fe ff58 	bl	800274c <HAL_PWREx_GetVoltageRange>
 800389c:	4603      	mov	r3, r0
 800389e:	4619      	mov	r1, r3
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 f80b 	bl	80038bc <RCC_SetFlashLatency>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	0800c3f8 	.word	0x0800c3f8
 80038b4:	0800c398 	.word	0x0800c398
 80038b8:	431bde83 	.word	0x431bde83

080038bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08e      	sub	sp, #56	; 0x38
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038c6:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <RCC_SetFlashLatency+0xf4>)
 80038c8:	f107 0320 	add.w	r3, r7, #32
 80038cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038d0:	6018      	str	r0, [r3, #0]
 80038d2:	3304      	adds	r3, #4
 80038d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <RCC_SetFlashLatency+0xf8>)
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e0:	6018      	str	r0, [r3, #0]
 80038e2:	3304      	adds	r3, #4
 80038e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80038e6:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <RCC_SetFlashLatency+0xfc>)
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038f2:	2300      	movs	r3, #0
 80038f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d11b      	bne.n	8003936 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038fe:	2300      	movs	r3, #0
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
 8003902:	e014      	b.n	800392e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	3338      	adds	r3, #56	; 0x38
 800390a:	443b      	add	r3, r7
 800390c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4293      	cmp	r3, r2
 8003916:	d807      	bhi.n	8003928 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	3338      	adds	r3, #56	; 0x38
 800391e:	443b      	add	r3, r7
 8003920:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003926:	e021      	b.n	800396c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3301      	adds	r3, #1
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	2b02      	cmp	r3, #2
 8003932:	d9e7      	bls.n	8003904 <RCC_SetFlashLatency+0x48>
 8003934:	e01a      	b.n	800396c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003936:	2300      	movs	r3, #0
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393a:	e014      	b.n	8003966 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	3338      	adds	r3, #56	; 0x38
 8003942:	443b      	add	r3, r7
 8003944:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003948:	461a      	mov	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4293      	cmp	r3, r2
 800394e:	d807      	bhi.n	8003960 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	3338      	adds	r3, #56	; 0x38
 8003956:	443b      	add	r3, r7
 8003958:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800395e:	e005      	b.n	800396c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	3301      	adds	r3, #1
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	2b02      	cmp	r3, #2
 800396a:	d9e7      	bls.n	800393c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <RCC_SetFlashLatency+0x100>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	4911      	ldr	r1, [pc, #68]	; (80039bc <RCC_SetFlashLatency+0x100>)
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800397c:	f7fd f8e0 	bl	8000b40 <HAL_GetTick>
 8003980:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003982:	e008      	b.n	8003996 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003984:	f7fd f8dc 	bl	8000b40 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e007      	b.n	80039a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <RCC_SetFlashLatency+0x100>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1ef      	bne.n	8003984 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3738      	adds	r7, #56	; 0x38
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	0800c108 	.word	0x0800c108
 80039b4:	0800c110 	.word	0x0800c110
 80039b8:	0800c118 	.word	0x0800c118
 80039bc:	58004000 	.word	0x58004000

080039c0 <LL_RCC_LSE_IsReady>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d101      	bne.n	80039d8 <LL_RCC_LSE_IsReady+0x18>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_RCC_LSE_IsReady+0x1a>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_SetUSARTClockSource>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	43db      	mvns	r3, r3
 80039f8:	401a      	ands	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_SetI2SClockSource>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <LL_RCC_SetLPUARTClockSource>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <LL_RCC_SetI2CClockSource>:
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_SetLPTIMClockSource>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_SetRNGClockSource>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_SetADCClockSource>:
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_SetRTCClockSource>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_GetRTCClockSource>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <LL_RCC_ForceBackupDomainReset>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003bb8:	2300      	movs	r3, #0
 8003bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d058      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003bc8:	f7fe fd7e 	bl	80026c8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bcc:	f7fc ffb8 	bl	8000b40 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003bd2:	e009      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fc ffb4 	bl	8000b40 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d902      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	74fb      	strb	r3, [r7, #19]
        break;
 8003be6:	e006      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003be8:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003bf6:	7cfb      	ldrb	r3, [r7, #19]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d13c      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003bfc:	f7ff ffa7 	bl	8003b4e <LL_RCC_GetRTCClockSource>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d00f      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c18:	f7ff ffa5 	bl	8003b66 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1c:	f7ff ffb3 	bl	8003b86 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d014      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fc ff84 	bl	8000b40 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fc ff80 	bl	8000b40 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d902      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	74fb      	strb	r3, [r7, #19]
            break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c54:	f7ff feb4 	bl	80039c0 <LL_RCC_LSE_IsReady>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d1ee      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff5b 	bl	8003b24 <LL_RCC_SetRTCClockSource>
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c70:	7cfb      	ldrb	r3, [r7, #19]
 8003c72:	74bb      	strb	r3, [r7, #18]
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fea9 	bl	80039e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fe9e 	bl	80039e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fec0 	bl	8003a3c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fee6 	bl	8003a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fedb 	bl	8003a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fed0 	bl	8003a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fea9 	bl	8003a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fe9e 	bl	8003a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fe93 	bl	8003a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fe5e 	bl	8003a12 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fea5 	bl	8003ad0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fea3 	bl	8003afa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbc:	d107      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dce:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	58000400 	.word	0x58000400

08003ddc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d071      	beq.n	8003ed2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fc fcf8 	bl	80007f8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e10:	4b32      	ldr	r3, [pc, #200]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d051      	beq.n	8003ec0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e1e:	22ca      	movs	r2, #202	; 0xca
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
 8003e22:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e24:	2253      	movs	r2, #83	; 0x53
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fa11 	bl	8004250 <RTC_EnterInitMode>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d13f      	bne.n	8003eb8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a27      	ldr	r2, [pc, #156]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e3e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e46:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4319      	orrs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	491f      	ldr	r1, [pc, #124]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	041b      	lsls	r3, r3, #16
 8003e6c:	491b      	ldr	r1, [pc, #108]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003e72:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	430b      	orrs	r3, r1
 8003e84:	4915      	ldr	r1, [pc, #84]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa14 	bl	80042b8 <RTC_ExitInitMode>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10e      	bne.n	8003eb8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003e9a:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_RTC_Init+0x100>)
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a19      	ldr	r1, [r3, #32]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	4319      	orrs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	490a      	ldr	r1, [pc, #40]	; (8003edc <HAL_RTC_Init+0x100>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_RTC_Init+0x100>)
 8003eba:	22ff      	movs	r2, #255	; 0xff
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ebe:	e001      	b.n	8003ec4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40002800 	.word	0x40002800

08003ee0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003ee0:	b590      	push	{r4, r7, lr}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_RTC_SetAlarm_IT+0x1e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0f3      	b.n	80040e6 <HAL_RTC_SetAlarm_IT+0x206>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003f0e:	4b78      	ldr	r3, [pc, #480]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f16:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1e:	d06a      	beq.n	8003ff6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d13a      	bne.n	8003f9c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f9f5 	bl	8004334 <RTC_ByteToBcd2>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	785b      	ldrb	r3, [r3, #1]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f9ee 	bl	8004334 <RTC_ByteToBcd2>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f5c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	789b      	ldrb	r3, [r3, #2]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f9e6 	bl	8004334 <RTC_ByteToBcd2>
 8003f68:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003f6a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003f74:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f9d8 	bl	8004334 <RTC_ByteToBcd2>
 8003f84:	4603      	mov	r3, r0
 8003f86:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003f88:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003f90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	e02c      	b.n	8003ff6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003fa4:	d00d      	beq.n	8003fc2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fae:	d008      	beq.n	8003fc2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fb0:	4b4f      	ldr	r3, [pc, #316]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fd4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	78db      	ldrb	r3, [r3, #3]
 8003fda:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fdc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fe6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003fec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ff8:	22ca      	movs	r2, #202	; 0xca
 8003ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffc:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ffe:	2253      	movs	r2, #83	; 0x53
 8004000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d12c      	bne.n	8004066 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4a37      	ldr	r2, [pc, #220]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004016:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800401a:	2201      	movs	r2, #1
 800401c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004024:	d107      	bne.n	8004036 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4930      	ldr	r1, [pc, #192]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004030:	4313      	orrs	r3, r2
 8004032:	644b      	str	r3, [r1, #68]	; 0x44
 8004034:	e006      	b.n	8004044 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8004036:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800403c:	4a2c      	ldr	r2, [pc, #176]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800405e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004062:	6193      	str	r3, [r2, #24]
 8004064:	e02b      	b.n	80040be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004066:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800406c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004070:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004072:	4b1f      	ldr	r3, [pc, #124]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004074:	2202      	movs	r2, #2
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407e:	d107      	bne.n	8004090 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	699a      	ldr	r2, [r3, #24]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4919      	ldr	r1, [pc, #100]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800408a:	4313      	orrs	r3, r2
 800408c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800408e:	e006      	b.n	800409e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004090:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f043 0202 	orr.w	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040b2:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80040bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c4:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ce:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d0:	22ff      	movs	r2, #255	; 0xff
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40002800 	.word	0x40002800
 80040f4:	58000800 	.word	0x58000800

080040f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_RTC_DeactivateAlarm+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e048      	b.n	80041a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004120:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004122:	22ca      	movs	r2, #202	; 0xca
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004128:	2253      	movs	r2, #83	; 0x53
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004132:	d115      	bne.n	8004160 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800413a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800413e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800414a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	f023 0201 	bic.w	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800415a:	2201      	movs	r2, #1
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c
 800415e:	e014      	b.n	800418a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004160:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004166:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800416a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004176:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	f023 0202 	bic.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8004186:	2202      	movs	r2, #2
 8004188:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	40002800 	.word	0x40002800

080041b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fc fe58 	bl	8000e8a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80041e6:	2202      	movs	r2, #2
 80041e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f94a 	bl	8004484 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40002800 	.word	0x40002800

08004204 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_RTC_WaitForSynchro+0x48>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a0e      	ldr	r2, [pc, #56]	; (800424c <HAL_RTC_WaitForSynchro+0x48>)
 8004212:	f023 0320 	bic.w	r3, r3, #32
 8004216:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004218:	f7fc fc92 	bl	8000b40 <HAL_GetTick>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800421e:	e009      	b.n	8004234 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004220:	f7fc fc8e 	bl	8000b40 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800422e:	d901      	bls.n	8004234 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e006      	b.n	8004242 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RTC_WaitForSynchro+0x48>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ef      	beq.n	8004220 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40002800 	.word	0x40002800

08004250 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <RTC_EnterInitMode+0x64>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d120      	bne.n	80042aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <RTC_EnterInitMode+0x64>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <RTC_EnterInitMode+0x64>)
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004274:	f7fc fc64 	bl	8000b40 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800427a:	e00d      	b.n	8004298 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800427c:	f7fc fc60 	bl	8000b40 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800428a:	d905      	bls.n	8004298 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2203      	movs	r2, #3
 8004294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <RTC_EnterInitMode+0x64>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <RTC_EnterInitMode+0x5a>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d1e8      	bne.n	800427c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40002800 	.word	0x40002800

080042b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042c4:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <RTC_ExitInitMode+0x78>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <RTC_ExitInitMode+0x78>)
 80042ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80042d0:	4b17      	ldr	r3, [pc, #92]	; (8004330 <RTC_ExitInitMode+0x78>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff91 	bl	8004204 <HAL_RTC_WaitForSynchro>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01e      	beq.n	8004326 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e017      	b.n	8004326 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <RTC_ExitInitMode+0x78>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <RTC_ExitInitMode+0x78>)
 80042fc:	f023 0320 	bic.w	r3, r3, #32
 8004300:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff7e 	bl	8004204 <HAL_RTC_WaitForSynchro>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2203      	movs	r2, #3
 8004312:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <RTC_ExitInitMode+0x78>)
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <RTC_ExitInitMode+0x78>)
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40002800 	.word	0x40002800

08004334 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8004346:	e005      	b.n	8004354 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3301      	adds	r3, #1
 800434c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	3b0a      	subs	r3, #10
 8004352:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8004354:	7afb      	ldrb	r3, [r7, #11]
 8004356:	2b09      	cmp	r3, #9
 8004358:	d8f6      	bhi.n	8004348 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	b2da      	uxtb	r2, r3
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	4313      	orrs	r3, r2
 8004366:	b2db      	uxtb	r3, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
	...

08004374 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_RTCEx_EnableBypassShadow+0x16>
 8004386:	2302      	movs	r3, #2
 8004388:	e01f      	b.n	80043ca <HAL_RTCEx_EnableBypassShadow+0x56>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800439c:	22ca      	movs	r2, #202	; 0xca
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043a2:	2253      	movs	r2, #83	; 0x53
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043ac:	f043 0320 	orr.w	r3, r3, #32
 80043b0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40002800 	.word	0x40002800

080043d8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_RTCEx_SetSSRU_IT+0x16>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e027      	b.n	800443e <HAL_RTCEx_SetSSRU_IT+0x66>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004400:	22ca      	movs	r2, #202	; 0xca
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004406:	2253      	movs	r2, #83	; 0x53
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004414:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8004418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441c:	4a0b      	ldr	r2, [pc, #44]	; (800444c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800441e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004422:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	40002800 	.word	0x40002800
 800444c:	58000800 	.word	0x58000800

08004450 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fd17 	bl	8000e9e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40002800 	.word	0x40002800

08004484 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
	...

08004498 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80044a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4413      	add	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	4000b100 	.word	0x4000b100

080044c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <HAL_RTCEx_BKUPRead+0x28>)
 80044d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	4000b100 	.word	0x4000b100

080044f4 <LL_PWR_SetRadioBusyTrigger>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	58000400 	.word	0x58000400

0800451c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	58000400 	.word	0x58000400

0800453c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	4a04      	ldr	r2, [pc, #16]	; (8004558 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	58000400 	.word	0x58000400

0800455c <LL_PWR_ClearFlag_RFBUSY>:
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004566:	619a      	str	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	58000400 	.word	0x58000400

08004574 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d101      	bne.n	8004588 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	58000400 	.word	0x58000400

08004598 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d101      	bne.n	80045ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	58000400 	.word	0x58000400

080045bc <LL_RCC_RF_DisableReset>:
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045d4:	bf00      	nop
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <LL_RCC_IsRFUnderReset>:
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f0:	d101      	bne.n	80045f6 <LL_RCC_IsRFUnderReset+0x1a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <LL_RCC_IsRFUnderReset+0x1c>
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <LL_EXTI_EnableIT_32_63>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <LL_EXTI_EnableIT_32_63+0x24>)
 800460a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800460e:	4905      	ldr	r1, [pc, #20]	; (8004624 <LL_EXTI_EnableIT_32_63+0x24>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	58000800 	.word	0x58000800

08004628 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
    return status;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	e052      	b.n	80046e4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	799b      	ldrb	r3, [r3, #6]
 8004646:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SUBGHZ_Init+0x2c>
 800464e:	7bbb      	ldrb	r3, [r7, #14]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d109      	bne.n	8004668 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fc f9d4 	bl	8000a08 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004660:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004664:	f7ff ffcc 	bl	8004600 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004668:	7bbb      	ldrb	r3, [r7, #14]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d126      	bne.n	80046bc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004674:	f7ff ffa2 	bl	80045bc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_SUBGHZ_Init+0xc4>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	0cdb      	lsrs	r3, r3, #19
 8004686:	2264      	movs	r2, #100	; 0x64
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d105      	bne.n	80046a0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	609a      	str	r2, [r3, #8]
        break;
 800469e:	e007      	b.n	80046b0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80046a6:	f7ff ff99 	bl	80045dc <LL_RCC_IsRFUnderReset>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ee      	bne.n	800468e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046b0:	f7ff ff34 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80046b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046b8:	f7ff ff1c 	bl	80044f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80046bc:	f7ff ff4e 	bl	800455c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 faac 	bl	8004c28 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	719a      	strb	r2, [r3, #6]

  return status;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000000 	.word	0x20000000

080046f0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	607a      	str	r2, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	460b      	mov	r3, r1
 80046fe:	817b      	strh	r3, [r7, #10]
 8004700:	4613      	mov	r3, r2
 8004702:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	799b      	ldrb	r3, [r3, #6]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d14a      	bne.n	80047a4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	795b      	ldrb	r3, [r3, #5]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004716:	2302      	movs	r3, #2
 8004718:	e045      	b.n	80047a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2202      	movs	r2, #2
 8004724:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fb4c 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800472c:	f7ff ff06 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004730:	210d      	movs	r1, #13
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa98 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004738:	897b      	ldrh	r3, [r7, #10]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	b29b      	uxth	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fa90 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004748:	897b      	ldrh	r3, [r7, #10]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa8a 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	82bb      	strh	r3, [r7, #20]
 8004758:	e00a      	b.n	8004770 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800475a:	8abb      	ldrh	r3, [r7, #20]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fa7f 	bl	8004c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800476a:	8abb      	ldrh	r3, [r7, #20]
 800476c:	3301      	adds	r3, #1
 800476e:	82bb      	strh	r3, [r7, #20]
 8004770:	8aba      	ldrh	r2, [r7, #20]
 8004772:	893b      	ldrh	r3, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3f0      	bcc.n	800475a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004778:	f7ff fed0 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fb45 	bl	8004e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
 800478e:	e001      	b.n	8004794 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	715a      	strb	r2, [r3, #5]

    return status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
 80047a2:	e000      	b.n	80047a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b088      	sub	sp, #32
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	461a      	mov	r2, r3
 80047ba:	460b      	mov	r3, r1
 80047bc:	817b      	strh	r3, [r7, #10]
 80047be:	4613      	mov	r3, r2
 80047c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	799b      	ldrb	r3, [r3, #6]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d14a      	bne.n	8004866 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	795b      	ldrb	r3, [r3, #5]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80047d8:	2302      	movs	r3, #2
 80047da:	e045      	b.n	8004868 <HAL_SUBGHZ_ReadRegisters+0xba>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 faee 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047e8:	f7ff fea8 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80047ec:	211d      	movs	r1, #29
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa3a 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80047f4:	897b      	ldrh	r3, [r7, #10]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4619      	mov	r1, r3
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa32 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fa2c 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004810:	2100      	movs	r1, #0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fa28 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	82fb      	strh	r3, [r7, #22]
 800481c:	e009      	b.n	8004832 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa77 	bl	8004d14 <SUBGHZSPI_Receive>
      pData++;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3301      	adds	r3, #1
 800482a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800482c:	8afb      	ldrh	r3, [r7, #22]
 800482e:	3301      	adds	r3, #1
 8004830:	82fb      	strh	r3, [r7, #22]
 8004832:	8afa      	ldrh	r2, [r7, #22]
 8004834:	893b      	ldrh	r3, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3f1      	bcc.n	800481e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800483a:	f7ff fe6f 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fae4 	bl	8004e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e001      	b.n	8004856 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	715a      	strb	r2, [r3, #5]

    return status;
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	e000      	b.n	8004868 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	72fb      	strb	r3, [r7, #11]
 8004880:	4613      	mov	r3, r2
 8004882:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	799b      	ldrb	r3, [r3, #6]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d14a      	bne.n	8004924 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	795b      	ldrb	r3, [r3, #5]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004896:	2302      	movs	r3, #2
 8004898:	e045      	b.n	8004926 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fa8f 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80048a6:	7afb      	ldrb	r3, [r7, #11]
 80048a8:	2b84      	cmp	r3, #132	; 0x84
 80048aa:	d002      	beq.n	80048b2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80048ac:	7afb      	ldrb	r3, [r7, #11]
 80048ae:	2b94      	cmp	r3, #148	; 0x94
 80048b0:	d103      	bne.n	80048ba <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	711a      	strb	r2, [r3, #4]
 80048b8:	e002      	b.n	80048c0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048c0:	f7ff fe3c 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80048c4:	7afb      	ldrb	r3, [r7, #11]
 80048c6:	4619      	mov	r1, r3
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f9cd 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	82bb      	strh	r3, [r7, #20]
 80048d2:	e00a      	b.n	80048ea <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80048d4:	8abb      	ldrh	r3, [r7, #20]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f9c2 	bl	8004c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048e4:	8abb      	ldrh	r3, [r7, #20]
 80048e6:	3301      	adds	r3, #1
 80048e8:	82bb      	strh	r3, [r7, #20]
 80048ea:	8aba      	ldrh	r2, [r7, #20]
 80048ec:	893b      	ldrh	r3, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3f0      	bcc.n	80048d4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80048f2:	f7ff fe13 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80048f6:	7afb      	ldrb	r3, [r7, #11]
 80048f8:	2b84      	cmp	r3, #132	; 0x84
 80048fa:	d002      	beq.n	8004902 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa85 	bl	8004e0c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
 800490e:	e001      	b.n	8004914 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	715a      	strb	r2, [r3, #5]

    return status;
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	e000      	b.n	8004926 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b088      	sub	sp, #32
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	461a      	mov	r2, r3
 800493a:	460b      	mov	r3, r1
 800493c:	72fb      	strb	r3, [r7, #11]
 800493e:	4613      	mov	r3, r2
 8004940:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	799b      	ldrb	r3, [r3, #6]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d13d      	bne.n	80049cc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	795b      	ldrb	r3, [r3, #5]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004958:	2302      	movs	r3, #2
 800495a:	e038      	b.n	80049ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa2e 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004968:	f7ff fde8 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800496c:	7afb      	ldrb	r3, [r7, #11]
 800496e:	4619      	mov	r1, r3
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f979 	bl	8004c68 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004976:	2100      	movs	r1, #0
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f975 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	82fb      	strh	r3, [r7, #22]
 8004982:	e009      	b.n	8004998 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f9c4 	bl	8004d14 <SUBGHZSPI_Receive>
      pData++;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3301      	adds	r3, #1
 8004990:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004992:	8afb      	ldrh	r3, [r7, #22]
 8004994:	3301      	adds	r3, #1
 8004996:	82fb      	strh	r3, [r7, #22]
 8004998:	8afa      	ldrh	r2, [r7, #22]
 800499a:	893b      	ldrh	r3, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3f1      	bcc.n	8004984 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049a0:	f7ff fdbc 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa31 	bl	8004e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e001      	b.n	80049bc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	715a      	strb	r2, [r3, #5]

    return status;
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	e000      	b.n	80049ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	72fb      	strb	r3, [r7, #11]
 80049e6:	4613      	mov	r3, r2
 80049e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	799b      	ldrb	r3, [r3, #6]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d13e      	bne.n	8004a72 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	795b      	ldrb	r3, [r3, #5]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e039      	b.n	8004a74 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f9dc 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a0c:	f7ff fd96 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004a10:	210e      	movs	r1, #14
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f928 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f923 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	82bb      	strh	r3, [r7, #20]
 8004a26:	e00a      	b.n	8004a3e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004a28:	8abb      	ldrh	r3, [r7, #20]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	4619      	mov	r1, r3
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f918 	bl	8004c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004a38:	8abb      	ldrh	r3, [r7, #20]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	82bb      	strh	r3, [r7, #20]
 8004a3e:	8aba      	ldrh	r2, [r7, #20]
 8004a40:	893b      	ldrh	r3, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3f0      	bcc.n	8004a28 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a46:	f7ff fd69 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f9de 	bl	8004e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
 8004a5c:	e001      	b.n	8004a62 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	715a      	strb	r2, [r3, #5]

    return status;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
 8004a70:	e000      	b.n	8004a74 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	72fb      	strb	r3, [r7, #11]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	799b      	ldrb	r3, [r3, #6]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d141      	bne.n	8004b22 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	795b      	ldrb	r3, [r3, #5]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e03c      	b.n	8004b24 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f987 	bl	8004dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004ab6:	f7ff fd41 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004aba:	211e      	movs	r1, #30
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f8d3 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004ac2:	7afb      	ldrb	r3, [r7, #11]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f8ce 	bl	8004c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004acc:	2100      	movs	r1, #0
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f8ca 	bl	8004c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	82fb      	strh	r3, [r7, #22]
 8004ad8:	e009      	b.n	8004aee <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004ada:	69b9      	ldr	r1, [r7, #24]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f919 	bl	8004d14 <SUBGHZSPI_Receive>
      pData++;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004ae8:	8afb      	ldrh	r3, [r7, #22]
 8004aea:	3301      	adds	r3, #1
 8004aec:	82fb      	strh	r3, [r7, #22]
 8004aee:	8afa      	ldrh	r2, [r7, #22]
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d3f1      	bcc.n	8004ada <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004af6:	f7ff fd11 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f986 	bl	8004e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e001      	b.n	8004b12 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	715a      	strb	r2, [r3, #5]

    return status;
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	e000      	b.n	8004b24 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004b34:	2300      	movs	r3, #0
 8004b36:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004b38:	f107 020c 	add.w	r2, r7, #12
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	2112      	movs	r1, #18
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fef4 	bl	800492e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004b46:	7b3b      	ldrb	r3, [r7, #12]
 8004b48:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004b4a:	89fb      	ldrh	r3, [r7, #14]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	b21a      	sxth	r2, r3
 8004b50:	7b7b      	ldrb	r3, [r7, #13]
 8004b52:	b21b      	sxth	r3, r3
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b21b      	sxth	r3, r3
 8004b58:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004b5a:	f107 020c 	add.w	r2, r7, #12
 8004b5e:	2302      	movs	r3, #2
 8004b60:	2102      	movs	r1, #2
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff fe84 	bl	8004870 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004b68:	89fb      	ldrh	r3, [r7, #14]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f005 fbf6 	bl	800a364 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f005 fbfc 	bl	800a380 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f005 fc4c 	bl	800a430 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004b98:	89fb      	ldrh	r3, [r7, #14]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f005 fc52 	bl	800a44c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f005 fc58 	bl	800a468 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004bb8:	89fb      	ldrh	r3, [r7, #14]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f005 fc26 	bl	800a414 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f005 fbe2 	bl	800a39c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004bec:	2101      	movs	r1, #1
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f005 fbe2 	bl	800a3b8 <HAL_SUBGHZ_CADStatusCallback>
 8004bf4:	e003      	b.n	8004bfe <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f005 fbdd 	bl	800a3b8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f005 fbf3 	bl	800a3f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f005 fc33 	bl	800a484 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c30:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8004c44:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c48:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a04      	ldr	r2, [pc, #16]	; (8004c64 <SUBGHZSPI_Init+0x3c>)
 8004c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c58:	6013      	str	r3, [r2, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	58010000 	.word	0x58010000

08004c68 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004c78:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <SUBGHZSPI_Transmit+0xa0>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	0cdb      	lsrs	r3, r3, #19
 8004c86:	2264      	movs	r2, #100	; 0x64
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	609a      	str	r2, [r3, #8]
      break;
 8004c9e:	e008      	b.n	8004cb2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ca6:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <SUBGHZSPI_Transmit+0xa4>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d1ed      	bne.n	8004c8e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <SUBGHZSPI_Transmit+0xa8>)
 8004cb4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <SUBGHZSPI_Transmit+0xa0>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	0cdb      	lsrs	r3, r3, #19
 8004cca:	2264      	movs	r2, #100	; 0x64
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e008      	b.n	8004cf6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <SUBGHZSPI_Transmit+0xa4>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d1ed      	bne.n	8004cd2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <SUBGHZSPI_Transmit+0xa4>)
 8004cf8:	68db      	ldr	r3, [r3, #12]

  return status;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	58010000 	.word	0x58010000
 8004d10:	5801000c 	.word	0x5801000c

08004d14 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d22:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <SUBGHZSPI_Receive+0xa4>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	0cdb      	lsrs	r3, r3, #19
 8004d30:	2264      	movs	r2, #100	; 0x64
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e008      	b.n	8004d5c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <SUBGHZSPI_Receive+0xa8>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d1ed      	bne.n	8004d38 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <SUBGHZSPI_Receive+0xac>)
 8004d5e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	22ff      	movs	r2, #255	; 0xff
 8004d64:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <SUBGHZSPI_Receive+0xa4>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	0cdb      	lsrs	r3, r3, #19
 8004d74:	2264      	movs	r2, #100	; 0x64
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	609a      	str	r2, [r3, #8]
      break;
 8004d8c:	e008      	b.n	8004da0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <SUBGHZSPI_Receive+0xa8>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d1ed      	bne.n	8004d7c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <SUBGHZSPI_Receive+0xa8>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	701a      	strb	r2, [r3, #0]

  return status;
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	58010000 	.word	0x58010000
 8004dc0:	5801000c 	.word	0x5801000c

08004dc4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	791b      	ldrb	r3, [r3, #4]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d111      	bne.n	8004df8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <SUBGHZ_CheckDeviceReady+0x44>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	4413      	add	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004de4:	f7ff fbaa 	bl	800453c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f9      	bne.n	8004de8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004df4:	f7ff fb92 	bl	800451c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f807 	bl	8004e0c <SUBGHZ_WaitOnBusy>
 8004dfe:	4603      	mov	r3, r0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000000 	.word	0x20000000

08004e0c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <SUBGHZ_WaitOnBusy+0x58>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	2264      	movs	r2, #100	; 0x64
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004e2e:	f7ff fbb3 	bl	8004598 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004e32:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	609a      	str	r2, [r3, #8]
      break;
 8004e44:	e009      	b.n	8004e5a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004e4c:	f7ff fb92 	bl	8004574 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d0e9      	beq.n	8004e2e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000000 	.word	0x20000000

08004e68 <LL_RCC_GetUSARTClockSource>:
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	4313      	orrs	r3, r2
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <LL_RCC_GetLPUARTClockSource>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4013      	ands	r3, r2
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e042      	b.n	8004f42 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc f94a 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fc3b 	bl	8005768 <UART_SetConfig>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e022      	b.n	8004f42 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fea3 	bl	8005c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff29 	bl	8005d92 <UART_CheckIdleState>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d137      	bne.n	8004fd4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_UART_Receive_IT+0x24>
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e030      	b.n	8004fd6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_UART_Receive_IT+0x94>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01f      	beq.n	8004fc4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	623b      	str	r3, [r7, #32]
 8004fb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fff8 	bl	8005fc0 <UART_Start_Receive_IT>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40008000 	.word	0x40008000

08004fe4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d167      	bne.n	80050cc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Transmit_DMA+0x24>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e060      	b.n	80050ce <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2221      	movs	r2, #33	; 0x21
 800502e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d028      	beq.n	800508c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503e:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_UART_Transmit_DMA+0xf4>)
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <HAL_UART_Transmit_DMA+0xf8>)
 8005048:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <HAL_UART_Transmit_DMA+0xfc>)
 8005050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005056:	2200      	movs	r2, #0
 8005058:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	4619      	mov	r1, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3328      	adds	r3, #40	; 0x28
 800506a:	461a      	mov	r2, r3
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	f7fc fde1 	bl	8001c34 <HAL_DMA_Start_IT>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2210      	movs	r2, #16
 800507c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e020      	b.n	80050ce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2240      	movs	r2, #64	; 0x40
 8005092:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3308      	adds	r3, #8
 800509a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	613b      	str	r3, [r7, #16]
   return(result);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	623a      	str	r2, [r7, #32]
 80050b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	69f9      	ldr	r1, [r7, #28]
 80050ba:	6a3a      	ldr	r2, [r7, #32]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e5      	bne.n	8005094 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3728      	adds	r7, #40	; 0x28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	0800634b 	.word	0x0800634b
 80050dc:	080063e5 	.word	0x080063e5
 80050e0:	08006401 	.word	0x08006401

080050e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b0ba      	sub	sp, #232	; 0xe8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800510a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800510e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005112:	4013      	ands	r3, r2
 8005114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11b      	bne.n	8005158 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d015      	beq.n	8005158 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 82e3 	beq.w	8005714 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
      }
      return;
 8005156:	e2dd      	b.n	8005714 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005158:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8123 	beq.w	80053a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005162:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005166:	4b8d      	ldr	r3, [pc, #564]	; (800539c <HAL_UART_IRQHandler+0x2b8>)
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800516e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005172:	4b8b      	ldr	r3, [pc, #556]	; (80053a0 <HAL_UART_IRQHandler+0x2bc>)
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8116 	beq.w	80053a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <HAL_UART_IRQHandler+0xc8>
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2201      	movs	r2, #1
 800519a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <HAL_UART_IRQHandler+0xf8>
 80051b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2202      	movs	r2, #2
 80051ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f043 0204 	orr.w	r2, r3, #4
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d011      	beq.n	800520c <HAL_UART_IRQHandler+0x128>
 80051e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2204      	movs	r2, #4
 80051fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800520c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d017      	beq.n	8005248 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005224:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005228:	4b5c      	ldr	r3, [pc, #368]	; (800539c <HAL_UART_IRQHandler+0x2b8>)
 800522a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f043 0208 	orr.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	2b00      	cmp	r3, #0
 8005252:	d012      	beq.n	800527a <HAL_UART_IRQHandler+0x196>
 8005254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8249 	beq.w	8005718 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d013      	beq.n	80052ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d005      	beq.n	80052de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d054      	beq.n	8005388 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 ffce 	bl	8006280 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d146      	bne.n	8005380 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3308      	adds	r3, #8
 80052f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800531e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800532a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1d9      	bne.n	80052f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005344:	2b00      	cmp	r3, #0
 8005346:	d017      	beq.n	8005378 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534e:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <HAL_UART_IRQHandler+0x2c0>)
 8005350:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005358:	4618      	mov	r0, r3
 800535a:	f7fc fd47 	bl	8001dec <HAL_DMA_Abort_IT>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d019      	beq.n	8005398 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005372:	4610      	mov	r0, r2
 8005374:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005376:	e00f      	b.n	8005398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f9e0 	bl	800573e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537e:	e00b      	b.n	8005398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f9dc 	bl	800573e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005386:	e007      	b.n	8005398 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f9d8 	bl	800573e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005396:	e1bf      	b.n	8005718 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	bf00      	nop
    return;
 800539a:	e1bd      	b.n	8005718 <HAL_UART_IRQHandler+0x634>
 800539c:	10000001 	.word	0x10000001
 80053a0:	04000120 	.word	0x04000120
 80053a4:	08006481 	.word	0x08006481

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 8153 	bne.w	8005658 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 814c 	beq.w	8005658 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8145 	beq.w	8005658 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	f040 80bb 	bne.w	800555c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 818f 	beq.w	800571c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005408:	429a      	cmp	r2, r3
 800540a:	f080 8187 	bcs.w	800571c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005414:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 8087 	bne.w	800553a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1da      	bne.n	800542c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3308      	adds	r3, #8
 800547c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800549a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e1      	bne.n	8005476 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3308      	adds	r3, #8
 80054b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3308      	adds	r3, #8
 80054d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	f023 0310 	bic.w	r3, r3, #16
 800550c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800551a:	65bb      	str	r3, [r7, #88]	; 0x58
 800551c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005520:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e4      	bne.n	80054f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005534:	4618      	mov	r0, r3
 8005536:	f7fc fbfb 	bl	8001d30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800554c:	b29b      	uxth	r3, r3
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	b29b      	uxth	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8fb 	bl	8005750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800555a:	e0df      	b.n	800571c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005568:	b29b      	uxth	r3, r3
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80d1 	beq.w	8005720 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800557e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80cc 	beq.w	8005720 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800559c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055aa:	647b      	str	r3, [r7, #68]	; 0x44
 80055ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e4      	bne.n	8005588 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3308      	adds	r3, #8
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	623b      	str	r3, [r7, #32]
   return(result);
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055e6:	633a      	str	r2, [r7, #48]	; 0x30
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e1      	bne.n	80055be <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	60fb      	str	r3, [r7, #12]
   return(result);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0310 	bic.w	r3, r3, #16
 8005622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	69b9      	ldr	r1, [r7, #24]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	617b      	str	r3, [r7, #20]
   return(result);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e4      	bne.n	800560e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800564a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f87d 	bl	8005750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005656:	e063      	b.n	8005720 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_UART_IRQHandler+0x59e>
 8005664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fc5e 	bl	8006f3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005680:	e051      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d014      	beq.n	80056b8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800568e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800569a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d03a      	beq.n	8005724 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
    }
    return;
 80056b6:	e035      	b.n	8005724 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_UART_IRQHandler+0x5f4>
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 feeb 	bl	80064ac <UART_EndTransmit_IT>
    return;
 80056d6:	e026      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <HAL_UART_IRQHandler+0x614>
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 fc35 	bl	8006f60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056f6:	e016      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d010      	beq.n	8005726 <HAL_UART_IRQHandler+0x642>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005708:	2b00      	cmp	r3, #0
 800570a:	da0c      	bge.n	8005726 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fc1e 	bl	8006f4e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005712:	e008      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
      return;
 8005714:	bf00      	nop
 8005716:	e006      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
    return;
 8005718:	bf00      	nop
 800571a:	e004      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
      return;
 800571c:	bf00      	nop
 800571e:	e002      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
      return;
 8005720:	bf00      	nop
 8005722:	e000      	b.n	8005726 <HAL_UART_IRQHandler+0x642>
    return;
 8005724:	bf00      	nop
  }
}
 8005726:	37e8      	adds	r7, #232	; 0xe8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
	...

08005768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b08c      	sub	sp, #48	; 0x30
 800576e:	af00      	add	r7, sp, #0
 8005770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	431a      	orrs	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	431a      	orrs	r2, r3
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	4313      	orrs	r3, r2
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b94      	ldr	r3, [pc, #592]	; (80059e8 <UART_SetConfig+0x280>)
 8005798:	4013      	ands	r3, r2
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a89      	ldr	r2, [pc, #548]	; (80059ec <UART_SetConfig+0x284>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f023 010f 	bic.w	r1, r3, #15
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7a      	ldr	r2, [pc, #488]	; (80059f0 <UART_SetConfig+0x288>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d127      	bne.n	800585c <UART_SetConfig+0xf4>
 800580c:	2003      	movs	r0, #3
 800580e:	f7ff fb2b 	bl	8004e68 <LL_RCC_GetUSARTClockSource>
 8005812:	4603      	mov	r3, r0
 8005814:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005818:	2b03      	cmp	r3, #3
 800581a:	d81b      	bhi.n	8005854 <UART_SetConfig+0xec>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0xbc>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005835 	.word	0x08005835
 8005828:	08005845 	.word	0x08005845
 800582c:	0800583d 	.word	0x0800583d
 8005830:	0800584d 	.word	0x0800584d
 8005834:	2301      	movs	r3, #1
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e080      	b.n	800593e <UART_SetConfig+0x1d6>
 800583c:	2302      	movs	r3, #2
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e07c      	b.n	800593e <UART_SetConfig+0x1d6>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e078      	b.n	800593e <UART_SetConfig+0x1d6>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e074      	b.n	800593e <UART_SetConfig+0x1d6>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e070      	b.n	800593e <UART_SetConfig+0x1d6>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a64      	ldr	r2, [pc, #400]	; (80059f4 <UART_SetConfig+0x28c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d138      	bne.n	80058d8 <UART_SetConfig+0x170>
 8005866:	200c      	movs	r0, #12
 8005868:	f7ff fafe 	bl	8004e68 <LL_RCC_GetUSARTClockSource>
 800586c:	4603      	mov	r3, r0
 800586e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d82c      	bhi.n	80058d0 <UART_SetConfig+0x168>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x114>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058b1 	.word	0x080058b1
 8005880:	080058d1 	.word	0x080058d1
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058d1 	.word	0x080058d1
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058d1 	.word	0x080058d1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e042      	b.n	800593e <UART_SetConfig+0x1d6>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e03e      	b.n	800593e <UART_SetConfig+0x1d6>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e03a      	b.n	800593e <UART_SetConfig+0x1d6>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e036      	b.n	800593e <UART_SetConfig+0x1d6>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e032      	b.n	800593e <UART_SetConfig+0x1d6>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a43      	ldr	r2, [pc, #268]	; (80059ec <UART_SetConfig+0x284>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d12a      	bne.n	8005938 <UART_SetConfig+0x1d0>
 80058e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80058e6:	f7ff fad1 	bl	8004e8c <LL_RCC_GetLPUARTClockSource>
 80058ea:	4603      	mov	r3, r0
 80058ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f0:	d01a      	beq.n	8005928 <UART_SetConfig+0x1c0>
 80058f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f6:	d81b      	bhi.n	8005930 <UART_SetConfig+0x1c8>
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058fc:	d00c      	beq.n	8005918 <UART_SetConfig+0x1b0>
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d815      	bhi.n	8005930 <UART_SetConfig+0x1c8>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <UART_SetConfig+0x1a8>
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d008      	beq.n	8005920 <UART_SetConfig+0x1b8>
 800590e:	e00f      	b.n	8005930 <UART_SetConfig+0x1c8>
 8005910:	2300      	movs	r3, #0
 8005912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005916:	e012      	b.n	800593e <UART_SetConfig+0x1d6>
 8005918:	2302      	movs	r3, #2
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e00e      	b.n	800593e <UART_SetConfig+0x1d6>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e00a      	b.n	800593e <UART_SetConfig+0x1d6>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e006      	b.n	800593e <UART_SetConfig+0x1d6>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e002      	b.n	800593e <UART_SetConfig+0x1d6>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <UART_SetConfig+0x284>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 80a4 	bne.w	8005a92 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800594a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800594e:	2b08      	cmp	r3, #8
 8005950:	d823      	bhi.n	800599a <UART_SetConfig+0x232>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <UART_SetConfig+0x1f0>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800597d 	.word	0x0800597d
 800595c:	0800599b 	.word	0x0800599b
 8005960:	08005985 	.word	0x08005985
 8005964:	0800599b 	.word	0x0800599b
 8005968:	0800598b 	.word	0x0800598b
 800596c:	0800599b 	.word	0x0800599b
 8005970:	0800599b 	.word	0x0800599b
 8005974:	0800599b 	.word	0x0800599b
 8005978:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fd ff4a 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005982:	e010      	b.n	80059a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <UART_SetConfig+0x290>)
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005988:	e00d      	b.n	80059a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fd fe8f 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800598e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005998:	e005      	b.n	80059a6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8137 	beq.w	8005c1c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <UART_SetConfig+0x294>)
 80059b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d305      	bcc.n	80059de <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d910      	bls.n	8005a00 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059e4:	e11a      	b.n	8005c1c <UART_SetConfig+0x4b4>
 80059e6:	bf00      	nop
 80059e8:	cfff69f3 	.word	0xcfff69f3
 80059ec:	40008000 	.word	0x40008000
 80059f0:	40013800 	.word	0x40013800
 80059f4:	40004400 	.word	0x40004400
 80059f8:	00f42400 	.word	0x00f42400
 80059fc:	0800c488 	.word	0x0800c488
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2200      	movs	r2, #0
 8005a04:	60bb      	str	r3, [r7, #8]
 8005a06:	60fa      	str	r2, [r7, #12]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	4a8e      	ldr	r2, [pc, #568]	; (8005c48 <UART_SetConfig+0x4e0>)
 8005a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2200      	movs	r2, #0
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a22:	f7fa fbb1 	bl	8000188 <__aeabi_uldivmod>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	020b      	lsls	r3, r1, #8
 8005a38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a3c:	0202      	lsls	r2, r0, #8
 8005a3e:	6979      	ldr	r1, [r7, #20]
 8005a40:	6849      	ldr	r1, [r1, #4]
 8005a42:	0849      	lsrs	r1, r1, #1
 8005a44:	2000      	movs	r0, #0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4605      	mov	r5, r0
 8005a4a:	eb12 0804 	adds.w	r8, r2, r4
 8005a4e:	eb43 0905 	adc.w	r9, r3, r5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	469a      	mov	sl, r3
 8005a5a:	4693      	mov	fp, r2
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	465b      	mov	r3, fp
 8005a60:	4640      	mov	r0, r8
 8005a62:	4649      	mov	r1, r9
 8005a64:	f7fa fb90 	bl	8000188 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a76:	d308      	bcc.n	8005a8a <UART_SetConfig+0x322>
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d204      	bcs.n	8005a8a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	e0c8      	b.n	8005c1c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a90:	e0c4      	b.n	8005c1c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9a:	d167      	bne.n	8005b6c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d828      	bhi.n	8005af6 <UART_SetConfig+0x38e>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0x344>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005af7 	.word	0x08005af7
 8005abc:	08005ae7 	.word	0x08005ae7
 8005ac0:	08005af7 	.word	0x08005af7
 8005ac4:	08005af7 	.word	0x08005af7
 8005ac8:	08005af7 	.word	0x08005af7
 8005acc:	08005aef 	.word	0x08005aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7fd fea0 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad6:	e014      	b.n	8005b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7fd feae 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8005adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ade:	e010      	b.n	8005b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <UART_SetConfig+0x4e4>)
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae4:	e00d      	b.n	8005b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae6:	f7fd fde1 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aec:	e009      	b.n	8005b02 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af4:	e005      	b.n	8005b02 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8089 	beq.w	8005c1c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	4a4e      	ldr	r2, [pc, #312]	; (8005c48 <UART_SetConfig+0x4e0>)
 8005b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b14:	461a      	mov	r2, r3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b1c:	005a      	lsls	r2, r3, #1
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	441a      	add	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	2b0f      	cmp	r3, #15
 8005b34:	d916      	bls.n	8005b64 <UART_SetConfig+0x3fc>
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d212      	bcs.n	8005b64 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f023 030f 	bic.w	r3, r3, #15
 8005b46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	8bfb      	ldrh	r3, [r7, #30]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	8bfa      	ldrh	r2, [r7, #30]
 8005b60:	60da      	str	r2, [r3, #12]
 8005b62:	e05b      	b.n	8005c1c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b6a:	e057      	b.n	8005c1c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d828      	bhi.n	8005bc6 <UART_SetConfig+0x45e>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x414>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	08005bc7 	.word	0x08005bc7
 8005b8c:	08005bb7 	.word	0x08005bb7
 8005b90:	08005bc7 	.word	0x08005bc7
 8005b94:	08005bc7 	.word	0x08005bc7
 8005b98:	08005bc7 	.word	0x08005bc7
 8005b9c:	08005bbf 	.word	0x08005bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fd fe38 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8005ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba6:	e014      	b.n	8005bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba8:	f7fd fe46 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 8005bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bae:	e010      	b.n	8005bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb0:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <UART_SetConfig+0x4e4>)
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bb4:	e00d      	b.n	8005bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb6:	f7fd fd79 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bbc:	e009      	b.n	8005bd2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bc4:	e005      	b.n	8005bd2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d021      	beq.n	8005c1c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	4a1a      	ldr	r2, [pc, #104]	; (8005c48 <UART_SetConfig+0x4e0>)
 8005bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be2:	461a      	mov	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	441a      	add	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b0f      	cmp	r3, #15
 8005c00:	d909      	bls.n	8005c16 <UART_SetConfig+0x4ae>
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c08:	d205      	bcs.n	8005c16 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e002      	b.n	8005c1c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3730      	adds	r7, #48	; 0x30
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c46:	bf00      	nop
 8005c48:	0800c488 	.word	0x0800c488
 8005c4c:	00f42400 	.word	0x00f42400

08005c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01a      	beq.n	8005d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4e:	d10a      	bne.n	8005d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
  }
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af02      	add	r7, sp, #8
 8005d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da2:	f7fa fecd 	bl	8000b40 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d10e      	bne.n	8005dd4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f832 	bl	8005e2e <UART_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e028      	b.n	8005e26 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d10e      	bne.n	8005e00 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f81c 	bl	8005e2e <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e012      	b.n	8005e26 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b09c      	sub	sp, #112	; 0x70
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3e:	e0a9      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	f000 80a5 	beq.w	8005f94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4a:	f7fa fe79 	bl	8000b40 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d302      	bcc.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d140      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e74:	667b      	str	r3, [r7, #100]	; 0x64
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005eb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e069      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d051      	beq.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efe:	d149      	bne.n	8005f94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e6      	bne.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f5c:	623a      	str	r2, [r7, #32]
 8005f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	6a3a      	ldr	r2, [r7, #32]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e010      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f43f af46 	beq.w	8005e40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3770      	adds	r7, #112	; 0x70
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b0a3      	sub	sp, #140	; 0x8c
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d10e      	bne.n	8006012 <UART_Start_Receive_IT+0x52>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <UART_Start_Receive_IT+0x48>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006006:	e02d      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006010:	e028      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10d      	bne.n	8006036 <UART_Start_Receive_IT+0x76>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <UART_Start_Receive_IT+0x6c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800602a:	e01b      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	227f      	movs	r2, #127	; 0x7f
 8006030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006034:	e016      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800603e:	d10d      	bne.n	800605c <UART_Start_Receive_IT+0x9c>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <UART_Start_Receive_IT+0x92>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	227f      	movs	r2, #127	; 0x7f
 800604c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006050:	e008      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	223f      	movs	r2, #63	; 0x3f
 8006056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800605a:	e003      	b.n	8006064 <UART_Start_Receive_IT+0xa4>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2222      	movs	r2, #34	; 0x22
 8006070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006098:	673a      	str	r2, [r7, #112]	; 0x70
 800609a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800609e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80060a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e3      	bne.n	8006074 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b4:	d14f      	bne.n	8006156 <UART_Start_Receive_IT+0x196>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d349      	bcc.n	8006156 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ca:	d107      	bne.n	80060dc <UART_Start_Receive_IT+0x11c>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4a46      	ldr	r2, [pc, #280]	; (80061f0 <UART_Start_Receive_IT+0x230>)
 80060d8:	675a      	str	r2, [r3, #116]	; 0x74
 80060da:	e002      	b.n	80060e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a45      	ldr	r2, [pc, #276]	; (80061f4 <UART_Start_Receive_IT+0x234>)
 80060e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800610c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800610e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006112:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e4      	bne.n	80060ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006136:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006140:	64ba      	str	r2, [r7, #72]	; 0x48
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <UART_Start_Receive_IT+0x160>
 8006154:	e046      	b.n	80061e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d107      	bne.n	8006170 <UART_Start_Receive_IT+0x1b0>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <UART_Start_Receive_IT+0x238>)
 800616c:	675a      	str	r2, [r3, #116]	; 0x74
 800616e:	e002      	b.n	8006176 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <UART_Start_Receive_IT+0x23c>)
 8006174:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d019      	beq.n	80061b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006192:	677b      	str	r3, [r7, #116]	; 0x74
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e6      	bne.n	800617e <UART_Start_Receive_IT+0x1be>
 80061b0:	e018      	b.n	80061e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	e853 3f00 	ldrex	r3, [r3]
 80061be:	613b      	str	r3, [r7, #16]
   return(result);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f043 0320 	orr.w	r3, r3, #32
 80061c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	69f9      	ldr	r1, [r7, #28]
 80061d6:	6a3a      	ldr	r2, [r7, #32]
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e6      	bne.n	80061b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	378c      	adds	r7, #140	; 0x8c
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr
 80061f0:	08006bd5 	.word	0x08006bd5
 80061f4:	08006875 	.word	0x08006875
 80061f8:	080066bd 	.word	0x080066bd
 80061fc:	08006505 	.word	0x08006505

08006200 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b08f      	sub	sp, #60	; 0x3c
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	61fb      	str	r3, [r7, #28]
   return(result);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006228:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800622c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e6      	bne.n	8006208 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	60bb      	str	r3, [r7, #8]
   return(result);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	3308      	adds	r3, #8
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	61ba      	str	r2, [r7, #24]
 800625c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	6979      	ldr	r1, [r7, #20]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	613b      	str	r3, [r7, #16]
   return(result);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e5      	bne.n	800623a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006276:	bf00      	nop
 8006278:	373c      	adds	r7, #60	; 0x3c
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr

08006280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b095      	sub	sp, #84	; 0x54
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800629c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	643b      	str	r3, [r7, #64]	; 0x40
 80062a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e6      	bne.n	8006288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3308      	adds	r3, #8
 80062c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e3      	bne.n	80062ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d118      	bne.n	800632c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60bb      	str	r3, [r7, #8]
   return(result);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	613b      	str	r3, [r7, #16]
   return(result);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e6      	bne.n	80062fa <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006340:	bf00      	nop
 8006342:	3754      	adds	r7, #84	; 0x54
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b090      	sub	sp, #64	; 0x40
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	d137      	bne.n	80063d6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006368:	2200      	movs	r2, #0
 800636a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800636e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	623b      	str	r3, [r7, #32]
   return(result);
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800638e:	633a      	str	r2, [r7, #48]	; 0x30
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
 80063b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	69b9      	ldr	r1, [r7, #24]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	617b      	str	r3, [r7, #20]
   return(result);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e6      	bne.n	80063a2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063d4:	e002      	b.n	80063dc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063d8:	f7fb f830 	bl	800143c <HAL_UART_TxCpltCallback>
}
 80063dc:	bf00      	nop
 80063de:	3740      	adds	r7, #64	; 0x40
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff f99a 	bl	800572c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d109      	bne.n	8006440 <UART_DMAError+0x40>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b21      	cmp	r3, #33	; 0x21
 8006430:	d106      	bne.n	8006440 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800643a:	6978      	ldr	r0, [r7, #20]
 800643c:	f7ff fee0 	bl	8006200 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d109      	bne.n	8006462 <UART_DMAError+0x62>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2b22      	cmp	r3, #34	; 0x22
 8006452:	d106      	bne.n	8006462 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800645c:	6978      	ldr	r0, [r7, #20]
 800645e:	f7ff ff0f 	bl	8006280 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f7ff f963 	bl	800573e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006478:	bf00      	nop
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff f94d 	bl	800573e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	e853 3f00 	ldrex	r3, [r3]
 80064c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6979      	ldr	r1, [r7, #20]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e6      	bne.n	80064b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fa ffa1 	bl	800143c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b09c      	sub	sp, #112	; 0x70
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006512:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651c:	2b22      	cmp	r3, #34	; 0x22
 800651e:	f040 80be 	bne.w	800669e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800652c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006530:	b2d9      	uxtb	r1, r3
 8006532:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006536:	b2da      	uxtb	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	400a      	ands	r2, r1
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006552:	b29b      	uxth	r3, r3
 8006554:	3b01      	subs	r3, #1
 8006556:	b29a      	uxth	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	f040 80a1 	bne.w	80066ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800657a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006580:	66bb      	str	r3, [r7, #104]	; 0x68
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800658a:	65bb      	str	r3, [r7, #88]	; 0x58
 800658c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e6      	bne.n	800656c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	667b      	str	r3, [r7, #100]	; 0x64
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065be:	647a      	str	r2, [r7, #68]	; 0x44
 80065c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a33      	ldr	r2, [pc, #204]	; (80066b8 <UART_RxISR_8BIT+0x1b4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01f      	beq.n	8006630 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	e853 3f00 	ldrex	r3, [r3]
 800660a:	623b      	str	r3, [r7, #32]
   return(result);
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006612:	663b      	str	r3, [r7, #96]	; 0x60
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
 800661e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e6      	bne.n	80065fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d12e      	bne.n	8006696 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	60fb      	str	r3, [r7, #12]
   return(result);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0310 	bic.w	r3, r3, #16
 8006652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e6      	bne.n	800663e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b10      	cmp	r3, #16
 800667c:	d103      	bne.n	8006686 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2210      	movs	r2, #16
 8006684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff f85e 	bl	8005750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006694:	e00b      	b.n	80066ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fa fee6 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 800669c:	e007      	b.n	80066ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0208 	orr.w	r2, r2, #8
 80066ac:	619a      	str	r2, [r3, #24]
}
 80066ae:	bf00      	nop
 80066b0:	3770      	adds	r7, #112	; 0x70
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40008000 	.word	0x40008000

080066bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b09c      	sub	sp, #112	; 0x70
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d4:	2b22      	cmp	r3, #34	; 0x22
 80066d6:	f040 80be 	bne.w	8006856 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80066ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80066ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80066f2:	4013      	ands	r3, r2
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fe:	1c9a      	adds	r2, r3, #2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 80a1 	bne.w	8006866 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006738:	667b      	str	r3, [r7, #100]	; 0x64
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006742:	657b      	str	r3, [r7, #84]	; 0x54
 8006744:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e6      	bne.n	8006724 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	663b      	str	r3, [r7, #96]	; 0x60
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006776:	643a      	str	r2, [r7, #64]	; 0x40
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800677c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e5      	bne.n	8006756 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a33      	ldr	r2, [pc, #204]	; (8006870 <UART_RxISR_16BIT+0x1b4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01f      	beq.n	80067e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d12e      	bne.n	800684e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	60bb      	str	r3, [r7, #8]
   return(result);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	65bb      	str	r3, [r7, #88]	; 0x58
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6979      	ldr	r1, [r7, #20]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	613b      	str	r3, [r7, #16]
   return(result);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e6      	bne.n	80067f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d103      	bne.n	800683e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2210      	movs	r2, #16
 800683c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe ff82 	bl	8005750 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800684c:	e00b      	b.n	8006866 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fa fe0a 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 8006854:	e007      	b.n	8006866 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0208 	orr.w	r2, r2, #8
 8006864:	619a      	str	r2, [r3, #24]
}
 8006866:	bf00      	nop
 8006868:	3770      	adds	r7, #112	; 0x70
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40008000 	.word	0x40008000

08006874 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0ac      	sub	sp, #176	; 0xb0
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006882:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068aa:	2b22      	cmp	r3, #34	; 0x22
 80068ac:	f040 8182 	bne.w	8006bb4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068b6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068ba:	e125      	b.n	8006b08 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80068ca:	b2d9      	uxtb	r1, r3
 80068cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	400a      	ands	r2, r1
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d053      	beq.n	80069b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800690e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <UART_RxISR_8BIT_FIFOEN+0xca>
 800691a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800691e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00b      	beq.n	800693e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2201      	movs	r2, #1
 800692c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006934:	f043 0201 	orr.w	r2, r3, #1
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d011      	beq.n	800696e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800694a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2202      	movs	r2, #2
 800695c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f043 0204 	orr.w	r2, r3, #4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800696e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800697a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2204      	movs	r2, #4
 800698c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006994:	f043 0202 	orr.w	r2, r3, #2
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe fec8 	bl	800573e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 80a2 	bne.w	8006b08 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80069d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069e8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80069ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80069f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e4      	bne.n	80069c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a10:	f023 0301 	bic.w	r3, r3, #1
 8006a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a22:	66ba      	str	r2, [r7, #104]	; 0x68
 8006a24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e1      	bne.n	80069fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a5f      	ldr	r2, [pc, #380]	; (8006bcc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d021      	beq.n	8006a98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01a      	beq.n	8006a98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a84:	657b      	str	r3, [r7, #84]	; 0x54
 8006a86:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e4      	bne.n	8006a62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d130      	bne.n	8006b02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e4      	bne.n	8006aa6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d103      	bne.n	8006af2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7fe fe28 	bl	8005750 <HAL_UARTEx_RxEventCallback>
 8006b00:	e002      	b.n	8006b08 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fa fcb0 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d006      	beq.n	8006b1e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f47f aecf 	bne.w	80068bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d049      	beq.n	8006bc4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d242      	bcs.n	8006bc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e3      	bne.n	8006b3e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006b7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f043 0320 	orr.w	r3, r3, #32
 8006b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6979      	ldr	r1, [r7, #20]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	613b      	str	r3, [r7, #16]
   return(result);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e4      	bne.n	8006b7c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bb2:	e007      	b.n	8006bc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0208 	orr.w	r2, r2, #8
 8006bc2:	619a      	str	r2, [r3, #24]
}
 8006bc4:	bf00      	nop
 8006bc6:	37b0      	adds	r7, #176	; 0xb0
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40008000 	.word	0x40008000
 8006bd0:	08006505 	.word	0x08006505

08006bd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b0ae      	sub	sp, #184	; 0xb8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006be2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0a:	2b22      	cmp	r3, #34	; 0x22
 8006c0c:	f040 8186 	bne.w	8006f1c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c16:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c1a:	e129      	b.n	8006e70 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006c32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006c36:	4013      	ands	r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c44:	1c9a      	adds	r2, r3, #2
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d053      	beq.n	8006d1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00b      	beq.n	8006cd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc8:	f043 0204 	orr.w	r2, r3, #4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d011      	beq.n	8006d02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	f043 0202 	orr.w	r2, r3, #2
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fe fd16 	bl	800573e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 80a4 	bne.w	8006e70 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d4e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e2      	bne.n	8006d28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3308      	adds	r3, #8
 8006d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e1      	bne.n	8006d62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a5f      	ldr	r2, [pc, #380]	; (8006f34 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d021      	beq.n	8006e00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01a      	beq.n	8006e00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e4      	bne.n	8006dca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d130      	bne.n	8006e6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	f023 0310 	bic.w	r3, r3, #16
 8006e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e30:	647b      	str	r3, [r7, #68]	; 0x44
 8006e32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e4      	bne.n	8006e0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d103      	bne.n	8006e5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2210      	movs	r2, #16
 8006e58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe fc74 	bl	8005750 <HAL_UARTEx_RxEventCallback>
 8006e68:	e002      	b.n	8006e70 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fa fafc 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e70:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006e78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f aecb 	bne.w	8006c1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e8c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006e90:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d049      	beq.n	8006f2c <UART_RxISR_16BIT_FIFOEN+0x358>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e9e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d242      	bcs.n	8006f2c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006eca:	633a      	str	r2, [r7, #48]	; 0x30
 8006ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e3      	bne.n	8006ea6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006ee2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f043 0320 	orr.w	r3, r3, #32
 8006ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	69fa      	ldr	r2, [r7, #28]
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	617b      	str	r3, [r7, #20]
   return(result);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e4      	bne.n	8006ee4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f1a:	e007      	b.n	8006f2c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0208 	orr.w	r2, r2, #8
 8006f2a:	619a      	str	r2, [r3, #24]
}
 8006f2c:	bf00      	nop
 8006f2e:	37b8      	adds	r7, #184	; 0xb8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40008000 	.word	0x40008000
 8006f38:	080066bd 	.word	0x080066bd

08006f3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b088      	sub	sp, #32
 8006f76:	af02      	add	r7, sp, #8
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	1d3b      	adds	r3, r7, #4
 8006f7c:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e046      	b.n	8007020 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2224      	movs	r2, #36	; 0x24
 8006f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006fcc:	1d3b      	adds	r3, r7, #4
 8006fce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f911 	bl	80071fa <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fe8:	f7f9 fdaa 	bl	8000b40 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7fe ff16 	bl	8005e2e <UART_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	75fb      	strb	r3, [r7, #23]
 800700c:	e003      	b.n	8007016 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_UARTEx_EnableStopMode+0x16>
 800703a:	2302      	movs	r3, #2
 800703c:	e021      	b.n	8007082 <HAL_UARTEx_EnableStopMode+0x5a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e6      	bne.n	8007046 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3724      	adds	r7, #36	; 0x24
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_UARTEx_EnableFifoMode+0x16>
 800709e:	2302      	movs	r3, #2
 80070a0:	e02b      	b.n	80070fa <HAL_UARTEx_EnableFifoMode+0x6e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2224      	movs	r2, #36	; 0x24
 80070ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80070d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8ac 	bl	8007240 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007116:	2302      	movs	r3, #2
 8007118:	e02d      	b.n	8007176 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2224      	movs	r2, #36	; 0x24
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f872 	bl	8007240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007192:	2302      	movs	r3, #2
 8007194:	e02d      	b.n	80071f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f834 	bl	8007240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f023 0210 	bic.w	r2, r3, #16
 8007212:	893b      	ldrh	r3, [r7, #8]
 8007214:	4619      	mov	r1, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8007228:	7abb      	ldrb	r3, [r7, #10]
 800722a:	061a      	lsls	r2, r3, #24
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	605a      	str	r2, [r3, #4]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
	...

08007240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724c:	2b00      	cmp	r3, #0
 800724e:	d108      	bne.n	8007262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007260:	e031      	b.n	80072c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007262:	2308      	movs	r3, #8
 8007264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007266:	2308      	movs	r3, #8
 8007268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	0e5b      	lsrs	r3, r3, #25
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	0f5b      	lsrs	r3, r3, #29
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	7b3a      	ldrb	r2, [r7, #12]
 800728e:	4910      	ldr	r1, [pc, #64]	; (80072d0 <UARTEx_SetNbDataToProcess+0x90>)
 8007290:	5c8a      	ldrb	r2, [r1, r2]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007296:	7b3a      	ldrb	r2, [r7, #12]
 8007298:	490e      	ldr	r1, [pc, #56]	; (80072d4 <UARTEx_SetNbDataToProcess+0x94>)
 800729a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800729c:	fb93 f3f2 	sdiv	r3, r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	7b7a      	ldrb	r2, [r7, #13]
 80072ac:	4908      	ldr	r1, [pc, #32]	; (80072d0 <UARTEx_SetNbDataToProcess+0x90>)
 80072ae:	5c8a      	ldrb	r2, [r1, r2]
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072b4:	7b7a      	ldrb	r2, [r7, #13]
 80072b6:	4907      	ldr	r1, [pc, #28]	; (80072d4 <UARTEx_SetNbDataToProcess+0x94>)
 80072b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	0800c4a0 	.word	0x0800c4a0
 80072d4:	0800c4a8 	.word	0x0800c4a8

080072d8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af02      	add	r7, sp, #8
 80072de:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80072e0:	4a24      	ldr	r2, [pc, #144]	; (8007374 <RadioInit+0x9c>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80072e6:	4b24      	ldr	r3, [pc, #144]	; (8007378 <RadioInit+0xa0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80072ec:	4b22      	ldr	r3, [pc, #136]	; (8007378 <RadioInit+0xa0>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <RadioInit+0xa0>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80072f8:	4b1f      	ldr	r3, [pc, #124]	; (8007378 <RadioInit+0xa0>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80072fe:	481f      	ldr	r0, [pc, #124]	; (800737c <RadioInit+0xa4>)
 8007300:	f001 ffc2 	bl	8009288 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <RadioInit+0xa0>)
 8007306:	2200      	movs	r2, #0
 8007308:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <RadioInit+0xa0>)
 800730c:	2200      	movs	r2, #0
 800730e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007310:	f002 fa56 	bl	80097c0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007314:	2100      	movs	r1, #0
 8007316:	2000      	movs	r0, #0
 8007318:	f002 fe22 	bl	8009f60 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800731c:	2204      	movs	r2, #4
 800731e:	2100      	movs	r1, #0
 8007320:	2001      	movs	r0, #1
 8007322:	f002 fbdf 	bl	8009ae4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800732e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007332:	f002 fb0f 	bl	8009954 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007336:	f000 fe99 	bl	800806c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <RadioInit+0xa8>)
 8007340:	2200      	movs	r2, #0
 8007342:	f04f 31ff 	mov.w	r1, #4294967295
 8007346:	480f      	ldr	r0, [pc, #60]	; (8007384 <RadioInit+0xac>)
 8007348:	f004 f97e 	bl	800b648 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800734c:	2300      	movs	r3, #0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <RadioInit+0xb0>)
 8007352:	2200      	movs	r2, #0
 8007354:	f04f 31ff 	mov.w	r1, #4294967295
 8007358:	480c      	ldr	r0, [pc, #48]	; (800738c <RadioInit+0xb4>)
 800735a:	f004 f975 	bl	800b648 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800735e:	4809      	ldr	r0, [pc, #36]	; (8007384 <RadioInit+0xac>)
 8007360:	f004 fa16 	bl	800b790 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007364:	4809      	ldr	r0, [pc, #36]	; (800738c <RadioInit+0xb4>)
 8007366:	f004 fa13 	bl	800b790 <UTIL_TIMER_Stop>
}
 800736a:	bf00      	nop
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000284 	.word	0x20000284
 8007378:	20000288 	.word	0x20000288
 800737c:	08008465 	.word	0x08008465
 8007380:	080083ed 	.word	0x080083ed
 8007384:	200002e4 	.word	0x200002e4
 8007388:	08008401 	.word	0x08008401
 800738c:	200002fc 	.word	0x200002fc

08007390 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007394:	f001 ffc0 	bl	8009318 <SUBGRF_GetOperatingMode>
 8007398:	4603      	mov	r3, r0
 800739a:	2b07      	cmp	r3, #7
 800739c:	d00a      	beq.n	80073b4 <RadioGetStatus+0x24>
 800739e:	2b07      	cmp	r3, #7
 80073a0:	dc0a      	bgt.n	80073b8 <RadioGetStatus+0x28>
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d002      	beq.n	80073ac <RadioGetStatus+0x1c>
 80073a6:	2b05      	cmp	r3, #5
 80073a8:	d002      	beq.n	80073b0 <RadioGetStatus+0x20>
 80073aa:	e005      	b.n	80073b8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80073ac:	2302      	movs	r3, #2
 80073ae:	e004      	b.n	80073ba <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e002      	b.n	80073ba <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e000      	b.n	80073ba <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80073b8:	2300      	movs	r3, #0
    }
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80073ca:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <RadioSetModem+0xb4>)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f003 f997 	bl	800a706 <RFW_SetRadioModem>
    switch( modem )
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d80e      	bhi.n	80073fc <RadioSetModem+0x3c>
 80073de:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <RadioSetModem+0x24>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	0800740b 	.word	0x0800740b
 80073e8:	08007419 	.word	0x08007419
 80073ec:	080073fd 	.word	0x080073fd
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	0800745b 	.word	0x0800745b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80073fc:	2003      	movs	r0, #3
 80073fe:	f002 fb4b 	bl	8009a98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007402:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <RadioSetModem+0xb4>)
 8007404:	2200      	movs	r2, #0
 8007406:	735a      	strb	r2, [r3, #13]
        break;
 8007408:	e02f      	b.n	800746a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800740a:	2000      	movs	r0, #0
 800740c:	f002 fb44 	bl	8009a98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007410:	4b18      	ldr	r3, [pc, #96]	; (8007474 <RadioSetModem+0xb4>)
 8007412:	2200      	movs	r2, #0
 8007414:	735a      	strb	r2, [r3, #13]
        break;
 8007416:	e028      	b.n	800746a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8007418:	2001      	movs	r0, #1
 800741a:	f002 fb3d 	bl	8009a98 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <RadioSetModem+0xb4>)
 8007420:	7b5a      	ldrb	r2, [r3, #13]
 8007422:	4b14      	ldr	r3, [pc, #80]	; (8007474 <RadioSetModem+0xb4>)
 8007424:	7b1b      	ldrb	r3, [r3, #12]
 8007426:	429a      	cmp	r2, r3
 8007428:	d01e      	beq.n	8007468 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <RadioSetModem+0xb4>)
 800742c:	7b1a      	ldrb	r2, [r3, #12]
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <RadioSetModem+0xb4>)
 8007430:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <RadioSetModem+0xb4>)
 8007434:	7b5b      	ldrb	r3, [r3, #13]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 ffa2 	bl	8008380 <RadioSetPublicNetwork>
        }
        break;
 800743c:	e014      	b.n	8007468 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800743e:	2002      	movs	r0, #2
 8007440:	f002 fb2a 	bl	8009a98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007444:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <RadioSetModem+0xb4>)
 8007446:	2200      	movs	r2, #0
 8007448:	735a      	strb	r2, [r3, #13]
        break;
 800744a:	e00e      	b.n	800746a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800744c:	2002      	movs	r0, #2
 800744e:	f002 fb23 	bl	8009a98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <RadioSetModem+0xb4>)
 8007454:	2200      	movs	r2, #0
 8007456:	735a      	strb	r2, [r3, #13]
        break;
 8007458:	e007      	b.n	800746a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800745a:	2000      	movs	r0, #0
 800745c:	f002 fb1c 	bl	8009a98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <RadioSetModem+0xb4>)
 8007462:	2200      	movs	r2, #0
 8007464:	735a      	strb	r2, [r3, #13]
        break;
 8007466:	e000      	b.n	800746a <RadioSetModem+0xaa>
        break;
 8007468:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000288 	.word	0x20000288

08007478 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 fac3 	bl	8009a0c <SUBGRF_SetRfFrequency>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b090      	sub	sp, #64	; 0x40
 8007492:	af0a      	add	r7, sp, #40	; 0x28
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800749e:	2301      	movs	r3, #1
 80074a0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80074aa:	f000 fdf2 	bl	8008092 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80074ae:	2000      	movs	r0, #0
 80074b0:	f7ff ff86 	bl	80073c0 <RadioSetModem>

    RadioSetChannel( freq );
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff ffdf 	bl	8007478 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80074ba:	2301      	movs	r3, #1
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	2300      	movs	r3, #0
 80074c0:	9308      	str	r3, [sp, #32]
 80074c2:	2300      	movs	r3, #0
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	2300      	movs	r3, #0
 80074c8:	9306      	str	r3, [sp, #24]
 80074ca:	2300      	movs	r3, #0
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	2300      	movs	r3, #0
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	2300      	movs	r3, #0
 80074d4:	9303      	str	r3, [sp, #12]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9302      	str	r3, [sp, #8]
 80074da:	2303      	movs	r3, #3
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	2000      	movs	r0, #0
 80074ec:	f000 f83c 	bl	8007568 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80074f0:	2000      	movs	r0, #0
 80074f2:	f000 fdd5 	bl	80080a0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80074f6:	f000 ff71 	bl	80083dc <RadioGetWakeupTime>
 80074fa:	4603      	mov	r3, r0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7f9 fb33 	bl	8000b68 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8007502:	f004 fa5f 	bl	800b9c4 <UTIL_TIMER_GetCurrentTime>
 8007506:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007508:	e00d      	b.n	8007526 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800750a:	2000      	movs	r0, #0
 800750c:	f000 feb6 	bl	800827c <RadioRssi>
 8007510:	4603      	mov	r3, r0
 8007512:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8007514:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800751c:	429a      	cmp	r2, r3
 800751e:	dd02      	ble.n	8007526 <RadioIsChannelFree+0x98>
        {
            status = false;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]
            break;
 8007524:	e006      	b.n	8007534 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007526:	6938      	ldr	r0, [r7, #16]
 8007528:	f004 fa5e 	bl	800b9e8 <UTIL_TIMER_GetElapsedTime>
 800752c:	4602      	mov	r2, r0
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	4293      	cmp	r3, r2
 8007532:	d8ea      	bhi.n	800750a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8007534:	f000 fdad 	bl	8008092 <RadioStandby>

    return status;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800754c:	2300      	movs	r3, #0
 800754e:	2200      	movs	r2, #0
 8007550:	2100      	movs	r1, #0
 8007552:	2000      	movs	r0, #0
 8007554:	f002 f9fe 	bl	8009954 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8007558:	f001 ffaf 	bl	80094ba <SUBGRF_GetRandom>
 800755c:	6078      	str	r0, [r7, #4]

    return rnd;
 800755e:	687b      	ldr	r3, [r7, #4]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	461a      	mov	r2, r3
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	4613      	mov	r3, r2
 800757a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800757c:	4ab9      	ldr	r2, [pc, #740]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800757e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007582:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8007584:	f003 f87d 	bl	800a682 <RFW_DeInit>
    if( rxContinuous == true )
 8007588:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007594:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800759c:	4ab2      	ldr	r2, [pc, #712]	; (8007868 <RadioSetRxConfig+0x300>)
 800759e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80075a2:	7013      	strb	r3, [r2, #0]
 80075a4:	e002      	b.n	80075ac <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80075a6:	4bb0      	ldr	r3, [pc, #704]	; (8007868 <RadioSetRxConfig+0x300>)
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b05      	cmp	r3, #5
 80075b0:	d009      	beq.n	80075c6 <RadioSetRxConfig+0x5e>
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	f300 81d7 	bgt.w	8007966 <RadioSetRxConfig+0x3fe>
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80bf 	beq.w	800773c <RadioSetRxConfig+0x1d4>
 80075be:	2b01      	cmp	r3, #1
 80075c0:	f000 8124 	beq.w	800780c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80075c4:	e1cf      	b.n	8007966 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80075c6:	2001      	movs	r0, #1
 80075c8:	f002 f8bc 	bl	8009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80075cc:	4ba5      	ldr	r3, [pc, #660]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80075d4:	4aa3      	ldr	r2, [pc, #652]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80075da:	4ba2      	ldr	r3, [pc, #648]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075dc:	2209      	movs	r2, #9
 80075de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80075e2:	4ba0      	ldr	r3, [pc, #640]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80075ea:	68b8      	ldr	r0, [r7, #8]
 80075ec:	f002 ff7c 	bl	800a4e8 <SUBGRF_GetFskBandwidthRegValue>
 80075f0:	4603      	mov	r3, r0
 80075f2:	461a      	mov	r2, r3
 80075f4:	4b9b      	ldr	r3, [pc, #620]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80075fa:	4b9a      	ldr	r3, [pc, #616]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007600:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	b29a      	uxth	r2, r3
 8007606:	4b97      	ldr	r3, [pc, #604]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007608:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800760a:	4b96      	ldr	r3, [pc, #600]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800760c:	2200      	movs	r2, #0
 800760e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007610:	4b94      	ldr	r3, [pc, #592]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007612:	2210      	movs	r2, #16
 8007614:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007616:	4b93      	ldr	r3, [pc, #588]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007618:	2200      	movs	r2, #0
 800761a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800761c:	4b91      	ldr	r3, [pc, #580]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800761e:	2200      	movs	r2, #0
 8007620:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8007622:	4b91      	ldr	r3, [pc, #580]	; (8007868 <RadioSetRxConfig+0x300>)
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	4b8f      	ldr	r3, [pc, #572]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007628:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800762a:	4b8e      	ldr	r3, [pc, #568]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800762c:	2201      	movs	r2, #1
 800762e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007630:	4b8c      	ldr	r3, [pc, #560]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007632:	2200      	movs	r2, #0
 8007634:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007636:	2005      	movs	r0, #5
 8007638:	f7ff fec2 	bl	80073c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800763c:	488b      	ldr	r0, [pc, #556]	; (800786c <RadioSetRxConfig+0x304>)
 800763e:	f002 fb1f 	bl	8009c80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007642:	488b      	ldr	r0, [pc, #556]	; (8007870 <RadioSetRxConfig+0x308>)
 8007644:	f002 fbee 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007648:	4a8a      	ldr	r2, [pc, #552]	; (8007874 <RadioSetRxConfig+0x30c>)
 800764a:	f107 031c 	add.w	r3, r7, #28
 800764e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007652:	e883 0003 	stmia.w	r3, {r0, r1}
 8007656:	f107 031c 	add.w	r3, r7, #28
 800765a:	4618      	mov	r0, r3
 800765c:	f001 feab 	bl	80093b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007660:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007664:	f001 fef6 	bl	8009454 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007668:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800766c:	f000 fe25 	bl	80082ba <RadioRead>
 8007670:	4603      	mov	r3, r0
 8007672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8007676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800767a:	f023 0310 	bic.w	r3, r3, #16
 800767e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8007682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007686:	4619      	mov	r1, r3
 8007688:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800768c:	f000 fe03 	bl	8008296 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8007690:	2104      	movs	r1, #4
 8007692:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007696:	f000 fdfe 	bl	8008296 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800769a:	f640 009b 	movw	r0, #2203	; 0x89b
 800769e:	f000 fe0c 	bl	80082ba <RadioRead>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80076a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ac:	f023 031c 	bic.w	r3, r3, #28
 80076b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80076b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b8:	f043 0308 	orr.w	r3, r3, #8
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4619      	mov	r1, r3
 80076c0:	f640 009b 	movw	r0, #2203	; 0x89b
 80076c4:	f000 fde7 	bl	8008296 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80076c8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80076cc:	f000 fdf5 	bl	80082ba <RadioRead>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80076d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076da:	f023 0318 	bic.w	r3, r3, #24
 80076de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80076e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e6:	f043 0318 	orr.w	r3, r3, #24
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	4619      	mov	r1, r3
 80076ee:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80076f2:	f000 fdd0 	bl	8008296 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80076f6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80076fa:	f000 fdde 	bl	80082ba <RadioRead>
 80076fe:	4603      	mov	r3, r0
 8007700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8007710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007714:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8007718:	b2db      	uxtb	r3, r3
 800771a:	4619      	mov	r1, r3
 800771c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007720:	f000 fdb9 	bl	8008296 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007724:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007726:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	fbb2 f3f3 	udiv	r3, r2, r3
 8007736:	4a4b      	ldr	r2, [pc, #300]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007738:	6093      	str	r3, [r2, #8]
            break;
 800773a:	e115      	b.n	8007968 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800773c:	2000      	movs	r0, #0
 800773e:	f002 f801 	bl	8009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007742:	4b48      	ldr	r3, [pc, #288]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800774a:	4a46      	ldr	r2, [pc, #280]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007750:	4b44      	ldr	r3, [pc, #272]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007752:	220b      	movs	r2, #11
 8007754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007758:	68b8      	ldr	r0, [r7, #8]
 800775a:	f002 fec5 	bl	800a4e8 <SUBGRF_GetFskBandwidthRegValue>
 800775e:	4603      	mov	r3, r0
 8007760:	461a      	mov	r2, r3
 8007762:	4b40      	ldr	r3, [pc, #256]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007768:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800776a:	2200      	movs	r2, #0
 800776c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800776e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	b29a      	uxth	r2, r3
 8007774:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007776:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007778:	4b3a      	ldr	r3, [pc, #232]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800777a:	2204      	movs	r2, #4
 800777c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800777e:	4b39      	ldr	r3, [pc, #228]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007780:	2218      	movs	r2, #24
 8007782:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007784:	4b37      	ldr	r3, [pc, #220]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007786:	2200      	movs	r2, #0
 8007788:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800778a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800778e:	f083 0301 	eor.w	r3, r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	4b33      	ldr	r3, [pc, #204]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007798:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800779a:	4b33      	ldr	r3, [pc, #204]	; (8007868 <RadioSetRxConfig+0x300>)
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80077a0:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80077a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80077aa:	4b2e      	ldr	r3, [pc, #184]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80077ac:	22f2      	movs	r2, #242	; 0xf2
 80077ae:	75da      	strb	r2, [r3, #23]
 80077b0:	e002      	b.n	80077b8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80077b2:	4b2c      	ldr	r3, [pc, #176]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80077b8:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <RadioSetRxConfig+0x2fc>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80077be:	f000 fc68 	bl	8008092 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7ff fdfc 	bl	80073c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80077c8:	4828      	ldr	r0, [pc, #160]	; (800786c <RadioSetRxConfig+0x304>)
 80077ca:	f002 fa59 	bl	8009c80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80077ce:	4828      	ldr	r0, [pc, #160]	; (8007870 <RadioSetRxConfig+0x308>)
 80077d0:	f002 fb28 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80077d4:	4a28      	ldr	r2, [pc, #160]	; (8007878 <RadioSetRxConfig+0x310>)
 80077d6:	f107 0314 	add.w	r3, r7, #20
 80077da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80077de:	e883 0003 	stmia.w	r3, {r0, r1}
 80077e2:	f107 0314 	add.w	r3, r7, #20
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 fde5 	bl	80093b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80077ec:	f240 10ff 	movw	r0, #511	; 0x1ff
 80077f0:	f001 fe30 	bl	8009454 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80077f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	fbb2 f3f3 	udiv	r3, r2, r3
 8007806:	4a17      	ldr	r2, [pc, #92]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007808:	6093      	str	r3, [r2, #8]
            break;
 800780a:	e0ad      	b.n	8007968 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800780c:	2000      	movs	r0, #0
 800780e:	f001 ff99 	bl	8009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <RadioSetRxConfig+0x314>)
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4413      	add	r3, r2
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800782e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <RadioSetRxConfig+0x2fc>)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d105      	bne.n	800784c <RadioSetRxConfig+0x2e4>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b0b      	cmp	r3, #11
 8007844:	d008      	beq.n	8007858 <RadioSetRxConfig+0x2f0>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b0c      	cmp	r3, #12
 800784a:	d005      	beq.n	8007858 <RadioSetRxConfig+0x2f0>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d116      	bne.n	8007880 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d113      	bne.n	8007880 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <RadioSetRxConfig+0x2fc>)
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007860:	e012      	b.n	8007888 <RadioSetRxConfig+0x320>
 8007862:	bf00      	nop
 8007864:	20000288 	.word	0x20000288
 8007868:	20000008 	.word	0x20000008
 800786c:	200002c0 	.word	0x200002c0
 8007870:	20000296 	.word	0x20000296
 8007874:	0800c124 	.word	0x0800c124
 8007878:	0800c12c 	.word	0x0800c12c
 800787c:	0800c53c 	.word	0x0800c53c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007880:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <RadioSetRxConfig+0x408>)
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007888:	4b39      	ldr	r3, [pc, #228]	; (8007970 <RadioSetRxConfig+0x408>)
 800788a:	2201      	movs	r2, #1
 800788c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800788e:	4b38      	ldr	r3, [pc, #224]	; (8007970 <RadioSetRxConfig+0x408>)
 8007890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007894:	2b05      	cmp	r3, #5
 8007896:	d004      	beq.n	80078a2 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007898:	4b35      	ldr	r3, [pc, #212]	; (8007970 <RadioSetRxConfig+0x408>)
 800789a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800789e:	2b06      	cmp	r3, #6
 80078a0:	d10a      	bne.n	80078b8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80078a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	d803      	bhi.n	80078b0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80078a8:	4b31      	ldr	r3, [pc, #196]	; (8007970 <RadioSetRxConfig+0x408>)
 80078aa:	220c      	movs	r2, #12
 80078ac:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80078ae:	e006      	b.n	80078be <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078b0:	4a2f      	ldr	r2, [pc, #188]	; (8007970 <RadioSetRxConfig+0x408>)
 80078b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078b4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80078b6:	e002      	b.n	80078be <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80078b8:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <RadioSetRxConfig+0x408>)
 80078ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80078bc:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80078be:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80078c2:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <RadioSetRxConfig+0x408>)
 80078c4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <RadioSetRxConfig+0x40c>)
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	4b29      	ldr	r3, [pc, #164]	; (8007970 <RadioSetRxConfig+0x408>)
 80078cc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80078ce:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80078d2:	4b27      	ldr	r3, [pc, #156]	; (8007970 <RadioSetRxConfig+0x408>)
 80078d4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80078d8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80078dc:	4b24      	ldr	r3, [pc, #144]	; (8007970 <RadioSetRxConfig+0x408>)
 80078de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80078e2:	f000 fbd6 	bl	8008092 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80078e6:	2001      	movs	r0, #1
 80078e8:	f7ff fd6a 	bl	80073c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078ec:	4822      	ldr	r0, [pc, #136]	; (8007978 <RadioSetRxConfig+0x410>)
 80078ee:	f002 f9c7 	bl	8009c80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078f2:	4822      	ldr	r0, [pc, #136]	; (800797c <RadioSetRxConfig+0x414>)
 80078f4:	f002 fa96 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80078f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 ff30 	bl	8009762 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8007902:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8007906:	f002 fbe9 	bl	800a0dc <SUBGRF_ReadRegister>
 800790a:	4603      	mov	r3, r0
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8007918:	f002 fbcc 	bl	800a0b4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800791c:	4b14      	ldr	r3, [pc, #80]	; (8007970 <RadioSetRxConfig+0x408>)
 800791e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007922:	2b01      	cmp	r3, #1
 8007924:	d10d      	bne.n	8007942 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007926:	f240 7036 	movw	r0, #1846	; 0x736
 800792a:	f002 fbd7 	bl	800a0dc <SUBGRF_ReadRegister>
 800792e:	4603      	mov	r3, r0
 8007930:	f023 0304 	bic.w	r3, r3, #4
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4619      	mov	r1, r3
 8007938:	f240 7036 	movw	r0, #1846	; 0x736
 800793c:	f002 fbba 	bl	800a0b4 <SUBGRF_WriteRegister>
 8007940:	e00c      	b.n	800795c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007942:	f240 7036 	movw	r0, #1846	; 0x736
 8007946:	f002 fbc9 	bl	800a0dc <SUBGRF_ReadRegister>
 800794a:	4603      	mov	r3, r0
 800794c:	f043 0304 	orr.w	r3, r3, #4
 8007950:	b2db      	uxtb	r3, r3
 8007952:	4619      	mov	r1, r3
 8007954:	f240 7036 	movw	r0, #1846	; 0x736
 8007958:	f002 fbac 	bl	800a0b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <RadioSetRxConfig+0x408>)
 800795e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007962:	609a      	str	r2, [r3, #8]
            break;
 8007964:	e000      	b.n	8007968 <RadioSetRxConfig+0x400>
            break;
 8007966:	bf00      	nop
    }
}
 8007968:	bf00      	nop
 800796a:	3728      	adds	r7, #40	; 0x28
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000288 	.word	0x20000288
 8007974:	20000008 	.word	0x20000008
 8007978:	200002c0 	.word	0x200002c0
 800797c:	20000296 	.word	0x20000296

08007980 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60ba      	str	r2, [r7, #8]
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
 800798e:	460b      	mov	r3, r1
 8007990:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8007992:	f002 fe76 	bl	800a682 <RFW_DeInit>
    switch( modem )
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b04      	cmp	r3, #4
 800799a:	f000 80c7 	beq.w	8007b2c <RadioSetTxConfig+0x1ac>
 800799e:	2b04      	cmp	r3, #4
 80079a0:	f300 80d6 	bgt.w	8007b50 <RadioSetTxConfig+0x1d0>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <RadioSetTxConfig+0x2e>
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d059      	beq.n	8007a60 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80079ac:	e0d0      	b.n	8007b50 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80079ae:	4b77      	ldr	r3, [pc, #476]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80079b6:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80079bc:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079be:	220b      	movs	r2, #11
 80079c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f002 fd8f 	bl	800a4e8 <SUBGRF_GetFskBandwidthRegValue>
 80079ca:	4603      	mov	r3, r0
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b6f      	ldr	r3, [pc, #444]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80079d4:	4a6d      	ldr	r2, [pc, #436]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80079da:	4b6c      	ldr	r3, [pc, #432]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80079e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	4b69      	ldr	r3, [pc, #420]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80079ea:	4b68      	ldr	r3, [pc, #416]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079ec:	2204      	movs	r2, #4
 80079ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80079f0:	4b66      	ldr	r3, [pc, #408]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079f2:	2218      	movs	r2, #24
 80079f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80079f6:	4b65      	ldr	r3, [pc, #404]	; (8007b8c <RadioSetTxConfig+0x20c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80079fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a00:	f083 0301 	eor.w	r3, r3, #1
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	4b60      	ldr	r3, [pc, #384]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a0a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8007a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007a14:	4b5d      	ldr	r3, [pc, #372]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a16:	22f2      	movs	r2, #242	; 0xf2
 8007a18:	75da      	strb	r2, [r3, #23]
 8007a1a:	e002      	b.n	8007a22 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007a1c:	4b5b      	ldr	r3, [pc, #364]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8007a22:	4b5a      	ldr	r3, [pc, #360]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007a28:	f000 fb33 	bl	8008092 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7ff fcc7 	bl	80073c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a32:	4857      	ldr	r0, [pc, #348]	; (8007b90 <RadioSetTxConfig+0x210>)
 8007a34:	f002 f924 	bl	8009c80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a38:	4856      	ldr	r0, [pc, #344]	; (8007b94 <RadioSetTxConfig+0x214>)
 8007a3a:	f002 f9f3 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007a3e:	4a56      	ldr	r2, [pc, #344]	; (8007b98 <RadioSetTxConfig+0x218>)
 8007a40:	f107 0310 	add.w	r3, r7, #16
 8007a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a48:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a4c:	f107 0310 	add.w	r3, r7, #16
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 fcb0 	bl	80093b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a5a:	f001 fcfb 	bl	8009454 <SUBGRF_SetWhiteningSeed>
            break;
 8007a5e:	e078      	b.n	8007b52 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007a60:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	4b47      	ldr	r3, [pc, #284]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8007a72:	4a4a      	ldr	r2, [pc, #296]	; (8007b9c <RadioSetTxConfig+0x21c>)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4413      	add	r3, r2
 8007a78:	781a      	ldrb	r2, [r3, #0]
 8007a7a:	4b44      	ldr	r3, [pc, #272]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8007a80:	4a42      	ldr	r2, [pc, #264]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007a82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a86:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <RadioSetTxConfig+0x11c>
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	2b0b      	cmp	r3, #11
 8007a94:	d008      	beq.n	8007aa8 <RadioSetTxConfig+0x128>
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	2b0c      	cmp	r3, #12
 8007a9a:	d005      	beq.n	8007aa8 <RadioSetTxConfig+0x128>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d107      	bne.n	8007ab2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d104      	bne.n	8007ab2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007aa8:	4b38      	ldr	r3, [pc, #224]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007ab0:	e003      	b.n	8007aba <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007ab2:	4b36      	ldr	r3, [pc, #216]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007aba:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007ac0:	4b32      	ldr	r3, [pc, #200]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d004      	beq.n	8007ad4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007acc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007ad0:	2b06      	cmp	r3, #6
 8007ad2:	d10a      	bne.n	8007aea <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8007ad4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ad6:	2b0b      	cmp	r3, #11
 8007ad8:	d803      	bhi.n	8007ae2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007ada:	4b2c      	ldr	r3, [pc, #176]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007adc:	220c      	movs	r2, #12
 8007ade:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007ae0:	e006      	b.n	8007af0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007ae2:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007ae4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ae6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007ae8:	e002      	b.n	8007af0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007aea:	4a28      	ldr	r2, [pc, #160]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007aec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007aee:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007af0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8007af4:	4b25      	ldr	r3, [pc, #148]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007af6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007af8:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <RadioSetTxConfig+0x220>)
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	4b23      	ldr	r3, [pc, #140]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007afe:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007b00:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007b04:	4b21      	ldr	r3, [pc, #132]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b06:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8007b0a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007b0e:	4b1f      	ldr	r3, [pc, #124]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007b14:	f000 fabd 	bl	8008092 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8007b18:	2001      	movs	r0, #1
 8007b1a:	f7ff fc51 	bl	80073c0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b1e:	481c      	ldr	r0, [pc, #112]	; (8007b90 <RadioSetTxConfig+0x210>)
 8007b20:	f002 f8ae 	bl	8009c80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b24:	481b      	ldr	r0, [pc, #108]	; (8007b94 <RadioSetTxConfig+0x214>)
 8007b26:	f002 f97d 	bl	8009e24 <SUBGRF_SetPacketParams>
            break;
 8007b2a:	e012      	b.n	8007b52 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8007b2c:	2004      	movs	r0, #4
 8007b2e:	f7ff fc47 	bl	80073c0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8007b3a:	4a14      	ldr	r2, [pc, #80]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007b40:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b42:	2216      	movs	r2, #22
 8007b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b48:	4811      	ldr	r0, [pc, #68]	; (8007b90 <RadioSetTxConfig+0x210>)
 8007b4a:	f002 f899 	bl	8009c80 <SUBGRF_SetModulationParams>
            break;
 8007b4e:	e000      	b.n	8007b52 <RadioSetTxConfig+0x1d2>
            break;
 8007b50:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f002 fbc8 	bl	800a2ec <SUBGRF_SetRfTxPower>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b62:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007b66:	210e      	movs	r1, #14
 8007b68:	f640 101f 	movw	r0, #2335	; 0x91f
 8007b6c:	f002 faa2 	bl	800a0b4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b72:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007b76:	4618      	mov	r0, r3
 8007b78:	f002 fd97 	bl	800a6aa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007b7c:	4a03      	ldr	r2, [pc, #12]	; (8007b8c <RadioSetTxConfig+0x20c>)
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b80:	6053      	str	r3, [r2, #4]
}
 8007b82:	bf00      	nop
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000288 	.word	0x20000288
 8007b90:	200002c0 	.word	0x200002c0
 8007b94:	20000296 	.word	0x20000296
 8007b98:	0800c12c 	.word	0x0800c12c
 8007b9c:	0800c53c 	.word	0x0800c53c
 8007ba0:	20000008 	.word	0x20000008

08007ba4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
    return true;
 8007bac:	2301      	movs	r3, #1
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	2b0a      	cmp	r3, #10
 8007bca:	d83e      	bhi.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <RadioGetLoRaBandwidthInHz+0x1c>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007c01 	.word	0x08007c01
 8007bd8:	08007c11 	.word	0x08007c11
 8007bdc:	08007c21 	.word	0x08007c21
 8007be0:	08007c31 	.word	0x08007c31
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c3f 	.word	0x08007c3f
 8007bec:	08007c45 	.word	0x08007c45
 8007bf0:	08007c4b 	.word	0x08007c4b
 8007bf4:	08007c09 	.word	0x08007c09
 8007bf8:	08007c19 	.word	0x08007c19
 8007bfc:	08007c29 	.word	0x08007c29
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8007c00:	f641 6384 	movw	r3, #7812	; 0x1e84
 8007c04:	60fb      	str	r3, [r7, #12]
        break;
 8007c06:	e020      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8007c08:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8007c0c:	60fb      	str	r3, [r7, #12]
        break;
 8007c0e:	e01c      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8007c10:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007c14:	60fb      	str	r3, [r7, #12]
        break;
 8007c16:	e018      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8007c18:	f245 1361 	movw	r3, #20833	; 0x5161
 8007c1c:	60fb      	str	r3, [r7, #12]
        break;
 8007c1e:	e014      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8007c20:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007c24:	60fb      	str	r3, [r7, #12]
        break;
 8007c26:	e010      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8007c28:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8007c2c:	60fb      	str	r3, [r7, #12]
        break;
 8007c2e:	e00c      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8007c30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007c34:	60fb      	str	r3, [r7, #12]
        break;
 8007c36:	e008      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8007c38:	4b07      	ldr	r3, [pc, #28]	; (8007c58 <RadioGetLoRaBandwidthInHz+0xa0>)
 8007c3a:	60fb      	str	r3, [r7, #12]
        break;
 8007c3c:	e005      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <RadioGetLoRaBandwidthInHz+0xa4>)
 8007c40:	60fb      	str	r3, [r7, #12]
        break;
 8007c42:	e002      	b.n	8007c4a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <RadioGetLoRaBandwidthInHz+0xa8>)
 8007c46:	60fb      	str	r3, [r7, #12]
        break;
 8007c48:	bf00      	nop
    }

    return bandwidthInHz;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	0001e848 	.word	0x0001e848
 8007c5c:	0003d090 	.word	0x0003d090
 8007c60:	0007a120 	.word	0x0007a120

08007c64 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	4611      	mov	r1, r2
 8007c70:	461a      	mov	r2, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	70fb      	strb	r3, [r7, #3]
 8007c76:	460b      	mov	r3, r1
 8007c78:	803b      	strh	r3, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8007c7e:	883b      	ldrh	r3, [r7, #0]
 8007c80:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c82:	78ba      	ldrb	r2, [r7, #2]
 8007c84:	f082 0201 	eor.w	r2, r2, #1
 8007c88:	b2d2      	uxtb	r2, r2
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d001      	beq.n	8007c92 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8007c8e:	2208      	movs	r2, #8
 8007c90:	e000      	b.n	8007c94 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007c92:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007c94:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007c96:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8007c9a:	7c3b      	ldrb	r3, [r7, #16]
 8007c9c:	7d39      	ldrb	r1, [r7, #20]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d001      	beq.n	8007ca6 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	e000      	b.n	8007ca8 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	440b      	add	r3, r1
 8007caa:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007cac:	4413      	add	r3, r2
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b08b      	sub	sp, #44	; 0x2c
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	71fb      	strb	r3, [r7, #7]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d002      	beq.n	8007ce6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b06      	cmp	r3, #6
 8007ce4:	d104      	bne.n	8007cf0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007ce6:	88bb      	ldrh	r3, [r7, #4]
 8007ce8:	2b0b      	cmp	r3, #11
 8007cea:	d801      	bhi.n	8007cf0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8007cec:	230c      	movs	r3, #12
 8007cee:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d105      	bne.n	8007d02 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b0b      	cmp	r3, #11
 8007cfa:	d008      	beq.n	8007d0e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b0c      	cmp	r3, #12
 8007d00:	d005      	beq.n	8007d0e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d105      	bne.n	8007d14 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b0c      	cmp	r3, #12
 8007d0c:	d102      	bne.n	8007d14 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007d14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007d18:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8007d1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d1e:	2a00      	cmp	r2, #0
 8007d20:	d001      	beq.n	8007d26 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8007d22:	2210      	movs	r2, #16
 8007d24:	e000      	b.n	8007d28 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8007d26:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007d28:	4413      	add	r3, r2
 8007d2a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8007d30:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8007d32:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	d001      	beq.n	8007d3e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	e000      	b.n	8007d40 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8007d3e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8007d40:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8007d42:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b06      	cmp	r3, #6
 8007d48:	d803      	bhi.n	8007d52 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	623b      	str	r3, [r7, #32]
 8007d50:	e00e      	b.n	8007d70 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	3308      	adds	r3, #8
 8007d56:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d004      	beq.n	8007d6a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3b02      	subs	r3, #2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	623b      	str	r3, [r7, #32]
 8007d68:	e002      	b.n	8007d70 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da01      	bge.n	8007d7a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	4413      	add	r3, r2
 8007d80:	1e5a      	subs	r2, r3, #1
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	fb03 f202 	mul.w	r2, r3, r2
 8007d8e:	88bb      	ldrh	r3, [r7, #4]
 8007d90:	4413      	add	r3, r2
    int32_t intermediate =
 8007d92:	330c      	adds	r3, #12
 8007d94:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	d802      	bhi.n	8007da2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	3302      	adds	r3, #2
 8007da0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3b02      	subs	r3, #2
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	372c      	adds	r7, #44	; 0x2c
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr
	...

08007dbc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af04      	add	r7, sp, #16
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <RadioTimeOnAir+0x28>
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d017      	beq.n	8007e12 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007de2:	e035      	b.n	8007e50 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007de4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007de8:	8c3a      	ldrh	r2, [r7, #32]
 8007dea:	7bb9      	ldrb	r1, [r7, #14]
 8007dec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4603      	mov	r3, r0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff ff32 	bl	8007c64 <RadioGetGfskTimeOnAirNumerator>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	613b      	str	r3, [r7, #16]
        break;
 8007e10:	e01e      	b.n	8007e50 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8007e12:	8c39      	ldrh	r1, [r7, #32]
 8007e14:	7bba      	ldrb	r2, [r7, #14]
 8007e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	68b8      	ldr	r0, [r7, #8]
 8007e2e:	f7ff ff43 	bl	8007cb8 <RadioGetLoRaTimeOnAirNumerator>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <RadioTimeOnAir+0xac>)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4413      	add	r3, r2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff feb6 	bl	8007bb8 <RadioGetLoRaBandwidthInHz>
 8007e4c:	6138      	str	r0, [r7, #16]
        break;
 8007e4e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	0800c53c 	.word	0x0800c53c

08007e6c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f240 2101 	movw	r1, #513	; 0x201
 8007e80:	f240 2001 	movw	r0, #513	; 0x201
 8007e84:	f001 fd66 	bl	8009954 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007e88:	4b73      	ldr	r3, [pc, #460]	; (8008058 <RadioSend+0x1ec>)
 8007e8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4618      	mov	r0, r3
 8007e92:	f002 fa03 	bl	800a29c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8007e96:	4b70      	ldr	r3, [pc, #448]	; (8008058 <RadioSend+0x1ec>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d112      	bne.n	8007ec4 <RadioSend+0x58>
 8007e9e:	4b6e      	ldr	r3, [pc, #440]	; (8008058 <RadioSend+0x1ec>)
 8007ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ea4:	2b06      	cmp	r3, #6
 8007ea6:	d10d      	bne.n	8007ec4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8007ea8:	f640 0089 	movw	r0, #2185	; 0x889
 8007eac:	f002 f916 	bl	800a0dc <SUBGRF_ReadRegister>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f023 0304 	bic.w	r3, r3, #4
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f640 0089 	movw	r0, #2185	; 0x889
 8007ebe:	f002 f8f9 	bl	800a0b4 <SUBGRF_WriteRegister>
 8007ec2:	e00c      	b.n	8007ede <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8007ec4:	f640 0089 	movw	r0, #2185	; 0x889
 8007ec8:	f002 f908 	bl	800a0dc <SUBGRF_ReadRegister>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f043 0304 	orr.w	r3, r3, #4
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f640 0089 	movw	r0, #2185	; 0x889
 8007eda:	f002 f8eb 	bl	800a0b4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8007ede:	4b5e      	ldr	r3, [pc, #376]	; (8008058 <RadioSend+0x1ec>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	f200 80a8 	bhi.w	8008038 <RadioSend+0x1cc>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <RadioSend+0x84>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f1f 	.word	0x08007f1f
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f1f 	.word	0x08007f1f
 8007efc:	08007f81 	.word	0x08007f81
 8007f00:	08007fa1 	.word	0x08007fa1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007f04:	4a54      	ldr	r2, [pc, #336]	; (8008058 <RadioSend+0x1ec>)
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f0a:	4854      	ldr	r0, [pc, #336]	; (800805c <RadioSend+0x1f0>)
 8007f0c:	f001 ff8a 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	2200      	movs	r2, #0
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fa3a 	bl	8009390 <SUBGRF_SendPayload>
            break;
 8007f1c:	e08d      	b.n	800803a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007f1e:	f002 fbb6 	bl	800a68e <RFW_Is_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d11e      	bne.n	8007f66 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007f28:	f107 020d 	add.w	r2, r7, #13
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f002 fbc4 	bl	800a6be <RFW_TransmitInit>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10c      	bne.n	8007f56 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007f3c:	7b7a      	ldrb	r2, [r7, #13]
 8007f3e:	4b46      	ldr	r3, [pc, #280]	; (8008058 <RadioSend+0x1ec>)
 8007f40:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f42:	4846      	ldr	r0, [pc, #280]	; (800805c <RadioSend+0x1f0>)
 8007f44:	f001 ff6e 	bl	8009e24 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8007f48:	7b7b      	ldrb	r3, [r7, #13]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 fa1e 	bl	8009390 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007f54:	e071      	b.n	800803a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8007f56:	4b42      	ldr	r3, [pc, #264]	; (8008060 <RadioSend+0x1f4>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	2002      	movs	r0, #2
 8007f5e:	f003 fe0f 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e073      	b.n	800804e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007f66:	4a3c      	ldr	r2, [pc, #240]	; (8008058 <RadioSend+0x1ec>)
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f6c:	483b      	ldr	r0, [pc, #236]	; (800805c <RadioSend+0x1f0>)
 8007f6e:	f001 ff59 	bl	8009e24 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	2200      	movs	r2, #0
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 fa09 	bl	8009390 <SUBGRF_SendPayload>
            break;
 8007f7e:	e05c      	b.n	800803a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <RadioSend+0x1ec>)
 8007f82:	2202      	movs	r2, #2
 8007f84:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007f86:	4a34      	ldr	r2, [pc, #208]	; (8008058 <RadioSend+0x1ec>)
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f8c:	4833      	ldr	r0, [pc, #204]	; (800805c <RadioSend+0x1f0>)
 8007f8e:	f001 ff49 	bl	8009e24 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	2200      	movs	r2, #0
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f9f9 	bl	8009390 <SUBGRF_SendPayload>
            break;
 8007f9e:	e04c      	b.n	800803a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	482f      	ldr	r0, [pc, #188]	; (8008064 <RadioSend+0x1f8>)
 8007fa8:	f000 fccc 	bl	8008944 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007fac:	4b2a      	ldr	r3, [pc, #168]	; (8008058 <RadioSend+0x1ec>)
 8007fae:	2202      	movs	r2, #2
 8007fb0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	4b27      	ldr	r3, [pc, #156]	; (8008058 <RadioSend+0x1ec>)
 8007fba:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007fbc:	4827      	ldr	r0, [pc, #156]	; (800805c <RadioSend+0x1f0>)
 8007fbe:	f001 ff31 	bl	8009e24 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	20f1      	movs	r0, #241	; 0xf1
 8007fc6:	f000 f966 	bl	8008296 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8007fca:	2100      	movs	r1, #0
 8007fcc:	20f0      	movs	r0, #240	; 0xf0
 8007fce:	f000 f962 	bl	8008296 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007fd2:	4b21      	ldr	r3, [pc, #132]	; (8008058 <RadioSend+0x1ec>)
 8007fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d108      	bne.n	8007fec <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8007fda:	2170      	movs	r1, #112	; 0x70
 8007fdc:	20f3      	movs	r0, #243	; 0xf3
 8007fde:	f000 f95a 	bl	8008296 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8007fe2:	211d      	movs	r1, #29
 8007fe4:	20f2      	movs	r0, #242	; 0xf2
 8007fe6:	f000 f956 	bl	8008296 <RadioWrite>
 8007fea:	e007      	b.n	8007ffc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8007fec:	21e1      	movs	r1, #225	; 0xe1
 8007fee:	20f3      	movs	r0, #243	; 0xf3
 8007ff0:	f000 f951 	bl	8008296 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	20f2      	movs	r0, #242	; 0xf2
 8007ff8:	f000 f94d 	bl	8008296 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	b29b      	uxth	r3, r3
 8008004:	3302      	adds	r3, #2
 8008006:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008008:	89fb      	ldrh	r3, [r7, #14]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	20f4      	movs	r0, #244	; 0xf4
 8008014:	f000 f93f 	bl	8008296 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	20f5      	movs	r0, #245	; 0xf5
 8008020:	f000 f939 	bl	8008296 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	3301      	adds	r3, #1
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800802e:	4619      	mov	r1, r3
 8008030:	480c      	ldr	r0, [pc, #48]	; (8008064 <RadioSend+0x1f8>)
 8008032:	f001 f9ad 	bl	8009390 <SUBGRF_SendPayload>
            break;
 8008036:	e000      	b.n	800803a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008038:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800803a:	4b07      	ldr	r3, [pc, #28]	; (8008058 <RadioSend+0x1ec>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	4619      	mov	r1, r3
 8008040:	4809      	ldr	r0, [pc, #36]	; (8008068 <RadioSend+0x1fc>)
 8008042:	f003 fc15 	bl	800b870 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008046:	4808      	ldr	r0, [pc, #32]	; (8008068 <RadioSend+0x1fc>)
 8008048:	f003 fb34 	bl	800b6b4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000288 	.word	0x20000288
 800805c:	20000296 	.word	0x20000296
 8008060:	0800c134 	.word	0x0800c134
 8008064:	20000184 	.word	0x20000184
 8008068:	200002e4 	.word	0x200002e4

0800806c <RadioSleep>:

static void RadioSleep( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008072:	2300      	movs	r3, #0
 8008074:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008076:	793b      	ldrb	r3, [r7, #4]
 8008078:	f043 0304 	orr.w	r3, r3, #4
 800807c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800807e:	7938      	ldrb	r0, [r7, #4]
 8008080:	f001 fa62 	bl	8009548 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008084:	2002      	movs	r0, #2
 8008086:	f7f8 fd6f 	bl	8000b68 <HAL_Delay>
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <RadioStandby>:

static void RadioStandby( void )
{
 8008092:	b580      	push	{r7, lr}
 8008094:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008096:	2000      	movs	r0, #0
 8008098:	f001 fa88 	bl	80095ac <SUBGRF_SetStandby>
}
 800809c:	bf00      	nop
 800809e:	bd80      	pop	{r7, pc}

080080a0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80080a8:	f002 faf1 	bl	800a68e <RFW_Is_Init>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d102      	bne.n	80080b8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80080b2:	f002 fb14 	bl	800a6de <RFW_ReceiveInit>
 80080b6:	e007      	b.n	80080c8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	f240 2162 	movw	r1, #610	; 0x262
 80080c0:	f240 2062 	movw	r0, #610	; 0x262
 80080c4:	f001 fc46 	bl	8009954 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d006      	beq.n	80080dc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4811      	ldr	r0, [pc, #68]	; (8008118 <RadioRx+0x78>)
 80080d2:	f003 fbcd 	bl	800b870 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80080d6:	4810      	ldr	r0, [pc, #64]	; (8008118 <RadioRx+0x78>)
 80080d8:	f003 faec 	bl	800b6b4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80080dc:	4b0f      	ldr	r3, [pc, #60]	; (800811c <RadioRx+0x7c>)
 80080de:	2200      	movs	r2, #0
 80080e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80080e2:	4b0e      	ldr	r3, [pc, #56]	; (800811c <RadioRx+0x7c>)
 80080e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 f8d6 	bl	800a29c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <RadioRx+0x7c>)
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d004      	beq.n	8008102 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80080f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080fc:	f001 fa92 	bl	8009624 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008100:	e005      	b.n	800810e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <RadioRx+0x7c>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	019b      	lsls	r3, r3, #6
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fa8b 	bl	8009624 <SUBGRF_SetRx>
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200002fc 	.word	0x200002fc
 800811c:	20000288 	.word	0x20000288

08008120 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008128:	f002 fab1 	bl	800a68e <RFW_Is_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d102      	bne.n	8008138 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008132:	f002 fad4 	bl	800a6de <RFW_ReceiveInit>
 8008136:	e007      	b.n	8008148 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	f240 2162 	movw	r1, #610	; 0x262
 8008140:	f240 2062 	movw	r0, #610	; 0x262
 8008144:	f001 fc06 	bl	8009954 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4811      	ldr	r0, [pc, #68]	; (8008198 <RadioRxBoosted+0x78>)
 8008152:	f003 fb8d 	bl	800b870 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008156:	4810      	ldr	r0, [pc, #64]	; (8008198 <RadioRxBoosted+0x78>)
 8008158:	f003 faac 	bl	800b6b4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <RadioRxBoosted+0x7c>)
 800815e:	2200      	movs	r2, #0
 8008160:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008162:	4b0e      	ldr	r3, [pc, #56]	; (800819c <RadioRxBoosted+0x7c>)
 8008164:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f002 f896 	bl	800a29c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <RadioRxBoosted+0x7c>)
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d004      	beq.n	8008182 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008178:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800817c:	f001 fa72 	bl	8009664 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008180:	e005      	b.n	800818e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <RadioRxBoosted+0x7c>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	019b      	lsls	r3, r3, #6
 8008188:	4618      	mov	r0, r3
 800818a:	f001 fa6b 	bl	8009664 <SUBGRF_SetRxBoosted>
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200002fc 	.word	0x200002fc
 800819c:	20000288 	.word	0x20000288

080081a0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	005a      	lsls	r2, r3, #1
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	4413      	add	r3, r2
 80081b2:	4a0c      	ldr	r2, [pc, #48]	; (80081e4 <RadioSetRxDutyCycle+0x44>)
 80081b4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80081b6:	2300      	movs	r3, #0
 80081b8:	2200      	movs	r2, #0
 80081ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80081be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081c2:	f001 fbc7 	bl	8009954 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <RadioSetRxDutyCycle+0x44>)
 80081c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f002 f864 	bl	800a29c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 fa68 	bl	80096ac <SUBGRF_SetRxDutyCycle>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20000288 	.word	0x20000288

080081e8 <RadioStartCad>:

static void RadioStartCad( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <RadioStartCad+0x2c>)
 80081ee:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f002 f851 	bl	800a29c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80081fa:	2300      	movs	r3, #0
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008202:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008206:	f001 fba5 	bl	8009954 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800820a:	f001 fa7b 	bl	8009704 <SUBGRF_SetCad>
}
 800820e:	bf00      	nop
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000288 	.word	0x20000288

08008218 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
 8008224:	4613      	mov	r3, r2
 8008226:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008228:	883b      	ldrh	r3, [r7, #0]
 800822a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fbe9 	bl	8009a0c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800823a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823e:	4618      	mov	r0, r3
 8008240:	f002 f854 	bl	800a2ec <SUBGRF_SetRfTxPower>
 8008244:	4603      	mov	r3, r0
 8008246:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008248:	210e      	movs	r1, #14
 800824a:	f640 101f 	movw	r0, #2335	; 0x91f
 800824e:	f001 ff31 	bl	800a0b4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	2101      	movs	r1, #1
 8008256:	4618      	mov	r0, r3
 8008258:	f002 f820 	bl	800a29c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800825c:	f001 fa60 	bl	8009720 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008260:	68f9      	ldr	r1, [r7, #12]
 8008262:	4805      	ldr	r0, [pc, #20]	; (8008278 <RadioSetTxContinuousWave+0x60>)
 8008264:	f003 fb04 	bl	800b870 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008268:	4803      	ldr	r0, [pc, #12]	; (8008278 <RadioSetTxContinuousWave+0x60>)
 800826a:	f003 fa23 	bl	800b6b4 <UTIL_TIMER_Start>
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200002e4 	.word	0x200002e4

0800827c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008286:	f001 fe82 	bl	8009f8e <SUBGRF_GetRssiInst>
 800828a:	4603      	mov	r3, r0
 800828c:	b21b      	sxth	r3, r3
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	4603      	mov	r3, r0
 800829e:	460a      	mov	r2, r1
 80082a0:	80fb      	strh	r3, [r7, #6]
 80082a2:	4613      	mov	r3, r2
 80082a4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80082a6:	797a      	ldrb	r2, [r7, #5]
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	4611      	mov	r1, r2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 ff01 	bl	800a0b4 <SUBGRF_WriteRegister>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	4603      	mov	r3, r0
 80082c2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f001 ff08 	bl	800a0dc <SUBGRF_ReadRegister>
 80082cc:	4603      	mov	r3, r0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b082      	sub	sp, #8
 80082da:	af00      	add	r7, sp, #0
 80082dc:	4603      	mov	r3, r0
 80082de:	6039      	str	r1, [r7, #0]
 80082e0:	80fb      	strh	r3, [r7, #6]
 80082e2:	4613      	mov	r3, r2
 80082e4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80082e6:	797b      	ldrb	r3, [r7, #5]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 ff08 	bl	800a104 <SUBGRF_WriteRegisters>
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	80fb      	strh	r3, [r7, #6]
 8008308:	4613      	mov	r3, r2
 800830a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800830c:	797b      	ldrb	r3, [r7, #5]
 800830e:	b29a      	uxth	r2, r3
 8008310:	88fb      	ldrh	r3, [r7, #6]
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f001 ff17 	bl	800a148 <SUBGRF_ReadRegisters>
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
	...

08008324 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	460a      	mov	r2, r1
 800832e:	71fb      	strb	r3, [r7, #7]
 8008330:	4613      	mov	r3, r2
 8008332:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d10a      	bne.n	8008350 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800833a:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <RadioSetMaxPayloadLength+0x50>)
 800833c:	79bb      	ldrb	r3, [r7, #6]
 800833e:	7013      	strb	r3, [r2, #0]
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <RadioSetMaxPayloadLength+0x50>)
 8008342:	781a      	ldrb	r2, [r3, #0]
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <RadioSetMaxPayloadLength+0x54>)
 8008346:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008348:	480c      	ldr	r0, [pc, #48]	; (800837c <RadioSetMaxPayloadLength+0x58>)
 800834a:	f001 fd6b 	bl	8009e24 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800834e:	e00d      	b.n	800836c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <RadioSetMaxPayloadLength+0x54>)
 8008352:	7d5b      	ldrb	r3, [r3, #21]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d109      	bne.n	800836c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008358:	4a06      	ldr	r2, [pc, #24]	; (8008374 <RadioSetMaxPayloadLength+0x50>)
 800835a:	79bb      	ldrb	r3, [r7, #6]
 800835c:	7013      	strb	r3, [r2, #0]
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <RadioSetMaxPayloadLength+0x50>)
 8008360:	781a      	ldrb	r2, [r3, #0]
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <RadioSetMaxPayloadLength+0x54>)
 8008364:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008366:	4805      	ldr	r0, [pc, #20]	; (800837c <RadioSetMaxPayloadLength+0x58>)
 8008368:	f001 fd5c 	bl	8009e24 <SUBGRF_SetPacketParams>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000008 	.word	0x20000008
 8008378:	20000288 	.word	0x20000288
 800837c:	20000296 	.word	0x20000296

08008380 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800838a:	4a13      	ldr	r2, [pc, #76]	; (80083d8 <RadioSetPublicNetwork+0x58>)
 800838c:	79fb      	ldrb	r3, [r7, #7]
 800838e:	7313      	strb	r3, [r2, #12]
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <RadioSetPublicNetwork+0x58>)
 8008392:	7b1a      	ldrb	r2, [r3, #12]
 8008394:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <RadioSetPublicNetwork+0x58>)
 8008396:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008398:	2001      	movs	r0, #1
 800839a:	f7ff f811 	bl	80073c0 <RadioSetModem>
    if( enable == true )
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80083a4:	2134      	movs	r1, #52	; 0x34
 80083a6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80083aa:	f001 fe83 	bl	800a0b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80083ae:	2144      	movs	r1, #68	; 0x44
 80083b0:	f240 7041 	movw	r0, #1857	; 0x741
 80083b4:	f001 fe7e 	bl	800a0b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80083b8:	e009      	b.n	80083ce <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80083ba:	2114      	movs	r1, #20
 80083bc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80083c0:	f001 fe78 	bl	800a0b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80083c4:	2124      	movs	r1, #36	; 0x24
 80083c6:	f240 7041 	movw	r0, #1857	; 0x741
 80083ca:	f001 fe73 	bl	800a0b4 <SUBGRF_WriteRegister>
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000288 	.word	0x20000288

080083dc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80083e0:	f001 ffb8 	bl	800a354 <SUBGRF_GetRadioWakeUpTime>
 80083e4:	4603      	mov	r3, r0
 80083e6:	3303      	adds	r3, #3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}

080083ec <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80083f4:	f000 f80e 	bl	8008414 <RadioOnTxTimeoutProcess>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008408:	f000 f818 	bl	800843c <RadioOnRxTimeoutProcess>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <RadioOnTxTimeoutProcess+0x24>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d008      	beq.n	8008432 <RadioOnTxTimeoutProcess+0x1e>
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <RadioOnTxTimeoutProcess+0x24>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800842a:	4b03      	ldr	r3, [pc, #12]	; (8008438 <RadioOnTxTimeoutProcess+0x24>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	4798      	blx	r3
    }
}
 8008432:	bf00      	nop
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000284 	.word	0x20000284

0800843c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <RadioOnRxTimeoutProcess+0x24>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <RadioOnRxTimeoutProcess+0x1e>
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <RadioOnRxTimeoutProcess+0x24>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8008452:	4b03      	ldr	r3, [pc, #12]	; (8008460 <RadioOnRxTimeoutProcess+0x24>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4798      	blx	r3
    }
}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000284 	.word	0x20000284

08008464 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	4603      	mov	r3, r0
 800846c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800846e:	4a05      	ldr	r2, [pc, #20]	; (8008484 <RadioOnDioIrq+0x20>)
 8008470:	88fb      	ldrh	r3, [r7, #6]
 8008472:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8008476:	f000 f807 	bl	8008488 <RadioIrqProcess>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000288 	.word	0x20000288

08008488 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8008488:	b5b0      	push	{r4, r5, r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8008496:	4ba8      	ldr	r3, [pc, #672]	; (8008738 <RadioIrqProcess+0x2b0>)
 8008498:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800849c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a0:	f000 810d 	beq.w	80086be <RadioIrqProcess+0x236>
 80084a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084a8:	f300 81e8 	bgt.w	800887c <RadioIrqProcess+0x3f4>
 80084ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b0:	f000 80f1 	beq.w	8008696 <RadioIrqProcess+0x20e>
 80084b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084b8:	f300 81e0 	bgt.w	800887c <RadioIrqProcess+0x3f4>
 80084bc:	2b80      	cmp	r3, #128	; 0x80
 80084be:	f000 80d6 	beq.w	800866e <RadioIrqProcess+0x1e6>
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	f300 81da 	bgt.w	800887c <RadioIrqProcess+0x3f4>
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	dc49      	bgt.n	8008560 <RadioIrqProcess+0xd8>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f340 81d5 	ble.w	800887c <RadioIrqProcess+0x3f4>
 80084d2:	3b01      	subs	r3, #1
 80084d4:	2b1f      	cmp	r3, #31
 80084d6:	f200 81d1 	bhi.w	800887c <RadioIrqProcess+0x3f4>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <RadioIrqProcess+0x58>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	08008569 	.word	0x08008569
 80084e4:	080085a3 	.word	0x080085a3
 80084e8:	0800887d 	.word	0x0800887d
 80084ec:	08008759 	.word	0x08008759
 80084f0:	0800887d 	.word	0x0800887d
 80084f4:	0800887d 	.word	0x0800887d
 80084f8:	0800887d 	.word	0x0800887d
 80084fc:	080087d5 	.word	0x080087d5
 8008500:	0800887d 	.word	0x0800887d
 8008504:	0800887d 	.word	0x0800887d
 8008508:	0800887d 	.word	0x0800887d
 800850c:	0800887d 	.word	0x0800887d
 8008510:	0800887d 	.word	0x0800887d
 8008514:	0800887d 	.word	0x0800887d
 8008518:	0800887d 	.word	0x0800887d
 800851c:	080087f1 	.word	0x080087f1
 8008520:	0800887d 	.word	0x0800887d
 8008524:	0800887d 	.word	0x0800887d
 8008528:	0800887d 	.word	0x0800887d
 800852c:	0800887d 	.word	0x0800887d
 8008530:	0800887d 	.word	0x0800887d
 8008534:	0800887d 	.word	0x0800887d
 8008538:	0800887d 	.word	0x0800887d
 800853c:	0800887d 	.word	0x0800887d
 8008540:	0800887d 	.word	0x0800887d
 8008544:	0800887d 	.word	0x0800887d
 8008548:	0800887d 	.word	0x0800887d
 800854c:	0800887d 	.word	0x0800887d
 8008550:	0800887d 	.word	0x0800887d
 8008554:	0800887d 	.word	0x0800887d
 8008558:	0800887d 	.word	0x0800887d
 800855c:	080087ff 	.word	0x080087ff
 8008560:	2b40      	cmp	r3, #64	; 0x40
 8008562:	f000 816d 	beq.w	8008840 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8008566:	e189      	b.n	800887c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8008568:	4874      	ldr	r0, [pc, #464]	; (800873c <RadioIrqProcess+0x2b4>)
 800856a:	f003 f911 	bl	800b790 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800856e:	2000      	movs	r0, #0
 8008570:	f001 f81c 	bl	80095ac <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008574:	f002 f892 	bl	800a69c <RFW_Is_LongPacketModeEnabled>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800857e:	f002 f8b6 	bl	800a6ee <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008582:	4b6f      	ldr	r3, [pc, #444]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 817a 	beq.w	8008880 <RadioIrqProcess+0x3f8>
 800858c:	4b6c      	ldr	r3, [pc, #432]	; (8008740 <RadioIrqProcess+0x2b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 8174 	beq.w	8008880 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8008598:	4b69      	ldr	r3, [pc, #420]	; (8008740 <RadioIrqProcess+0x2b8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4798      	blx	r3
        break;
 80085a0:	e16e      	b.n	8008880 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80085a2:	4868      	ldr	r0, [pc, #416]	; (8008744 <RadioIrqProcess+0x2bc>)
 80085a4:	f003 f8f4 	bl	800b790 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80085a8:	4b63      	ldr	r3, [pc, #396]	; (8008738 <RadioIrqProcess+0x2b0>)
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	f083 0301 	eor.w	r3, r3, #1
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d014      	beq.n	80085e0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80085b6:	2000      	movs	r0, #0
 80085b8:	f000 fff8 	bl	80095ac <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80085bc:	2100      	movs	r1, #0
 80085be:	f640 1002 	movw	r0, #2306	; 0x902
 80085c2:	f001 fd77 	bl	800a0b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80085c6:	f640 1044 	movw	r0, #2372	; 0x944
 80085ca:	f001 fd87 	bl	800a0dc <SUBGRF_ReadRegister>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f043 0302 	orr.w	r3, r3, #2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	f640 1044 	movw	r0, #2372	; 0x944
 80085dc:	f001 fd6a 	bl	800a0b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80085e0:	1dfb      	adds	r3, r7, #7
 80085e2:	22ff      	movs	r2, #255	; 0xff
 80085e4:	4619      	mov	r1, r3
 80085e6:	4858      	ldr	r0, [pc, #352]	; (8008748 <RadioIrqProcess+0x2c0>)
 80085e8:	f000 feb0 	bl	800934c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80085ec:	4857      	ldr	r0, [pc, #348]	; (800874c <RadioIrqProcess+0x2c4>)
 80085ee:	f001 fd0f 	bl	800a010 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80085f2:	4b53      	ldr	r3, [pc, #332]	; (8008740 <RadioIrqProcess+0x2b8>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8144 	beq.w	8008884 <RadioIrqProcess+0x3fc>
 80085fc:	4b50      	ldr	r3, [pc, #320]	; (8008740 <RadioIrqProcess+0x2b8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 813e 	beq.w	8008884 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8008608:	4b4b      	ldr	r3, [pc, #300]	; (8008738 <RadioIrqProcess+0x2b0>)
 800860a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800860e:	2b01      	cmp	r3, #1
 8008610:	d10e      	bne.n	8008630 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8008612:	4b4b      	ldr	r3, [pc, #300]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689c      	ldr	r4, [r3, #8]
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	b299      	uxth	r1, r3
 800861c:	4b46      	ldr	r3, [pc, #280]	; (8008738 <RadioIrqProcess+0x2b0>)
 800861e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8008622:	b21a      	sxth	r2, r3
 8008624:	4b44      	ldr	r3, [pc, #272]	; (8008738 <RadioIrqProcess+0x2b0>)
 8008626:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800862a:	4847      	ldr	r0, [pc, #284]	; (8008748 <RadioIrqProcess+0x2c0>)
 800862c:	47a0      	blx	r4
                break;
 800862e:	e01d      	b.n	800866c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008630:	4b41      	ldr	r3, [pc, #260]	; (8008738 <RadioIrqProcess+0x2b0>)
 8008632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008634:	463a      	mov	r2, r7
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f001 ff7d 	bl	800a538 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800863e:	4b40      	ldr	r3, [pc, #256]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689c      	ldr	r4, [r3, #8]
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	b299      	uxth	r1, r3
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <RadioIrqProcess+0x2b0>)
 800864a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800864e:	b218      	sxth	r0, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008656:	4a3e      	ldr	r2, [pc, #248]	; (8008750 <RadioIrqProcess+0x2c8>)
 8008658:	fb82 5203 	smull	r5, r2, r2, r3
 800865c:	1192      	asrs	r2, r2, #6
 800865e:	17db      	asrs	r3, r3, #31
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	b25b      	sxtb	r3, r3
 8008664:	4602      	mov	r2, r0
 8008666:	4838      	ldr	r0, [pc, #224]	; (8008748 <RadioIrqProcess+0x2c0>)
 8008668:	47a0      	blx	r4
                break;
 800866a:	bf00      	nop
        break;
 800866c:	e10a      	b.n	8008884 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800866e:	2000      	movs	r0, #0
 8008670:	f000 ff9c 	bl	80095ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008674:	4b32      	ldr	r3, [pc, #200]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 8105 	beq.w	8008888 <RadioIrqProcess+0x400>
 800867e:	4b30      	ldr	r3, [pc, #192]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80ff 	beq.w	8008888 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 800868a:	4b2d      	ldr	r3, [pc, #180]	; (8008740 <RadioIrqProcess+0x2b8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2000      	movs	r0, #0
 8008692:	4798      	blx	r3
        break;
 8008694:	e0f8      	b.n	8008888 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8008696:	2000      	movs	r0, #0
 8008698:	f000 ff88 	bl	80095ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800869c:	4b28      	ldr	r3, [pc, #160]	; (8008740 <RadioIrqProcess+0x2b8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80f3 	beq.w	800888c <RadioIrqProcess+0x404>
 80086a6:	4b26      	ldr	r3, [pc, #152]	; (8008740 <RadioIrqProcess+0x2b8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80ed 	beq.w	800888c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80086b2:	4b23      	ldr	r3, [pc, #140]	; (8008740 <RadioIrqProcess+0x2b8>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	2001      	movs	r0, #1
 80086ba:	4798      	blx	r3
        break;
 80086bc:	e0e6      	b.n	800888c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80086be:	4b25      	ldr	r3, [pc, #148]	; (8008754 <RadioIrqProcess+0x2cc>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	2100      	movs	r1, #0
 80086c4:	2002      	movs	r0, #2
 80086c6:	f003 fa5b 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80086ca:	f000 fe25 	bl	8009318 <SUBGRF_GetOperatingMode>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d115      	bne.n	8008700 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 80086d4:	4819      	ldr	r0, [pc, #100]	; (800873c <RadioIrqProcess+0x2b4>)
 80086d6:	f003 f85b 	bl	800b790 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80086da:	2000      	movs	r0, #0
 80086dc:	f000 ff66 	bl	80095ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <RadioIrqProcess+0x2b8>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80d3 	beq.w	8008890 <RadioIrqProcess+0x408>
 80086ea:	4b15      	ldr	r3, [pc, #84]	; (8008740 <RadioIrqProcess+0x2b8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80cd 	beq.w	8008890 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <RadioIrqProcess+0x2b8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	4798      	blx	r3
        break;
 80086fe:	e0c7      	b.n	8008890 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8008700:	f000 fe0a 	bl	8009318 <SUBGRF_GetOperatingMode>
 8008704:	4603      	mov	r3, r0
 8008706:	2b05      	cmp	r3, #5
 8008708:	f040 80c2 	bne.w	8008890 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800870c:	480d      	ldr	r0, [pc, #52]	; (8008744 <RadioIrqProcess+0x2bc>)
 800870e:	f003 f83f 	bl	800b790 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008712:	2000      	movs	r0, #0
 8008714:	f000 ff4a 	bl	80095ac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008718:	4b09      	ldr	r3, [pc, #36]	; (8008740 <RadioIrqProcess+0x2b8>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80b7 	beq.w	8008890 <RadioIrqProcess+0x408>
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80b1 	beq.w	8008890 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800872e:	4b04      	ldr	r3, [pc, #16]	; (8008740 <RadioIrqProcess+0x2b8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4798      	blx	r3
        break;
 8008736:	e0ab      	b.n	8008890 <RadioIrqProcess+0x408>
 8008738:	20000288 	.word	0x20000288
 800873c:	200002e4 	.word	0x200002e4
 8008740:	20000284 	.word	0x20000284
 8008744:	200002fc 	.word	0x200002fc
 8008748:	20000184 	.word	0x20000184
 800874c:	200002ac 	.word	0x200002ac
 8008750:	10624dd3 	.word	0x10624dd3
 8008754:	0800c14c 	.word	0x0800c14c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008758:	4b54      	ldr	r3, [pc, #336]	; (80088ac <RadioIrqProcess+0x424>)
 800875a:	2201      	movs	r2, #1
 800875c:	2100      	movs	r1, #0
 800875e:	2002      	movs	r0, #2
 8008760:	f003 fa0e 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008764:	4b52      	ldr	r3, [pc, #328]	; (80088b0 <RadioIrqProcess+0x428>)
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8093 	beq.w	8008894 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800876e:	4a51      	ldr	r2, [pc, #324]	; (80088b4 <RadioIrqProcess+0x42c>)
 8008770:	4b4f      	ldr	r3, [pc, #316]	; (80088b0 <RadioIrqProcess+0x428>)
 8008772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008774:	0c1b      	lsrs	r3, r3, #16
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	f640 1003 	movw	r0, #2307	; 0x903
 800877e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8008780:	4a4c      	ldr	r2, [pc, #304]	; (80088b4 <RadioIrqProcess+0x42c>)
 8008782:	4b4b      	ldr	r3, [pc, #300]	; (80088b0 <RadioIrqProcess+0x428>)
 8008784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	b2db      	uxtb	r3, r3
 800878a:	4619      	mov	r1, r3
 800878c:	f640 1004 	movw	r0, #2308	; 0x904
 8008790:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8008792:	4a48      	ldr	r2, [pc, #288]	; (80088b4 <RadioIrqProcess+0x42c>)
 8008794:	4b46      	ldr	r3, [pc, #280]	; (80088b0 <RadioIrqProcess+0x428>)
 8008796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008798:	b2db      	uxtb	r3, r3
 800879a:	4619      	mov	r1, r3
 800879c:	f640 1005 	movw	r0, #2309	; 0x905
 80087a0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80087a2:	4c44      	ldr	r4, [pc, #272]	; (80088b4 <RadioIrqProcess+0x42c>)
 80087a4:	4b44      	ldr	r3, [pc, #272]	; (80088b8 <RadioIrqProcess+0x430>)
 80087a6:	f640 1002 	movw	r0, #2306	; 0x902
 80087aa:	4798      	blx	r3
 80087ac:	4603      	mov	r3, r0
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	f640 1002 	movw	r0, #2306	; 0x902
 80087ba:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80087bc:	4b3c      	ldr	r3, [pc, #240]	; (80088b0 <RadioIrqProcess+0x428>)
 80087be:	2200      	movs	r2, #0
 80087c0:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80087c2:	2300      	movs	r3, #0
 80087c4:	2200      	movs	r2, #0
 80087c6:	f240 2162 	movw	r1, #610	; 0x262
 80087ca:	f240 2062 	movw	r0, #610	; 0x262
 80087ce:	f001 f8c1 	bl	8009954 <SUBGRF_SetDioIrqParams>
        break;
 80087d2:	e05f      	b.n	8008894 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80087d4:	4b39      	ldr	r3, [pc, #228]	; (80088bc <RadioIrqProcess+0x434>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	2100      	movs	r1, #0
 80087da:	2002      	movs	r0, #2
 80087dc:	f003 f9d0 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80087e0:	f001 ff55 	bl	800a68e <RFW_Is_Init>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d156      	bne.n	8008898 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 80087ea:	f001 ff86 	bl	800a6fa <RFW_ReceivePayload>
        break;
 80087ee:	e053      	b.n	8008898 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80087f0:	4b33      	ldr	r3, [pc, #204]	; (80088c0 <RadioIrqProcess+0x438>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	2100      	movs	r1, #0
 80087f6:	2002      	movs	r0, #2
 80087f8:	f003 f9c2 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80087fc:	e051      	b.n	80088a2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 80087fe:	4831      	ldr	r0, [pc, #196]	; (80088c4 <RadioIrqProcess+0x43c>)
 8008800:	f002 ffc6 	bl	800b790 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008804:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <RadioIrqProcess+0x428>)
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	f083 0301 	eor.w	r3, r3, #1
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8008812:	2000      	movs	r0, #0
 8008814:	f000 feca 	bl	80095ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008818:	4b2b      	ldr	r3, [pc, #172]	; (80088c8 <RadioIrqProcess+0x440>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d03d      	beq.n	800889c <RadioIrqProcess+0x414>
 8008820:	4b29      	ldr	r3, [pc, #164]	; (80088c8 <RadioIrqProcess+0x440>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d038      	beq.n	800889c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800882a:	4b27      	ldr	r3, [pc, #156]	; (80088c8 <RadioIrqProcess+0x440>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008832:	4b26      	ldr	r3, [pc, #152]	; (80088cc <RadioIrqProcess+0x444>)
 8008834:	2201      	movs	r2, #1
 8008836:	2100      	movs	r1, #0
 8008838:	2002      	movs	r0, #2
 800883a:	f003 f9a1 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800883e:	e02d      	b.n	800889c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008840:	4b23      	ldr	r3, [pc, #140]	; (80088d0 <RadioIrqProcess+0x448>)
 8008842:	2201      	movs	r2, #1
 8008844:	2100      	movs	r1, #0
 8008846:	2002      	movs	r0, #2
 8008848:	f003 f99a 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800884c:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <RadioIrqProcess+0x428>)
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	f083 0301 	eor.w	r3, r3, #1
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800885a:	2000      	movs	r0, #0
 800885c:	f000 fea6 	bl	80095ac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008860:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <RadioIrqProcess+0x440>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <RadioIrqProcess+0x418>
 8008868:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <RadioIrqProcess+0x440>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d016      	beq.n	80088a0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <RadioIrqProcess+0x440>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4798      	blx	r3
        break;
 800887a:	e011      	b.n	80088a0 <RadioIrqProcess+0x418>
        break;
 800887c:	bf00      	nop
 800887e:	e010      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008880:	bf00      	nop
 8008882:	e00e      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008884:	bf00      	nop
 8008886:	e00c      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008888:	bf00      	nop
 800888a:	e00a      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 800888c:	bf00      	nop
 800888e:	e008      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008890:	bf00      	nop
 8008892:	e006      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008894:	bf00      	nop
 8008896:	e004      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 8008898:	bf00      	nop
 800889a:	e002      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 800889c:	bf00      	nop
 800889e:	e000      	b.n	80088a2 <RadioIrqProcess+0x41a>
        break;
 80088a0:	bf00      	nop
    }
}
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bdb0      	pop	{r4, r5, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	0800c160 	.word	0x0800c160
 80088b0:	20000288 	.word	0x20000288
 80088b4:	08008297 	.word	0x08008297
 80088b8:	080082bb 	.word	0x080082bb
 80088bc:	0800c16c 	.word	0x0800c16c
 80088c0:	0800c178 	.word	0x0800c178
 80088c4:	200002fc 	.word	0x200002fc
 80088c8:	20000284 	.word	0x20000284
 80088cc:	0800c184 	.word	0x0800c184
 80088d0:	0800c190 	.word	0x0800c190

080088d4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80088d8:	4b09      	ldr	r3, [pc, #36]	; (8008900 <RadioTxPrbs+0x2c>)
 80088da:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80088de:	2101      	movs	r1, #1
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fcdb 	bl	800a29c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80088e6:	4b07      	ldr	r3, [pc, #28]	; (8008904 <RadioTxPrbs+0x30>)
 80088e8:	212d      	movs	r1, #45	; 0x2d
 80088ea:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80088ee:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80088f0:	f000 ff1f 	bl	8009732 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80088f4:	4804      	ldr	r0, [pc, #16]	; (8008908 <RadioTxPrbs+0x34>)
 80088f6:	f000 fe75 	bl	80095e4 <SUBGRF_SetTx>
}
 80088fa:	bf00      	nop
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000288 	.word	0x20000288
 8008904:	08008297 	.word	0x08008297
 8008908:	000fffff 	.word	0x000fffff

0800890c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fce6 	bl	800a2ec <SUBGRF_SetRfTxPower>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008924:	210e      	movs	r1, #14
 8008926:	f640 101f 	movw	r0, #2335	; 0x91f
 800892a:	f001 fbc3 	bl	800a0b4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	2101      	movs	r1, #1
 8008932:	4618      	mov	r0, r3
 8008934:	f001 fcb2 	bl	800a29c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008938:	f000 fef2 	bl	8009720 <SUBGRF_SetTxContinuousWave>
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
 800895e:	e011      	b.n	8008984 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	4413      	add	r3, r2
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	440b      	add	r3, r1
 800896e:	43d2      	mvns	r2, r2
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4413      	add	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	3301      	adds	r3, #1
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	429a      	cmp	r2, r3
 800898a:	dbe9      	blt.n	8008960 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]
 8008990:	e049      	b.n	8008a26 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	425a      	negs	r2, r3
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	f002 0207 	and.w	r2, r2, #7
 800899e:	bf58      	it	pl
 80089a0:	4253      	negpl	r3, r2
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f1c3 0307 	rsb	r3, r3, #7
 80089a8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	da00      	bge.n	80089b2 <payload_integration+0x6e>
 80089b0:	3307      	adds	r3, #7
 80089b2:	10db      	asrs	r3, r3, #3
 80089b4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	3301      	adds	r3, #1
 80089ba:	425a      	negs	r2, r3
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	f002 0207 	and.w	r2, r2, #7
 80089c4:	bf58      	it	pl
 80089c6:	4253      	negpl	r3, r2
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f1c3 0307 	rsb	r3, r3, #7
 80089ce:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	3301      	adds	r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da00      	bge.n	80089da <payload_integration+0x96>
 80089d8:	3307      	adds	r3, #7
 80089da:	10db      	asrs	r3, r3, #3
 80089dc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80089de:	7dbb      	ldrb	r3, [r7, #22]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	fa42 f303 	asr.w	r3, r2, r3
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80089f6:	7ffa      	ldrb	r2, [r7, #31]
 80089f8:	7cfb      	ldrb	r3, [r7, #19]
 80089fa:	4053      	eors	r3, r2
 80089fc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80089fe:	7d3b      	ldrb	r3, [r7, #20]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	b25a      	sxtb	r2, r3
 8008a08:	7ff9      	ldrb	r1, [r7, #31]
 8008a0a:	7d7b      	ldrb	r3, [r7, #21]
 8008a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	4313      	orrs	r3, r2
 8008a14:	b259      	sxtb	r1, r3
 8008a16:	7d3b      	ldrb	r3, [r7, #20]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	b2ca      	uxtb	r2, r1
 8008a1e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	3301      	adds	r3, #1
 8008a24:	61bb      	str	r3, [r7, #24]
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	dbb0      	blt.n	8008992 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8008a30:	7ffb      	ldrb	r3, [r7, #31]
 8008a32:	01db      	lsls	r3, r3, #7
 8008a34:	b25a      	sxtb	r2, r3
 8008a36:	7ffb      	ldrb	r3, [r7, #31]
 8008a38:	019b      	lsls	r3, r3, #6
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	7ffa      	ldrb	r2, [r7, #31]
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	d101      	bne.n	8008a4a <payload_integration+0x106>
 8008a46:	2220      	movs	r2, #32
 8008a48:	e000      	b.n	8008a4c <payload_integration+0x108>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	b259      	sxtb	r1, r3
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	b2ca      	uxtb	r2, r1
 8008a58:	701a      	strb	r2, [r3, #0]
}
 8008a5a:	bf00      	nop
 8008a5c:	3724      	adds	r7, #36	; 0x24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8008a78:	2300      	movs	r3, #0
 8008a7a:	623b      	str	r3, [r7, #32]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008a80:	f001 fdff 	bl	800a682 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bf14      	ite	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	2300      	moveq	r3, #0
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4ba3      	ldr	r3, [pc, #652]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008a9c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <RadioSetRxGenericConfig+0x48>
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	f000 80dc 	beq.w	8008c62 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8008aaa:	e194      	b.n	8008dd6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <RadioSetRxGenericConfig+0x58>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8008abc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac0:	e18a      	b.n	8008dd8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	7f9b      	ldrb	r3, [r3, #30]
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d902      	bls.n	8008ad0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8008aca:	f04f 33ff 	mov.w	r3, #4294967295
 8008ace:	e183      	b.n	8008dd8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6919      	ldr	r1, [r3, #16]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	7f9b      	ldrb	r3, [r3, #30]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	f107 0320 	add.w	r3, r7, #32
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f002 f900 	bl	800ace4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bf14      	ite	ne
 8008aec:	2301      	movne	r3, #1
 8008aee:	2300      	moveq	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fe26 	bl	8009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008af8:	4b8b      	ldr	r3, [pc, #556]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	4a88      	ldr	r2, [pc, #544]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b06:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008b0e:	4b86      	ldr	r3, [pc, #536]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fce5 	bl	800a4e8 <SUBGRF_GetFskBandwidthRegValue>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	461a      	mov	r2, r3
 8008b22:	4b81      	ldr	r3, [pc, #516]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008b28:	4b7f      	ldr	r3, [pc, #508]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	4b7b      	ldr	r3, [pc, #492]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b3a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	7fda      	ldrb	r2, [r3, #31]
 8008b40:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b42:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7f9b      	ldrb	r3, [r3, #30]
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	4b76      	ldr	r3, [pc, #472]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b4e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008b56:	4b74      	ldr	r3, [pc, #464]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b58:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b6f      	ldr	r3, [pc, #444]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b6c:	759a      	strb	r2, [r3, #22]
 8008b6e:	e00b      	b.n	8008b88 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d103      	bne.n	8008b82 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b7a:	4b6b      	ldr	r3, [pc, #428]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b7c:	22ff      	movs	r2, #255	; 0xff
 8008b7e:	759a      	strb	r2, [r3, #22]
 8008b80:	e002      	b.n	8008b88 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008b82:	4b69      	ldr	r3, [pc, #420]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d004      	beq.n	8008b9c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d12d      	bne.n	8008bf8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ba2:	2bf1      	cmp	r3, #241	; 0xf1
 8008ba4:	d00c      	beq.n	8008bc0 <RadioSetRxGenericConfig+0x15c>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008bac:	2bf2      	cmp	r3, #242	; 0xf2
 8008bae:	d007      	beq.n	8008bc0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d002      	beq.n	8008bc0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295
 8008bbe:	e10b      	b.n	8008dd8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008bc8:	4b58      	ldr	r3, [pc, #352]	; (8008d2c <RadioSetRxGenericConfig+0x2c8>)
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	f107 0314 	add.w	r3, r7, #20
 8008bd0:	4a57      	ldr	r2, [pc, #348]	; (8008d30 <RadioSetRxGenericConfig+0x2cc>)
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 fd48 	bl	800a668 <RFW_Init>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d002      	beq.n	8008be4 <RadioSetRxGenericConfig+0x180>
                return -1;
 8008bde:	f04f 33ff 	mov.w	r3, #4294967295
 8008be2:	e0f9      	b.n	8008dd8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008be4:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008bea:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008bec:	2201      	movs	r2, #1
 8008bee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008bf0:	4b4d      	ldr	r3, [pc, #308]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	755a      	strb	r2, [r3, #21]
        {
 8008bf6:	e00e      	b.n	8008c16 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008bfe:	4b4a      	ldr	r3, [pc, #296]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008c00:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008c08:	4b47      	ldr	r3, [pc, #284]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008c0a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008c12:	4b45      	ldr	r3, [pc, #276]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008c14:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008c16:	f7ff fa3c 	bl	8008092 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	f7fe fbd0 	bl	80073c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008c20:	4844      	ldr	r0, [pc, #272]	; (8008d34 <RadioSetRxGenericConfig+0x2d0>)
 8008c22:	f001 f82d 	bl	8009c80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c26:	4844      	ldr	r0, [pc, #272]	; (8008d38 <RadioSetRxGenericConfig+0x2d4>)
 8008c28:	f001 f8fc 	bl	8009e24 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008c2c:	f107 0320 	add.w	r3, r7, #32
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fbc0 	bl	80093b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	8b9b      	ldrh	r3, [r3, #28]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fc0a 	bl	8009454 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	8b1b      	ldrh	r3, [r3, #24]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fbe5 	bl	8009414 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008c50:	fb03 f202 	mul.w	r2, r3, r2
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c5c:	4a32      	ldr	r2, [pc, #200]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008c5e:	6093      	str	r3, [r2, #8]
        break;
 8008c60:	e0b9      	b.n	8008dd6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	e0b3      	b.n	8008dd8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d104      	bne.n	8008c84 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c82:	e002      	b.n	8008c8a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8008c84:	23ff      	movs	r3, #255	; 0xff
 8008c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bf14      	ite	ne
 8008c92:	2301      	movne	r3, #1
 8008c94:	2300      	moveq	r3, #0
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fd53 	bl	8009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fd5d 	bl	8009762 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008ca8:	4b1f      	ldr	r3, [pc, #124]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008cb6:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008cce:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008cd0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d010      	beq.n	8008d00 <RadioSetRxGenericConfig+0x29c>
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	dc2c      	bgt.n	8008d3c <RadioSetRxGenericConfig+0x2d8>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <RadioSetRxGenericConfig+0x288>
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d005      	beq.n	8008cf6 <RadioSetRxGenericConfig+0x292>
            break;
 8008cea:	e027      	b.n	8008d3c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008cec:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cf4:	e023      	b.n	8008d3e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008cfe:	e01e      	b.n	8008d3e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d06:	2b0b      	cmp	r3, #11
 8008d08:	d004      	beq.n	8008d14 <RadioSetRxGenericConfig+0x2b0>
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d10:	2b0c      	cmp	r3, #12
 8008d12:	d104      	bne.n	8008d1e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d1c:	e00f      	b.n	8008d3e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008d1e:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <RadioSetRxGenericConfig+0x2c4>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008d26:	e00a      	b.n	8008d3e <RadioSetRxGenericConfig+0x2da>
 8008d28:	20000288 	.word	0x20000288
 8008d2c:	20000284 	.word	0x20000284
 8008d30:	200002fc 	.word	0x200002fc
 8008d34:	200002c0 	.word	0x200002c0
 8008d38:	20000296 	.word	0x20000296
            break;
 8008d3c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008d3e:	4b28      	ldr	r3, [pc, #160]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8008d48:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d4a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8008d52:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d54:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008d56:	4a22      	ldr	r2, [pc, #136]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d5c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008d64:	4b1e      	ldr	r3, [pc, #120]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d66:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008d76:	f7ff f98c 	bl	8008092 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	f7fe fb20 	bl	80073c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d80:	4818      	ldr	r0, [pc, #96]	; (8008de4 <RadioSetRxGenericConfig+0x380>)
 8008d82:	f000 ff7d 	bl	8009c80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d86:	4818      	ldr	r0, [pc, #96]	; (8008de8 <RadioSetRxGenericConfig+0x384>)
 8008d88:	f001 f84c 	bl	8009e24 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008d8c:	4b14      	ldr	r3, [pc, #80]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d10d      	bne.n	8008db2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008d96:	f240 7036 	movw	r0, #1846	; 0x736
 8008d9a:	f001 f99f 	bl	800a0dc <SUBGRF_ReadRegister>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f023 0304 	bic.w	r3, r3, #4
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	f240 7036 	movw	r0, #1846	; 0x736
 8008dac:	f001 f982 	bl	800a0b4 <SUBGRF_WriteRegister>
 8008db0:	e00c      	b.n	8008dcc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008db2:	f240 7036 	movw	r0, #1846	; 0x736
 8008db6:	f001 f991 	bl	800a0dc <SUBGRF_ReadRegister>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	f043 0304 	orr.w	r3, r3, #4
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	f240 7036 	movw	r0, #1846	; 0x736
 8008dc8:	f001 f974 	bl	800a0b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <RadioSetRxGenericConfig+0x37c>)
 8008dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dd2:	609a      	str	r2, [r3, #8]
        break;
 8008dd4:	bf00      	nop
    }
    return status;
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3730      	adds	r7, #48	; 0x30
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000288 	.word	0x20000288
 8008de4:	200002c0 	.word	0x200002c0
 8008de8:	20000296 	.word	0x20000296

08008dec <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08e      	sub	sp, #56	; 0x38
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	607b      	str	r3, [r7, #4]
 8008df6:	4603      	mov	r3, r0
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8008dfe:	2300      	movs	r3, #0
 8008e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e02:	2300      	movs	r3, #0
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008e06:	f001 fc3c 	bl	800a682 <RFW_DeInit>
    switch( modem )
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	f200 8204 	bhi.w	800921a <RadioSetTxGenericConfig+0x42e>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <RadioSetTxGenericConfig+0x2c>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008f9d 	.word	0x08008f9d
 8008e1c:	080090e5 	.word	0x080090e5
 8008e20:	080091dd 	.word	0x080091dd
 8008e24:	08008e29 	.word	0x08008e29
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	7c9b      	ldrb	r3, [r3, #18]
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d902      	bls.n	8008e36 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8008e30:	f04f 33ff 	mov.w	r3, #4294967295
 8008e34:	e206      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6899      	ldr	r1, [r3, #8]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	7c9b      	ldrb	r3, [r3, #18]
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 ff4d 	bl	800ace4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	e1f5      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d813      	bhi.n	8008e8c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8008e64:	2302      	movs	r3, #2
 8008e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008e6a:	4b99      	ldr	r3, [pc, #612]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008e70:	4b97      	ldr	r3, [pc, #604]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e72:	2203      	movs	r2, #3
 8008e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a94      	ldr	r2, [pc, #592]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e7e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	7cda      	ldrb	r2, [r3, #19]
 8008e84:	4b92      	ldr	r3, [pc, #584]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e8a:	e017      	b.n	8008ebc <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008e92:	4b8f      	ldr	r3, [pc, #572]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008e98:	4b8d      	ldr	r3, [pc, #564]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a8a      	ldr	r2, [pc, #552]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008ea6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	7cda      	ldrb	r2, [r3, #19]
 8008eac:	4b88      	ldr	r3, [pc, #544]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	089b      	lsrs	r3, r3, #2
 8008eb8:	4a85      	ldr	r2, [pc, #532]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008eba:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	4b82      	ldr	r3, [pc, #520]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008ec8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008eca:	4b81      	ldr	r3, [pc, #516]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008ecc:	2204      	movs	r2, #4
 8008ece:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	7c9b      	ldrb	r3, [r3, #18]
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	4b7d      	ldr	r3, [pc, #500]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008eda:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008edc:	4b7c      	ldr	r3, [pc, #496]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	7d9b      	ldrb	r3, [r3, #22]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d003      	beq.n	8008ef2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	7d1b      	ldrb	r3, [r3, #20]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d12b      	bne.n	8008f4a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	7d5b      	ldrb	r3, [r3, #21]
 8008ef6:	2bf1      	cmp	r3, #241	; 0xf1
 8008ef8:	d00a      	beq.n	8008f10 <RadioSetTxGenericConfig+0x124>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	7d5b      	ldrb	r3, [r3, #21]
 8008efe:	2bf2      	cmp	r3, #242	; 0xf2
 8008f00:	d006      	beq.n	8008f10 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	7d5b      	ldrb	r3, [r3, #21]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d002      	beq.n	8008f10 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	e199      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008f1a:	4b6e      	ldr	r3, [pc, #440]	; (80090d4 <RadioSetTxGenericConfig+0x2e8>)
 8008f1c:	6819      	ldr	r1, [r3, #0]
 8008f1e:	f107 0320 	add.w	r3, r7, #32
 8008f22:	4a6d      	ldr	r2, [pc, #436]	; (80090d8 <RadioSetTxGenericConfig+0x2ec>)
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fb9f 	bl	800a668 <RFW_Init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8008f30:	f04f 33ff 	mov.w	r3, #4294967295
 8008f34:	e186      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008f36:	4b66      	ldr	r3, [pc, #408]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008f3c:	4b64      	ldr	r3, [pc, #400]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008f42:	4b63      	ldr	r3, [pc, #396]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	755a      	strb	r2, [r3, #21]
        {
 8008f48:	e00b      	b.n	8008f62 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	7d5a      	ldrb	r2, [r3, #21]
 8008f4e:	4b60      	ldr	r3, [pc, #384]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f50:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	7d9a      	ldrb	r2, [r3, #22]
 8008f56:	4b5e      	ldr	r3, [pc, #376]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f58:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7d1a      	ldrb	r2, [r3, #20]
 8008f5e:	4b5c      	ldr	r3, [pc, #368]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008f60:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8008f62:	f7ff f896 	bl	8008092 <RadioStandby>
        RadioSetModem( radio_modem );
 8008f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fa28 	bl	80073c0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008f70:	485a      	ldr	r0, [pc, #360]	; (80090dc <RadioSetTxGenericConfig+0x2f0>)
 8008f72:	f000 fe85 	bl	8009c80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f76:	485a      	ldr	r0, [pc, #360]	; (80090e0 <RadioSetTxGenericConfig+0x2f4>)
 8008f78:	f000 ff54 	bl	8009e24 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fa18 	bl	80093b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	8a1b      	ldrh	r3, [r3, #16]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fa62 	bl	8009454 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	899b      	ldrh	r3, [r3, #12]
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fa3d 	bl	8009414 <SUBGRF_SetCrcPolynomial>
        break;
 8008f9a:	e13f      	b.n	800921c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8008fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa8:	e14c      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	7c9b      	ldrb	r3, [r3, #18]
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	d902      	bls.n	8008fb8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	e145      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	6899      	ldr	r1, [r3, #8]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	7c9b      	ldrb	r3, [r3, #18]
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 fe8c 	bl	800ace4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008fcc:	4b40      	ldr	r3, [pc, #256]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a3d      	ldr	r2, [pc, #244]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008fda:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	7cda      	ldrb	r2, [r3, #19]
 8008fe0:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	4a39      	ldr	r2, [pc, #228]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008fec:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008fee:	4b38      	ldr	r3, [pc, #224]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	4b34      	ldr	r3, [pc, #208]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009000:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009002:	4b33      	ldr	r3, [pc, #204]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009004:	2204      	movs	r2, #4
 8009006:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	7c9b      	ldrb	r3, [r3, #18]
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	b2da      	uxtb	r2, r3
 8009010:	4b2f      	ldr	r3, [pc, #188]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009012:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009014:	4b2e      	ldr	r3, [pc, #184]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009016:	2200      	movs	r2, #0
 8009018:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	7d9b      	ldrb	r3, [r3, #22]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d003      	beq.n	800902a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	7d1b      	ldrb	r3, [r3, #20]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d12a      	bne.n	8009080 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	7d5b      	ldrb	r3, [r3, #21]
 800902e:	2bf1      	cmp	r3, #241	; 0xf1
 8009030:	d00a      	beq.n	8009048 <RadioSetTxGenericConfig+0x25c>
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	7d5b      	ldrb	r3, [r3, #21]
 8009036:	2bf2      	cmp	r3, #242	; 0xf2
 8009038:	d006      	beq.n	8009048 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	7d5b      	ldrb	r3, [r3, #21]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d002      	beq.n	8009048 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	e0fd      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009048:	2301      	movs	r3, #1
 800904a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009050:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <RadioSetTxGenericConfig+0x2e8>)
 8009052:	6819      	ldr	r1, [r3, #0]
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	4a1f      	ldr	r2, [pc, #124]	; (80090d8 <RadioSetTxGenericConfig+0x2ec>)
 800905a:	4618      	mov	r0, r3
 800905c:	f001 fb04 	bl	800a668 <RFW_Init>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	e0eb      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800906c:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 800906e:	2200      	movs	r2, #0
 8009070:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009072:	4b17      	ldr	r3, [pc, #92]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009074:	2201      	movs	r2, #1
 8009076:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009078:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 800907a:	2200      	movs	r2, #0
 800907c:	755a      	strb	r2, [r3, #21]
        {
 800907e:	e00b      	b.n	8009098 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	7d5a      	ldrb	r2, [r3, #21]
 8009084:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009086:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	7d9a      	ldrb	r2, [r3, #22]
 800908c:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 800908e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	7d1a      	ldrb	r2, [r3, #20]
 8009094:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <RadioSetTxGenericConfig+0x2e4>)
 8009096:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009098:	f7fe fffb 	bl	8008092 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800909c:	2000      	movs	r0, #0
 800909e:	f7fe f98f 	bl	80073c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090a2:	480e      	ldr	r0, [pc, #56]	; (80090dc <RadioSetTxGenericConfig+0x2f0>)
 80090a4:	f000 fdec 	bl	8009c80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090a8:	480d      	ldr	r0, [pc, #52]	; (80090e0 <RadioSetTxGenericConfig+0x2f4>)
 80090aa:	f000 febb 	bl	8009e24 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80090ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 f97f 	bl	80093b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	8a1b      	ldrh	r3, [r3, #16]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f9c9 	bl	8009454 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	899b      	ldrh	r3, [r3, #12]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f9a4 	bl	8009414 <SUBGRF_SetCrcPolynomial>
        break;
 80090cc:	e0a6      	b.n	800921c <RadioSetTxGenericConfig+0x430>
 80090ce:	bf00      	nop
 80090d0:	20000288 	.word	0x20000288
 80090d4:	20000284 	.word	0x20000284
 80090d8:	200002e4 	.word	0x200002e4
 80090dc:	200002c0 	.word	0x200002c0
 80090e0:	20000296 	.word	0x20000296
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80090e4:	4b59      	ldr	r3, [pc, #356]	; (800924c <RadioSetTxGenericConfig+0x460>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	4b56      	ldr	r3, [pc, #344]	; (800924c <RadioSetTxGenericConfig+0x460>)
 80090f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	785a      	ldrb	r2, [r3, #1]
 80090fa:	4b54      	ldr	r3, [pc, #336]	; (800924c <RadioSetTxGenericConfig+0x460>)
 80090fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	789a      	ldrb	r2, [r3, #2]
 8009104:	4b51      	ldr	r3, [pc, #324]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009106:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	78db      	ldrb	r3, [r3, #3]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d010      	beq.n	8009134 <RadioSetTxGenericConfig+0x348>
 8009112:	2b02      	cmp	r3, #2
 8009114:	dc20      	bgt.n	8009158 <RadioSetTxGenericConfig+0x36c>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <RadioSetTxGenericConfig+0x334>
 800911a:	2b01      	cmp	r3, #1
 800911c:	d005      	beq.n	800912a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800911e:	e01b      	b.n	8009158 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009120:	4b4a      	ldr	r3, [pc, #296]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009128:	e017      	b.n	800915a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800912a:	4b48      	ldr	r3, [pc, #288]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009132:	e012      	b.n	800915a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2b0b      	cmp	r3, #11
 800913a:	d003      	beq.n	8009144 <RadioSetTxGenericConfig+0x358>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b0c      	cmp	r3, #12
 8009142:	d104      	bne.n	800914e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009144:	4b41      	ldr	r3, [pc, #260]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800914c:	e005      	b.n	800915a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800914e:	4b3f      	ldr	r3, [pc, #252]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009156:	e000      	b.n	800915a <RadioSetTxGenericConfig+0x36e>
            break;
 8009158:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800915a:	4b3c      	ldr	r3, [pc, #240]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800915c:	2201      	movs	r2, #1
 800915e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	889a      	ldrh	r2, [r3, #4]
 8009164:	4b39      	ldr	r3, [pc, #228]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009166:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	799a      	ldrb	r2, [r3, #6]
 800916c:	4b37      	ldr	r3, [pc, #220]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800916e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	79da      	ldrb	r2, [r3, #7]
 8009174:	4b35      	ldr	r3, [pc, #212]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009176:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	7a1a      	ldrb	r2, [r3, #8]
 800917e:	4b33      	ldr	r3, [pc, #204]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009184:	f7fe ff85 	bl	8008092 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009188:	2001      	movs	r0, #1
 800918a:	f7fe f919 	bl	80073c0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800918e:	4830      	ldr	r0, [pc, #192]	; (8009250 <RadioSetTxGenericConfig+0x464>)
 8009190:	f000 fd76 	bl	8009c80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009194:	482f      	ldr	r0, [pc, #188]	; (8009254 <RadioSetTxGenericConfig+0x468>)
 8009196:	f000 fe45 	bl	8009e24 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800919a:	4b2c      	ldr	r3, [pc, #176]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800919c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a0:	2b06      	cmp	r3, #6
 80091a2:	d10d      	bne.n	80091c0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80091a4:	f640 0089 	movw	r0, #2185	; 0x889
 80091a8:	f000 ff98 	bl	800a0dc <SUBGRF_ReadRegister>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f023 0304 	bic.w	r3, r3, #4
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	4619      	mov	r1, r3
 80091b6:	f640 0089 	movw	r0, #2185	; 0x889
 80091ba:	f000 ff7b 	bl	800a0b4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 80091be:	e02d      	b.n	800921c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80091c0:	f640 0089 	movw	r0, #2185	; 0x889
 80091c4:	f000 ff8a 	bl	800a0dc <SUBGRF_ReadRegister>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f043 0304 	orr.w	r3, r3, #4
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	f640 0089 	movw	r0, #2185	; 0x889
 80091d6:	f000 ff6d 	bl	800a0b4 <SUBGRF_WriteRegister>
        break;
 80091da:	e01f      	b.n	800921c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d004      	beq.n	80091ee <RadioSetTxGenericConfig+0x402>
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ec:	d902      	bls.n	80091f4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
 80091f2:	e027      	b.n	8009244 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80091f4:	2003      	movs	r0, #3
 80091f6:	f7fe f8e3 	bl	80073c0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <RadioSetTxGenericConfig+0x460>)
 80091fc:	2202      	movs	r2, #2
 80091fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a11      	ldr	r2, [pc, #68]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009208:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800920a:	4b10      	ldr	r3, [pc, #64]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800920c:	2216      	movs	r2, #22
 800920e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009212:	480f      	ldr	r0, [pc, #60]	; (8009250 <RadioSetTxGenericConfig+0x464>)
 8009214:	f000 fd34 	bl	8009c80 <SUBGRF_SetModulationParams>
        break;
 8009218:	e000      	b.n	800921c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800921a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800921c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009220:	4618      	mov	r0, r3
 8009222:	f001 f863 	bl	800a2ec <SUBGRF_SetRfTxPower>
 8009226:	4603      	mov	r3, r0
 8009228:	461a      	mov	r2, r3
 800922a:	4b08      	ldr	r3, [pc, #32]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800922c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009230:	4b06      	ldr	r3, [pc, #24]	; (800924c <RadioSetTxGenericConfig+0x460>)
 8009232:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fa37 	bl	800a6aa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800923c:	4a03      	ldr	r2, [pc, #12]	; (800924c <RadioSetTxGenericConfig+0x460>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6053      	str	r3, [r2, #4]
    return 0;
 8009242:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009244:	4618      	mov	r0, r3
 8009246:	3738      	adds	r7, #56	; 0x38
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000288 	.word	0x20000288
 8009250:	200002c0 	.word	0x200002c0
 8009254:	20000296 	.word	0x20000296

08009258 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009260:	2301      	movs	r3, #1
 8009262:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800927a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr
	...

08009288 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009296:	4a1d      	ldr	r2, [pc, #116]	; (800930c <SUBGRF_Init+0x84>)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800929c:	f7f7 fba2 	bl	80009e4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80092a0:	2002      	movs	r0, #2
 80092a2:	f001 f8ff 	bl	800a4a4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80092a6:	4b1a      	ldr	r3, [pc, #104]	; (8009310 <SUBGRF_Init+0x88>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80092ac:	2000      	movs	r0, #0
 80092ae:	f000 f97d 	bl	80095ac <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80092b2:	f001 fc55 	bl	800ab60 <RBI_IsTCXO>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10e      	bne.n	80092da <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80092bc:	2140      	movs	r1, #64	; 0x40
 80092be:	2001      	movs	r0, #1
 80092c0:	f000 fb82 	bl	80099c8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80092c4:	2100      	movs	r1, #0
 80092c6:	f640 1011 	movw	r0, #2321	; 0x911
 80092ca:	f000 fef3 	bl	800a0b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80092ce:	237f      	movs	r3, #127	; 0x7f
 80092d0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80092d2:	7b38      	ldrb	r0, [r7, #12]
 80092d4:	f000 fa8b 	bl	80097ee <SUBGRF_Calibrate>
 80092d8:	e009      	b.n	80092ee <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092da:	2120      	movs	r1, #32
 80092dc:	f640 1011 	movw	r0, #2321	; 0x911
 80092e0:	f000 fee8 	bl	800a0b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80092e4:	2120      	movs	r1, #32
 80092e6:	f640 1012 	movw	r0, #2322	; 0x912
 80092ea:	f000 fee3 	bl	800a0b4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80092ee:	210e      	movs	r1, #14
 80092f0:	f640 101f 	movw	r0, #2335	; 0x91f
 80092f4:	f000 fede 	bl	800a0b4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80092f8:	f001 fc16 	bl	800ab28 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <SUBGRF_Init+0x8c>)
 80092fe:	2201      	movs	r2, #1
 8009300:	701a      	strb	r2, [r3, #0]
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000320 	.word	0x20000320
 8009310:	2000031c 	.word	0x2000031c
 8009314:	20000314 	.word	0x20000314

08009318 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <SUBGRF_GetOperatingMode+0x10>)
 800931e:	781b      	ldrb	r3, [r3, #0]
}
 8009320:	4618      	mov	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr
 8009328:	20000314 	.word	0x20000314

0800932c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	461a      	mov	r2, r3
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	2000      	movs	r0, #0
 8009340:	f000 ff24 	bl	800a18c <SUBGRF_WriteBuffer>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	4613      	mov	r3, r2
 8009358:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800935e:	f107 0317 	add.w	r3, r7, #23
 8009362:	4619      	mov	r1, r3
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 fe27 	bl	8009fb8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	79fa      	ldrb	r2, [r7, #7]
 8009370:	429a      	cmp	r2, r3
 8009372:	d201      	bcs.n	8009378 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009374:	2301      	movs	r3, #1
 8009376:	e007      	b.n	8009388 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009378:	7df8      	ldrb	r0, [r7, #23]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	68f9      	ldr	r1, [r7, #12]
 8009382:	f000 ff25 	bl	800a1d0 <SUBGRF_ReadBuffer>

    return 0;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	460b      	mov	r3, r1
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	4619      	mov	r1, r3
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f7ff ffc2 	bl	800932c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f91b 	bl	80095e4 <SUBGRF_SetTx>
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80093be:	2208      	movs	r2, #8
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80093c6:	f000 fe9d 	bl	800a104 <SUBGRF_WriteRegisters>
    return 0;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	0a1b      	lsrs	r3, r3, #8
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80093e8:	88fb      	ldrh	r3, [r7, #6]
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80093ee:	f000 fb6f 	bl	8009ad0 <SUBGRF_GetPacketType>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d108      	bne.n	800940a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80093f8:	f107 030c 	add.w	r3, r7, #12
 80093fc:	2202      	movs	r2, #2
 80093fe:	4619      	mov	r1, r3
 8009400:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009404:	f000 fe7e 	bl	800a104 <SUBGRF_WriteRegisters>
            break;
 8009408:	e000      	b.n	800940c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800940a:	bf00      	nop
    }
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	b29b      	uxth	r3, r3
 8009424:	b2db      	uxtb	r3, r3
 8009426:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800942e:	f000 fb4f 	bl	8009ad0 <SUBGRF_GetPacketType>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d108      	bne.n	800944a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009438:	f107 030c 	add.w	r3, r7, #12
 800943c:	2202      	movs	r2, #2
 800943e:	4619      	mov	r1, r3
 8009440:	f240 60be 	movw	r0, #1726	; 0x6be
 8009444:	f000 fe5e 	bl	800a104 <SUBGRF_WriteRegisters>
            break;
 8009448:	e000      	b.n	800944c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800944a:	bf00      	nop
    }
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009462:	f000 fb35 	bl	8009ad0 <SUBGRF_GetPacketType>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d121      	bne.n	80094b0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800946c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009470:	f000 fe34 	bl	800a0dc <SUBGRF_ReadRegister>
 8009474:	4603      	mov	r3, r0
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800947c:	88fb      	ldrh	r3, [r7, #6]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	b29b      	uxth	r3, r3
 8009482:	b25b      	sxtb	r3, r3
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	b25a      	sxtb	r2, r3
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800948e:	4313      	orrs	r3, r2
 8009490:	b25b      	sxtb	r3, r3
 8009492:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4619      	mov	r1, r3
 8009498:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800949c:	f000 fe0a 	bl	800a0b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	4619      	mov	r1, r3
 80094a6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80094aa:	f000 fe03 	bl	800a0b4 <SUBGRF_WriteRegister>
            break;
 80094ae:	e000      	b.n	80094b2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80094b0:	bf00      	nop
    }
}
 80094b2:	bf00      	nop
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80094cc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094d0:	f000 fe04 	bl	800a0dc <SUBGRF_ReadRegister>
 80094d4:	4603      	mov	r3, r0
 80094d6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	4619      	mov	r1, r3
 80094e2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80094e6:	f000 fde5 	bl	800a0b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80094ea:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80094ee:	f000 fdf5 	bl	800a0dc <SUBGRF_ReadRegister>
 80094f2:	4603      	mov	r3, r0
 80094f4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80094f6:	79bb      	ldrb	r3, [r7, #6]
 80094f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	4619      	mov	r1, r3
 8009500:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009504:	f000 fdd6 	bl	800a0b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009508:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800950c:	f000 f88a 	bl	8009624 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009510:	463b      	mov	r3, r7
 8009512:	2204      	movs	r2, #4
 8009514:	4619      	mov	r1, r3
 8009516:	f640 0019 	movw	r0, #2073	; 0x819
 800951a:	f000 fe15 	bl	800a148 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800951e:	2000      	movs	r0, #0
 8009520:	f000 f844 	bl	80095ac <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	4619      	mov	r1, r3
 8009528:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800952c:	f000 fdc2 	bl	800a0b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009530:	79bb      	ldrb	r3, [r7, #6]
 8009532:	4619      	mov	r1, r3
 8009534:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8009538:	f000 fdbc 	bl	800a0b4 <SUBGRF_WriteRegister>

    return number;
 800953c:	683b      	ldr	r3, [r7, #0]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8009550:	2000      	movs	r0, #0
 8009552:	f001 faf0 	bl	800ab36 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009556:	2002      	movs	r0, #2
 8009558:	f000 ffa4 	bl	800a4a4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800955c:	793b      	ldrb	r3, [r7, #4]
 800955e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009562:	b2db      	uxtb	r3, r3
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009568:	793b      	ldrb	r3, [r7, #4]
 800956a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800956e:	b2db      	uxtb	r3, r3
 8009570:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009572:	b25b      	sxtb	r3, r3
 8009574:	4313      	orrs	r3, r2
 8009576:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009578:	793b      	ldrb	r3, [r7, #4]
 800957a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009582:	4313      	orrs	r3, r2
 8009584:	b25b      	sxtb	r3, r3
 8009586:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009588:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800958a:	f107 030f 	add.w	r3, r7, #15
 800958e:	2201      	movs	r2, #1
 8009590:	4619      	mov	r1, r3
 8009592:	2084      	movs	r0, #132	; 0x84
 8009594:	f000 fe3e 	bl	800a214 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8009598:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <SUBGRF_SetSleep+0x60>)
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000314 	.word	0x20000314

080095ac <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80095b6:	1dfb      	adds	r3, r7, #7
 80095b8:	2201      	movs	r2, #1
 80095ba:	4619      	mov	r1, r3
 80095bc:	2080      	movs	r0, #128	; 0x80
 80095be:	f000 fe29 	bl	800a214 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d103      	bne.n	80095d0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <SUBGRF_SetStandby+0x34>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80095ce:	e002      	b.n	80095d6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <SUBGRF_SetStandby+0x34>)
 80095d2:	2202      	movs	r2, #2
 80095d4:	701a      	strb	r2, [r3, #0]
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000314 	.word	0x20000314

080095e4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <SUBGRF_SetTx+0x3c>)
 80095ee:	2204      	movs	r2, #4
 80095f0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0c1b      	lsrs	r3, r3, #16
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0a1b      	lsrs	r3, r3, #8
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	b2db      	uxtb	r3, r3
 8009606:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8009608:	f107 030c 	add.w	r3, r7, #12
 800960c:	2203      	movs	r2, #3
 800960e:	4619      	mov	r1, r3
 8009610:	2083      	movs	r0, #131	; 0x83
 8009612:	f000 fdff 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000314 	.word	0x20000314

08009624 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800962c:	4b0c      	ldr	r3, [pc, #48]	; (8009660 <SUBGRF_SetRx+0x3c>)
 800962e:	2205      	movs	r2, #5
 8009630:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	0c1b      	lsrs	r3, r3, #16
 8009636:	b2db      	uxtb	r3, r3
 8009638:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0a1b      	lsrs	r3, r3, #8
 800963e:	b2db      	uxtb	r3, r3
 8009640:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	2203      	movs	r2, #3
 800964e:	4619      	mov	r1, r3
 8009650:	2082      	movs	r0, #130	; 0x82
 8009652:	f000 fddf 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20000314 	.word	0x20000314

08009664 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <SUBGRF_SetRxBoosted+0x44>)
 800966e:	2205      	movs	r2, #5
 8009670:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009672:	2197      	movs	r1, #151	; 0x97
 8009674:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009678:	f000 fd1c 	bl	800a0b4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b2db      	uxtb	r3, r3
 8009682:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b2db      	uxtb	r3, r3
 800968a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009692:	f107 030c 	add.w	r3, r7, #12
 8009696:	2203      	movs	r2, #3
 8009698:	4619      	mov	r1, r3
 800969a:	2082      	movs	r0, #130	; 0x82
 800969c:	f000 fdba 	bl	800a214 <SUBGRF_WriteCommand>
}
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	20000314 	.word	0x20000314

080096ac <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	0c1b      	lsrs	r3, r3, #16
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	0a1b      	lsrs	r3, r3, #8
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	0c1b      	lsrs	r3, r3, #16
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	0a1b      	lsrs	r3, r3, #8
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80096e2:	f107 0308 	add.w	r3, r7, #8
 80096e6:	2206      	movs	r2, #6
 80096e8:	4619      	mov	r1, r3
 80096ea:	2094      	movs	r0, #148	; 0x94
 80096ec:	f000 fd92 	bl	800a214 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <SUBGRF_SetRxDutyCycle+0x54>)
 80096f2:	2206      	movs	r2, #6
 80096f4:	701a      	strb	r2, [r3, #0]
}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000314 	.word	0x20000314

08009704 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009708:	2200      	movs	r2, #0
 800970a:	2100      	movs	r1, #0
 800970c:	20c5      	movs	r0, #197	; 0xc5
 800970e:	f000 fd81 	bl	800a214 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009712:	4b02      	ldr	r3, [pc, #8]	; (800971c <SUBGRF_SetCad+0x18>)
 8009714:	2207      	movs	r2, #7
 8009716:	701a      	strb	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000314 	.word	0x20000314

08009720 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	20d1      	movs	r0, #209	; 0xd1
 800972a:	f000 fd73 	bl	800a214 <SUBGRF_WriteCommand>
}
 800972e:	bf00      	nop
 8009730:	bd80      	pop	{r7, pc}

08009732 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8009732:	b580      	push	{r7, lr}
 8009734:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	20d2      	movs	r0, #210	; 0xd2
 800973c:	f000 fd6a 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}

08009744 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800974e:	1dfb      	adds	r3, r7, #7
 8009750:	2201      	movs	r2, #1
 8009752:	4619      	mov	r1, r3
 8009754:	209f      	movs	r0, #159	; 0x9f
 8009756:	f000 fd5d 	bl	800a214 <SUBGRF_WriteCommand>
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	4603      	mov	r3, r0
 800976a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	2201      	movs	r2, #1
 8009770:	4619      	mov	r1, r3
 8009772:	20a0      	movs	r0, #160	; 0xa0
 8009774:	f000 fd4e 	bl	800a214 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	2b3f      	cmp	r3, #63	; 0x3f
 800977c:	d91c      	bls.n	80097b8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800977e:	79fb      	ldrb	r3, [r7, #7]
 8009780:	085b      	lsrs	r3, r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800978c:	e005      	b.n	800979a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	089b      	lsrs	r3, r3, #2
 8009792:	73fb      	strb	r3, [r7, #15]
            exp++;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	3301      	adds	r3, #1
 8009798:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b1f      	cmp	r3, #31
 800979e:	d8f6      	bhi.n	800978e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	4413      	add	r3, r2
 80097aa:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80097ac:	7b7b      	ldrb	r3, [r7, #13]
 80097ae:	4619      	mov	r1, r3
 80097b0:	f240 7006 	movw	r0, #1798	; 0x706
 80097b4:	f000 fc7e 	bl	800a0b4 <SUBGRF_WriteRegister>
    }
}
 80097b8:	bf00      	nop
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80097c6:	f001 f9d2 	bl	800ab6e <RBI_IsDCDC>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d102      	bne.n	80097d6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80097d0:	2301      	movs	r3, #1
 80097d2:	71fb      	strb	r3, [r7, #7]
 80097d4:	e001      	b.n	80097da <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80097d6:	2300      	movs	r3, #0
 80097d8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80097da:	1dfb      	adds	r3, r7, #7
 80097dc:	2201      	movs	r2, #1
 80097de:	4619      	mov	r1, r3
 80097e0:	2096      	movs	r0, #150	; 0x96
 80097e2:	f000 fd17 	bl	800a214 <SUBGRF_WriteCommand>
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80097f6:	793b      	ldrb	r3, [r7, #4]
 80097f8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	019b      	lsls	r3, r3, #6
 8009800:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009802:	793b      	ldrb	r3, [r7, #4]
 8009804:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009808:	b2db      	uxtb	r3, r3
 800980a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800980c:	b25b      	sxtb	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009812:	793b      	ldrb	r3, [r7, #4]
 8009814:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009818:	b2db      	uxtb	r3, r3
 800981a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800981c:	b25b      	sxtb	r3, r3
 800981e:	4313      	orrs	r3, r2
 8009820:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009822:	793b      	ldrb	r3, [r7, #4]
 8009824:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800982c:	b25b      	sxtb	r3, r3
 800982e:	4313      	orrs	r3, r2
 8009830:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009832:	793b      	ldrb	r3, [r7, #4]
 8009834:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009838:	b2db      	uxtb	r3, r3
 800983a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800983c:	b25b      	sxtb	r3, r3
 800983e:	4313      	orrs	r3, r2
 8009840:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009842:	793b      	ldrb	r3, [r7, #4]
 8009844:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800984c:	b25b      	sxtb	r3, r3
 800984e:	4313      	orrs	r3, r2
 8009850:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009852:	793b      	ldrb	r3, [r7, #4]
 8009854:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009858:	b2db      	uxtb	r3, r3
 800985a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800985c:	4313      	orrs	r3, r2
 800985e:	b25b      	sxtb	r3, r3
 8009860:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009862:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009864:	f107 030f 	add.w	r3, r7, #15
 8009868:	2201      	movs	r2, #1
 800986a:	4619      	mov	r1, r3
 800986c:	2089      	movs	r0, #137	; 0x89
 800986e:	f000 fcd1 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a1d      	ldr	r2, [pc, #116]	; (80098fc <SUBGRF_CalibrateImage+0x80>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d904      	bls.n	8009896 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800988c:	23e1      	movs	r3, #225	; 0xe1
 800988e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009890:	23e9      	movs	r3, #233	; 0xe9
 8009892:	737b      	strb	r3, [r7, #13]
 8009894:	e027      	b.n	80098e6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a19      	ldr	r2, [pc, #100]	; (8009900 <SUBGRF_CalibrateImage+0x84>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d904      	bls.n	80098a8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800989e:	23d7      	movs	r3, #215	; 0xd7
 80098a0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80098a2:	23db      	movs	r3, #219	; 0xdb
 80098a4:	737b      	strb	r3, [r7, #13]
 80098a6:	e01e      	b.n	80098e6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a16      	ldr	r2, [pc, #88]	; (8009904 <SUBGRF_CalibrateImage+0x88>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d904      	bls.n	80098ba <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80098b0:	23c1      	movs	r3, #193	; 0xc1
 80098b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80098b4:	23c5      	movs	r3, #197	; 0xc5
 80098b6:	737b      	strb	r3, [r7, #13]
 80098b8:	e015      	b.n	80098e6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a12      	ldr	r2, [pc, #72]	; (8009908 <SUBGRF_CalibrateImage+0x8c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d904      	bls.n	80098cc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80098c2:	2375      	movs	r3, #117	; 0x75
 80098c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80098c6:	2381      	movs	r3, #129	; 0x81
 80098c8:	737b      	strb	r3, [r7, #13]
 80098ca:	e00c      	b.n	80098e6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a0f      	ldr	r2, [pc, #60]	; (800990c <SUBGRF_CalibrateImage+0x90>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d904      	bls.n	80098de <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80098d4:	236b      	movs	r3, #107	; 0x6b
 80098d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80098d8:	236f      	movs	r3, #111	; 0x6f
 80098da:	737b      	strb	r3, [r7, #13]
 80098dc:	e003      	b.n	80098e6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80098de:	2329      	movs	r3, #41	; 0x29
 80098e0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80098e2:	232b      	movs	r3, #43	; 0x2b
 80098e4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80098e6:	f107 030c 	add.w	r3, r7, #12
 80098ea:	2202      	movs	r2, #2
 80098ec:	4619      	mov	r1, r3
 80098ee:	2098      	movs	r0, #152	; 0x98
 80098f0:	f000 fc90 	bl	800a214 <SUBGRF_WriteCommand>
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	35a4e900 	.word	0x35a4e900
 8009900:	32a9f880 	.word	0x32a9f880
 8009904:	2de54480 	.word	0x2de54480
 8009908:	1b6b0b00 	.word	0x1b6b0b00
 800990c:	1954fc40 	.word	0x1954fc40

08009910 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	461a      	mov	r2, r3
 800991e:	4623      	mov	r3, r4
 8009920:	71fb      	strb	r3, [r7, #7]
 8009922:	4603      	mov	r3, r0
 8009924:	71bb      	strb	r3, [r7, #6]
 8009926:	460b      	mov	r3, r1
 8009928:	717b      	strb	r3, [r7, #5]
 800992a:	4613      	mov	r3, r2
 800992c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8009932:	79bb      	ldrb	r3, [r7, #6]
 8009934:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8009936:	797b      	ldrb	r3, [r7, #5]
 8009938:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800993a:	793b      	ldrb	r3, [r7, #4]
 800993c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800993e:	f107 030c 	add.w	r3, r7, #12
 8009942:	2204      	movs	r2, #4
 8009944:	4619      	mov	r1, r3
 8009946:	2095      	movs	r0, #149	; 0x95
 8009948:	f000 fc64 	bl	800a214 <SUBGRF_WriteCommand>
}
 800994c:	bf00      	nop
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	bd90      	pop	{r4, r7, pc}

08009954 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8009954:	b590      	push	{r4, r7, lr}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	4611      	mov	r1, r2
 8009960:	461a      	mov	r2, r3
 8009962:	4623      	mov	r3, r4
 8009964:	80fb      	strh	r3, [r7, #6]
 8009966:	4603      	mov	r3, r0
 8009968:	80bb      	strh	r3, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	807b      	strh	r3, [r7, #2]
 800996e:	4613      	mov	r3, r2
 8009970:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	0a1b      	lsrs	r3, r3, #8
 8009976:	b29b      	uxth	r3, r3
 8009978:	b2db      	uxtb	r3, r3
 800997a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009982:	88bb      	ldrh	r3, [r7, #4]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	b29b      	uxth	r3, r3
 8009988:	b2db      	uxtb	r3, r3
 800998a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800998c:	88bb      	ldrh	r3, [r7, #4]
 800998e:	b2db      	uxtb	r3, r3
 8009990:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b29b      	uxth	r3, r3
 8009998:	b2db      	uxtb	r3, r3
 800999a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800999c:	887b      	ldrh	r3, [r7, #2]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80099a2:	883b      	ldrh	r3, [r7, #0]
 80099a4:	0a1b      	lsrs	r3, r3, #8
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80099ac:	883b      	ldrh	r3, [r7, #0]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	2208      	movs	r2, #8
 80099b8:	4619      	mov	r1, r3
 80099ba:	2008      	movs	r0, #8
 80099bc:	f000 fc2a 	bl	800a214 <SUBGRF_WriteCommand>
}
 80099c0:	bf00      	nop
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd90      	pop	{r4, r7, pc}

080099c8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	6039      	str	r1, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	0a1b      	lsrs	r3, r3, #8
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	2204      	movs	r2, #4
 80099fa:	4619      	mov	r1, r3
 80099fc:	2097      	movs	r0, #151	; 0x97
 80099fe:	f000 fc09 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
	...

08009a0c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8009a0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009a1a:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <SUBGRF_SetRfFrequency+0x84>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	f083 0301 	eor.w	r3, r3, #1
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ff27 	bl	800987c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009a2e:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <SUBGRF_SetRfFrequency+0x84>)
 8009a30:	2201      	movs	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	461c      	mov	r4, r3
 8009a3a:	4615      	mov	r5, r2
 8009a3c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009a40:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009a44:	4a13      	ldr	r2, [pc, #76]	; (8009a94 <SUBGRF_SetRfFrequency+0x88>)
 8009a46:	f04f 0300 	mov.w	r3, #0
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fb9b 	bl	8000188 <__aeabi_uldivmod>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4613      	mov	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	0e1b      	lsrs	r3, r3, #24
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	0c1b      	lsrs	r3, r3, #16
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	0a1b      	lsrs	r3, r3, #8
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	2204      	movs	r2, #4
 8009a7e:	4619      	mov	r1, r3
 8009a80:	2086      	movs	r0, #134	; 0x86
 8009a82:	f000 fbc7 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a90:	2000031c 	.word	0x2000031c
 8009a94:	01e84800 	.word	0x01e84800

08009a98 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8009aa2:	79fa      	ldrb	r2, [r7, #7]
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <SUBGRF_SetPacketType+0x34>)
 8009aa6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d104      	bne.n	8009ab8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009aae:	2100      	movs	r1, #0
 8009ab0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009ab4:	f000 fafe 	bl	800a0b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009ab8:	1dfb      	adds	r3, r7, #7
 8009aba:	2201      	movs	r2, #1
 8009abc:	4619      	mov	r1, r3
 8009abe:	208a      	movs	r0, #138	; 0x8a
 8009ac0:	f000 fba8 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	20000315 	.word	0x20000315

08009ad0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
    return PacketType;
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <SUBGRF_GetPacketType+0x10>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr
 8009ae0:	20000315 	.word	0x20000315

08009ae4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	71fb      	strb	r3, [r7, #7]
 8009aee:	460b      	mov	r3, r1
 8009af0:	71bb      	strb	r3, [r7, #6]
 8009af2:	4613      	mov	r3, r2
 8009af4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d149      	bne.n	8009b90 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009afc:	2000      	movs	r0, #0
 8009afe:	f001 f83d 	bl	800ab7c <RBI_GetRFOMaxPowerConfig>
 8009b02:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8009b04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	da01      	bge.n	8009b12 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b0e      	cmp	r3, #14
 8009b16:	d10e      	bne.n	8009b36 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009b18:	2301      	movs	r3, #1
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2004      	movs	r0, #4
 8009b20:	f7ff fef6 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b24:	79ba      	ldrb	r2, [r7, #6]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	330e      	adds	r3, #14
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	71bb      	strb	r3, [r7, #6]
 8009b34:	e01f      	b.n	8009b76 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2b0a      	cmp	r3, #10
 8009b3a:	d10e      	bne.n	8009b5a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	2201      	movs	r2, #1
 8009b40:	2100      	movs	r1, #0
 8009b42:	2001      	movs	r0, #1
 8009b44:	f7ff fee4 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009b48:	79ba      	ldrb	r2, [r7, #6]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	330d      	adds	r3, #13
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	71bb      	strb	r3, [r7, #6]
 8009b58:	e00d      	b.n	8009b76 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	2100      	movs	r1, #0
 8009b60:	2007      	movs	r0, #7
 8009b62:	f7ff fed5 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009b66:	79ba      	ldrb	r2, [r7, #6]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	330e      	adds	r3, #14
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8009b76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009b7a:	f113 0f11 	cmn.w	r3, #17
 8009b7e:	da01      	bge.n	8009b84 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8009b80:	23ef      	movs	r3, #239	; 0xef
 8009b82:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009b84:	2118      	movs	r1, #24
 8009b86:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009b8a:	f000 fa93 	bl	800a0b4 <SUBGRF_WriteRegister>
 8009b8e:	e067      	b.n	8009c60 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009b90:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009b94:	f000 faa2 	bl	800a0dc <SUBGRF_ReadRegister>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f043 031e 	orr.w	r3, r3, #30
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8009ba6:	f000 fa85 	bl	800a0b4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009baa:	2001      	movs	r0, #1
 8009bac:	f000 ffe6 	bl	800ab7c <RBI_GetRFOMaxPowerConfig>
 8009bb0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8009bb2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	da01      	bge.n	8009bc0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b14      	cmp	r3, #20
 8009bc4:	d10e      	bne.n	8009be4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2105      	movs	r1, #5
 8009bcc:	2003      	movs	r0, #3
 8009bce:	f7ff fe9f 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bd2:	79ba      	ldrb	r2, [r7, #6]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	3316      	adds	r3, #22
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	71bb      	strb	r3, [r7, #6]
 8009be2:	e031      	b.n	8009c48 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b11      	cmp	r3, #17
 8009be8:	d10e      	bne.n	8009c08 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009bea:	2301      	movs	r3, #1
 8009bec:	2200      	movs	r2, #0
 8009bee:	2103      	movs	r1, #3
 8009bf0:	2002      	movs	r0, #2
 8009bf2:	f7ff fe8d 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009bf6:	79ba      	ldrb	r2, [r7, #6]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	3316      	adds	r3, #22
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	71bb      	strb	r3, [r7, #6]
 8009c06:	e01f      	b.n	8009c48 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b0e      	cmp	r3, #14
 8009c0c:	d10e      	bne.n	8009c2c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009c0e:	2301      	movs	r3, #1
 8009c10:	2200      	movs	r2, #0
 8009c12:	2102      	movs	r1, #2
 8009c14:	2002      	movs	r0, #2
 8009c16:	f7ff fe7b 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009c1a:	79ba      	ldrb	r2, [r7, #6]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	330e      	adds	r3, #14
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	71bb      	strb	r3, [r7, #6]
 8009c2a:	e00d      	b.n	8009c48 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2107      	movs	r1, #7
 8009c32:	2004      	movs	r0, #4
 8009c34:	f7ff fe6c 	bl	8009910 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009c38:	79ba      	ldrb	r2, [r7, #6]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	3316      	adds	r3, #22
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8009c48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009c4c:	f113 0f09 	cmn.w	r3, #9
 8009c50:	da01      	bge.n	8009c56 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8009c52:	23f7      	movs	r3, #247	; 0xf7
 8009c54:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009c56:	2138      	movs	r1, #56	; 0x38
 8009c58:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009c5c:	f000 fa2a 	bl	800a0b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8009c60:	79bb      	ldrb	r3, [r7, #6]
 8009c62:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8009c64:	797b      	ldrb	r3, [r7, #5]
 8009c66:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	208e      	movs	r0, #142	; 0x8e
 8009c72:	f000 facf 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
	...

08009c80 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c84:	b086      	sub	sp, #24
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009c8e:	4a61      	ldr	r2, [pc, #388]	; (8009e14 <SUBGRF_SetModulationParams+0x194>)
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c98:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	4b5d      	ldr	r3, [pc, #372]	; (8009e18 <SUBGRF_SetModulationParams+0x198>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d004      	beq.n	8009cb2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff fef3 	bl	8009a98 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	f200 80a5 	bhi.w	8009e06 <SUBGRF_SetModulationParams+0x186>
 8009cbc:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <SUBGRF_SetModulationParams+0x44>)
 8009cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc2:	bf00      	nop
 8009cc4:	08009cd5 	.word	0x08009cd5
 8009cc8:	08009d95 	.word	0x08009d95
 8009ccc:	08009d57 	.word	0x08009d57
 8009cd0:	08009dc3 	.word	0x08009dc3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4a4f      	ldr	r2, [pc, #316]	; (8009e1c <SUBGRF_SetModulationParams+0x19c>)
 8009cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	0c1b      	lsrs	r3, r3, #16
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7b1b      	ldrb	r3, [r3, #12]
 8009cfe:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7b5b      	ldrb	r3, [r3, #13]
 8009d04:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	461c      	mov	r4, r3
 8009d0e:	4615      	mov	r5, r2
 8009d10:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8009d14:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8009d18:	4a41      	ldr	r2, [pc, #260]	; (8009e20 <SUBGRF_SetModulationParams+0x1a0>)
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	4640      	mov	r0, r8
 8009d20:	4649      	mov	r1, r9
 8009d22:	f7f6 fa31 	bl	8000188 <__aeabi_uldivmod>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d44:	7cfb      	ldrb	r3, [r7, #19]
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	f107 0308 	add.w	r3, r7, #8
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	208b      	movs	r0, #139	; 0x8b
 8009d50:	f000 fa60 	bl	800a214 <SUBGRF_WriteCommand>
        break;
 8009d54:	e058      	b.n	8009e08 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8009d56:	2304      	movs	r3, #4
 8009d58:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	4a2f      	ldr	r2, [pc, #188]	; (8009e1c <SUBGRF_SetModulationParams+0x19c>)
 8009d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	0c1b      	lsrs	r3, r3, #16
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7d1b      	ldrb	r3, [r3, #20]
 8009d80:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009d82:	7cfb      	ldrb	r3, [r7, #19]
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	208b      	movs	r0, #139	; 0x8b
 8009d8e:	f000 fa41 	bl	800a214 <SUBGRF_WriteCommand>
        break;
 8009d92:	e039      	b.n	8009e08 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8009d94:	2304      	movs	r3, #4
 8009d96:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7e1b      	ldrb	r3, [r3, #24]
 8009d9c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7e5b      	ldrb	r3, [r3, #25]
 8009da2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7e9b      	ldrb	r3, [r3, #26]
 8009da8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7edb      	ldrb	r3, [r3, #27]
 8009dae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009db0:	7cfb      	ldrb	r3, [r7, #19]
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4619      	mov	r1, r3
 8009dba:	208b      	movs	r0, #139	; 0x8b
 8009dbc:	f000 fa2a 	bl	800a214 <SUBGRF_WriteCommand>

        break;
 8009dc0:	e022      	b.n	8009e08 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009dc2:	2305      	movs	r3, #5
 8009dc4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	4a14      	ldr	r2, [pc, #80]	; (8009e1c <SUBGRF_SetModulationParams+0x19c>)
 8009dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	0c1b      	lsrs	r3, r3, #16
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	0a1b      	lsrs	r3, r3, #8
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	7b1b      	ldrb	r3, [r3, #12]
 8009dec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7b5b      	ldrb	r3, [r3, #13]
 8009df2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009df4:	7cfb      	ldrb	r3, [r7, #19]
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	208b      	movs	r0, #139	; 0x8b
 8009e00:	f000 fa08 	bl	800a214 <SUBGRF_WriteCommand>
        break;
 8009e04:	e000      	b.n	8009e08 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8009e06:	bf00      	nop
    }
}
 8009e08:	bf00      	nop
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009e12:	bf00      	nop
 8009e14:	0800c1a0 	.word	0x0800c1a0
 8009e18:	20000315 	.word	0x20000315
 8009e1c:	3d090000 	.word	0x3d090000
 8009e20:	01e84800 	.word	0x01e84800

08009e24 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009e30:	4a48      	ldr	r2, [pc, #288]	; (8009f54 <SUBGRF_SetPacketParams+0x130>)
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e38:	c303      	stmia	r3!, {r0, r1}
 8009e3a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	781a      	ldrb	r2, [r3, #0]
 8009e40:	4b45      	ldr	r3, [pc, #276]	; (8009f58 <SUBGRF_SetPacketParams+0x134>)
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d004      	beq.n	8009e52 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fe23 	bl	8009a98 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d878      	bhi.n	8009f4c <SUBGRF_SetPacketParams+0x128>
 8009e5a:	a201      	add	r2, pc, #4	; (adr r2, 8009e60 <SUBGRF_SetPacketParams+0x3c>)
 8009e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009f01 	.word	0x08009f01
 8009e68:	08009ef5 	.word	0x08009ef5
 8009e6c:	08009e71 	.word	0x08009e71
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7a5b      	ldrb	r3, [r3, #9]
 8009e74:	2bf1      	cmp	r3, #241	; 0xf1
 8009e76:	d10a      	bne.n	8009e8e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009e78:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e7c:	f7ff faaa 	bl	80093d4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8009e80:	f248 0005 	movw	r0, #32773	; 0x8005
 8009e84:	f7ff fac6 	bl	8009414 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	75bb      	strb	r3, [r7, #22]
 8009e8c:	e011      	b.n	8009eb2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	7a5b      	ldrb	r3, [r3, #9]
 8009e92:	2bf2      	cmp	r3, #242	; 0xf2
 8009e94:	d10a      	bne.n	8009eac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009e96:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009e9a:	f7ff fa9b 	bl	80093d4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8009e9e:	f241 0021 	movw	r0, #4129	; 0x1021
 8009ea2:	f7ff fab7 	bl	8009414 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009ea6:	2306      	movs	r3, #6
 8009ea8:	75bb      	strb	r3, [r7, #22]
 8009eaa:	e002      	b.n	8009eb2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	7a5b      	ldrb	r3, [r3, #9]
 8009eb0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8009eb2:	2309      	movs	r3, #9
 8009eb4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	0a1b      	lsrs	r3, r3, #8
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	885b      	ldrh	r3, [r3, #2]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	791b      	ldrb	r3, [r3, #4]
 8009ece:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	795b      	ldrb	r3, [r3, #5]
 8009ed4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	799b      	ldrb	r3, [r3, #6]
 8009eda:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	79db      	ldrb	r3, [r3, #7]
 8009ee0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7a1b      	ldrb	r3, [r3, #8]
 8009ee6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009ee8:	7dbb      	ldrb	r3, [r7, #22]
 8009eea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7a9b      	ldrb	r3, [r3, #10]
 8009ef0:	753b      	strb	r3, [r7, #20]
        break;
 8009ef2:	e022      	b.n	8009f3a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	7b1b      	ldrb	r3, [r3, #12]
 8009efc:	733b      	strb	r3, [r7, #12]
        break;
 8009efe:	e01c      	b.n	8009f3a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8009f00:	2306      	movs	r3, #6
 8009f02:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	89db      	ldrh	r3, [r3, #14]
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	89db      	ldrh	r3, [r3, #14]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	7c1a      	ldrb	r2, [r3, #16]
 8009f1c:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <SUBGRF_SetPacketParams+0x138>)
 8009f1e:	4611      	mov	r1, r2
 8009f20:	7019      	strb	r1, [r3, #0]
 8009f22:	4613      	mov	r3, r2
 8009f24:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	7c5b      	ldrb	r3, [r3, #17]
 8009f2a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	7c9b      	ldrb	r3, [r3, #18]
 8009f30:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	7cdb      	ldrb	r3, [r3, #19]
 8009f36:	747b      	strb	r3, [r7, #17]
        break;
 8009f38:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	f107 030c 	add.w	r3, r7, #12
 8009f42:	4619      	mov	r1, r3
 8009f44:	208c      	movs	r0, #140	; 0x8c
 8009f46:	f000 f965 	bl	800a214 <SUBGRF_WriteCommand>
 8009f4a:	e000      	b.n	8009f4e <SUBGRF_SetPacketParams+0x12a>
        return;
 8009f4c:	bf00      	nop
}
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	0800c1a8 	.word	0x0800c1a8
 8009f58:	20000315 	.word	0x20000315
 8009f5c:	20000316 	.word	0x20000316

08009f60 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	460a      	mov	r2, r1
 8009f6a:	71fb      	strb	r3, [r7, #7]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009f74:	79bb      	ldrb	r3, [r7, #6]
 8009f76:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009f78:	f107 030c 	add.w	r3, r7, #12
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	208f      	movs	r0, #143	; 0x8f
 8009f82:	f000 f947 	bl	800a214 <SUBGRF_WriteCommand>
}
 8009f86:	bf00      	nop
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009f98:	1d3b      	adds	r3, r7, #4
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	2015      	movs	r0, #21
 8009fa0:	f000 f95a 	bl	800a258 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009fa4:	793b      	ldrb	r3, [r7, #4]
 8009fa6:	425b      	negs	r3, r3
 8009fa8:	105b      	asrs	r3, r3, #1
 8009faa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8009fc2:	f107 030c 	add.w	r3, r7, #12
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	2013      	movs	r0, #19
 8009fcc:	f000 f944 	bl	800a258 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8009fd0:	f7ff fd7e 	bl	8009ad0 <SUBGRF_GetPacketType>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d10d      	bne.n	8009ff6 <SUBGRF_GetRxBufferStatus+0x3e>
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <SUBGRF_GetRxBufferStatus+0x54>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d108      	bne.n	8009ff6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009fe4:	f240 7002 	movw	r0, #1794	; 0x702
 8009fe8:	f000 f878 	bl	800a0dc <SUBGRF_ReadRegister>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	e002      	b.n	8009ffc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009ff6:	7b3a      	ldrb	r2, [r7, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	701a      	strb	r2, [r3, #0]
}
 800a002:	bf00      	nop
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000316 	.word	0x20000316

0800a010 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a018:	f107 030c 	add.w	r3, r7, #12
 800a01c:	2203      	movs	r2, #3
 800a01e:	4619      	mov	r1, r3
 800a020:	2014      	movs	r0, #20
 800a022:	f000 f919 	bl	800a258 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a026:	f7ff fd53 	bl	8009ad0 <SUBGRF_GetPacketType>
 800a02a:	4603      	mov	r3, r0
 800a02c:	461a      	mov	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <SUBGRF_GetPacketStatus+0x30>
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d013      	beq.n	800a066 <SUBGRF_GetPacketStatus+0x56>
 800a03e:	e02a      	b.n	800a096 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a040:	7b3a      	ldrb	r2, [r7, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a046:	7b7b      	ldrb	r3, [r7, #13]
 800a048:	425b      	negs	r3, r3
 800a04a:	105b      	asrs	r3, r3, #1
 800a04c:	b25a      	sxtb	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	425b      	negs	r3, r3
 800a056:	105b      	asrs	r3, r3, #1
 800a058:	b25a      	sxtb	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	609a      	str	r2, [r3, #8]
            break;
 800a064:	e020      	b.n	800a0a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a066:	7b3b      	ldrb	r3, [r7, #12]
 800a068:	425b      	negs	r3, r3
 800a06a:	105b      	asrs	r3, r3, #1
 800a06c:	b25a      	sxtb	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a072:	7b7b      	ldrb	r3, [r7, #13]
 800a074:	b25b      	sxtb	r3, r3
 800a076:	3302      	adds	r3, #2
 800a078:	109b      	asrs	r3, r3, #2
 800a07a:	b25a      	sxtb	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	425b      	negs	r3, r3
 800a084:	105b      	asrs	r3, r3, #1
 800a086:	b25a      	sxtb	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a08c:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <SUBGRF_GetPacketStatus+0xa0>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	611a      	str	r2, [r3, #16]
            break;
 800a094:	e008      	b.n	800a0a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a096:	2214      	movs	r2, #20
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fe41 	bl	800ad22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	220f      	movs	r2, #15
 800a0a4:	701a      	strb	r2, [r3, #0]
            break;
 800a0a6:	bf00      	nop
    }
}
 800a0a8:	bf00      	nop
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000318 	.word	0x20000318

0800a0b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	460a      	mov	r2, r1
 800a0be:	80fb      	strh	r3, [r7, #6]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800a0c4:	1d7a      	adds	r2, r7, #5
 800a0c6:	88f9      	ldrh	r1, [r7, #6]
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4803      	ldr	r0, [pc, #12]	; (800a0d8 <SUBGRF_WriteRegister+0x24>)
 800a0cc:	f7fa fb10 	bl	80046f0 <HAL_SUBGHZ_WriteRegisters>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000070 	.word	0x20000070

0800a0dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800a0e6:	f107 020f 	add.w	r2, r7, #15
 800a0ea:	88f9      	ldrh	r1, [r7, #6]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	4804      	ldr	r0, [pc, #16]	; (800a100 <SUBGRF_ReadRegister+0x24>)
 800a0f0:	f7fa fb5d 	bl	80047ae <HAL_SUBGHZ_ReadRegisters>
    return data;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20000070 	.word	0x20000070

0800a104 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	6039      	str	r1, [r7, #0]
 800a10e:	80fb      	strh	r3, [r7, #6]
 800a110:	4613      	mov	r3, r2
 800a112:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a114:	f3ef 8310 	mrs	r3, PRIMASK
 800a118:	60fb      	str	r3, [r7, #12]
  return(result);
 800a11a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a11c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a11e:	b672      	cpsid	i
}
 800a120:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800a122:	88bb      	ldrh	r3, [r7, #4]
 800a124:	88f9      	ldrh	r1, [r7, #6]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	4806      	ldr	r0, [pc, #24]	; (800a144 <SUBGRF_WriteRegisters+0x40>)
 800a12a:	f7fa fae1 	bl	80046f0 <HAL_SUBGHZ_WriteRegisters>
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f383 8810 	msr	PRIMASK, r3
}
 800a138:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a13a:	bf00      	nop
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000070 	.word	0x20000070

0800a148 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	80fb      	strh	r3, [r7, #6]
 800a154:	4613      	mov	r3, r2
 800a156:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a158:	f3ef 8310 	mrs	r3, PRIMASK
 800a15c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a15e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a160:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a162:	b672      	cpsid	i
}
 800a164:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800a166:	88bb      	ldrh	r3, [r7, #4]
 800a168:	88f9      	ldrh	r1, [r7, #6]
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4806      	ldr	r0, [pc, #24]	; (800a188 <SUBGRF_ReadRegisters+0x40>)
 800a16e:	f7fa fb1e 	bl	80047ae <HAL_SUBGHZ_ReadRegisters>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f383 8810 	msr	PRIMASK, r3
}
 800a17c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a17e:	bf00      	nop
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20000070 	.word	0x20000070

0800a18c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	6039      	str	r1, [r7, #0]
 800a196:	71fb      	strb	r3, [r7, #7]
 800a198:	4613      	mov	r3, r2
 800a19a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19c:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a6:	b672      	cpsid	i
}
 800a1a8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800a1aa:	79bb      	ldrb	r3, [r7, #6]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	79f9      	ldrb	r1, [r7, #7]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	4806      	ldr	r0, [pc, #24]	; (800a1cc <SUBGRF_WriteBuffer+0x40>)
 800a1b4:	f7fa fc0f 	bl	80049d6 <HAL_SUBGHZ_WriteBuffer>
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f383 8810 	msr	PRIMASK, r3
}
 800a1c2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000070 	.word	0x20000070

0800a1d0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	6039      	str	r1, [r7, #0]
 800a1da:	71fb      	strb	r3, [r7, #7]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a1e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ea:	b672      	cpsid	i
}
 800a1ec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800a1ee:	79bb      	ldrb	r3, [r7, #6]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	79f9      	ldrb	r1, [r7, #7]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	4806      	ldr	r0, [pc, #24]	; (800a210 <SUBGRF_ReadBuffer+0x40>)
 800a1f8:	f7fa fc40 	bl	8004a7c <HAL_SUBGHZ_ReadBuffer>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	f383 8810 	msr	PRIMASK, r3
}
 800a206:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a208:	bf00      	nop
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20000070 	.word	0x20000070

0800a214 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
 800a220:	4613      	mov	r3, r2
 800a222:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a224:	f3ef 8310 	mrs	r3, PRIMASK
 800a228:	60fb      	str	r3, [r7, #12]
  return(result);
 800a22a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a22c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a22e:	b672      	cpsid	i
}
 800a230:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800a232:	88bb      	ldrh	r3, [r7, #4]
 800a234:	79f9      	ldrb	r1, [r7, #7]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	4806      	ldr	r0, [pc, #24]	; (800a254 <SUBGRF_WriteCommand+0x40>)
 800a23a:	f7fa fb19 	bl	8004870 <HAL_SUBGHZ_ExecSetCmd>
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f383 8810 	msr	PRIMASK, r3
}
 800a248:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a24a:	bf00      	nop
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000070 	.word	0x20000070

0800a258 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
 800a264:	4613      	mov	r3, r2
 800a266:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a268:	f3ef 8310 	mrs	r3, PRIMASK
 800a26c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800a270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a272:	b672      	cpsid	i
}
 800a274:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a276:	88bb      	ldrh	r3, [r7, #4]
 800a278:	79f9      	ldrb	r1, [r7, #7]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4806      	ldr	r0, [pc, #24]	; (800a298 <SUBGRF_ReadCommand+0x40>)
 800a27e:	f7fa fb56 	bl	800492e <HAL_SUBGHZ_ExecGetCmd>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f383 8810 	msr	PRIMASK, r3
}
 800a28c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800a28e:	bf00      	nop
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000070 	.word	0x20000070

0800a29c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	460a      	mov	r2, r1
 800a2a6:	71fb      	strb	r3, [r7, #7]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800a2b0:	79bb      	ldrb	r3, [r7, #6]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d10d      	bne.n	800a2d2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d104      	bne.n	800a2c6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800a2bc:	2302      	movs	r3, #2
 800a2be:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a2c0:	2004      	movs	r0, #4
 800a2c2:	f000 f8ef 	bl	800a4a4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d107      	bne.n	800a2dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	73fb      	strb	r3, [r7, #15]
 800a2d0:	e004      	b.n	800a2dc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800a2d2:	79bb      	ldrb	r3, [r7, #6]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fc29 	bl	800ab36 <RBI_ConfigRFSwitch>
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800a2fa:	f000 fc2a 	bl	800ab52 <RBI_GetTxConfig>
 800a2fe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d016      	beq.n	800a334 <SUBGRF_SetRfTxPower+0x48>
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	dc16      	bgt.n	800a33a <SUBGRF_SetRfTxPower+0x4e>
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <SUBGRF_SetRfTxPower+0x2e>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d00a      	beq.n	800a32e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800a318:	e00f      	b.n	800a33a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800a31a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a31e:	2b0f      	cmp	r3, #15
 800a320:	dd02      	ble.n	800a328 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800a322:	2302      	movs	r3, #2
 800a324:	73fb      	strb	r3, [r7, #15]
            break;
 800a326:	e009      	b.n	800a33c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800a328:	2301      	movs	r3, #1
 800a32a:	73fb      	strb	r3, [r7, #15]
            break;
 800a32c:	e006      	b.n	800a33c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800a32e:	2301      	movs	r3, #1
 800a330:	73fb      	strb	r3, [r7, #15]
            break;
 800a332:	e003      	b.n	800a33c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800a334:	2302      	movs	r3, #2
 800a336:	73fb      	strb	r3, [r7, #15]
            break;
 800a338:	e000      	b.n	800a33c <SUBGRF_SetRfTxPower+0x50>
            break;
 800a33a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a33c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	2202      	movs	r2, #2
 800a344:	4618      	mov	r0, r3
 800a346:	f7ff fbcd 	bl	8009ae4 <SUBGRF_SetTxParams>

    return paSelect;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800a358:	2301      	movs	r3, #1
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bc80      	pop	{r7}
 800a360:	4770      	bx	lr
	...

0800a364 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a36c:	4b03      	ldr	r3, [pc, #12]	; (800a37c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2001      	movs	r0, #1
 800a372:	4798      	blx	r3
}
 800a374:	bf00      	nop
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20000320 	.word	0x20000320

0800a380 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a388:	4b03      	ldr	r3, [pc, #12]	; (800a398 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2002      	movs	r0, #2
 800a38e:	4798      	blx	r3
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20000320 	.word	0x20000320

0800a39c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a3a4:	4b03      	ldr	r3, [pc, #12]	; (800a3b4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2040      	movs	r0, #64	; 0x40
 800a3aa:	4798      	blx	r3
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000320 	.word	0x20000320

0800a3b8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d005      	beq.n	800a3da <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800a3ce:	e00a      	b.n	800a3e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2080      	movs	r0, #128	; 0x80
 800a3d6:	4798      	blx	r3
            break;
 800a3d8:	e005      	b.n	800a3e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3e2:	4798      	blx	r3
            break;
 800a3e4:	bf00      	nop
    }
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000320 	.word	0x20000320

0800a3f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a404:	4798      	blx	r3
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000320 	.word	0x20000320

0800a414 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a41c:	4b03      	ldr	r3, [pc, #12]	; (800a42c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2020      	movs	r0, #32
 800a422:	4798      	blx	r3
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000320 	.word	0x20000320

0800a430 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a438:	4b03      	ldr	r3, [pc, #12]	; (800a448 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2004      	movs	r0, #4
 800a43e:	4798      	blx	r3
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000320 	.word	0x20000320

0800a44c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a454:	4b03      	ldr	r3, [pc, #12]	; (800a464 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2008      	movs	r0, #8
 800a45a:	4798      	blx	r3
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000320 	.word	0x20000320

0800a468 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a470:	4b03      	ldr	r3, [pc, #12]	; (800a480 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2010      	movs	r0, #16
 800a476:	4798      	blx	r3
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000320 	.word	0x20000320

0800a484 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a48c:	4b04      	ldr	r3, [pc, #16]	; (800a4a0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a494:	4798      	blx	r3
}
 800a496:	bf00      	nop
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000320 	.word	0x20000320

0800a4a4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800a4ae:	f000 fb5e 	bl	800ab6e <RBI_IsDCDC>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d112      	bne.n	800a4de <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800a4b8:	f640 1023 	movw	r0, #2339	; 0x923
 800a4bc:	f7ff fe0e 	bl	800a0dc <SUBGRF_ReadRegister>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	f023 0306 	bic.w	r3, r3, #6
 800a4ca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800a4cc:	7bfa      	ldrb	r2, [r7, #15]
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	f640 1023 	movw	r0, #2339	; 0x923
 800a4da:	f7ff fdeb 	bl	800a0b4 <SUBGRF_WriteRegister>
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800a4f6:	231f      	movs	r3, #31
 800a4f8:	e016      	b.n	800a528 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]
 800a4fe:	e00f      	b.n	800a520 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	4a0c      	ldr	r2, [pc, #48]	; (800a534 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d205      	bcs.n	800a51a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800a50e:	7bfb      	ldrb	r3, [r7, #15]
 800a510:	4a08      	ldr	r2, [pc, #32]	; (800a534 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	4413      	add	r3, r2
 800a516:	791b      	ldrb	r3, [r3, #4]
 800a518:	e006      	b.n	800a528 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	3301      	adds	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b15      	cmp	r3, #21
 800a524:	d9ec      	bls.n	800a500 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a526:	e7fe      	b.n	800a526 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	0800c540 	.word	0x0800c540

0800a538 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08a      	sub	sp, #40	; 0x28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a542:	4b35      	ldr	r3, [pc, #212]	; (800a618 <SUBGRF_GetCFO+0xe0>)
 800a544:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a546:	f640 0007 	movw	r0, #2055	; 0x807
 800a54a:	f7ff fdc7 	bl	800a0dc <SUBGRF_ReadRegister>
 800a54e:	4603      	mov	r3, r0
 800a550:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a552:	7ffb      	ldrb	r3, [r7, #31]
 800a554:	08db      	lsrs	r3, r3, #3
 800a556:	b2db      	uxtb	r3, r3
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	3328      	adds	r3, #40	; 0x28
 800a55e:	443b      	add	r3, r7
 800a560:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a564:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800a566:	7ffb      	ldrb	r3, [r7, #31]
 800a568:	f003 0307 	and.w	r3, r3, #7
 800a56c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a56e:	7fba      	ldrb	r2, [r7, #30]
 800a570:	7f7b      	ldrb	r3, [r7, #29]
 800a572:	3301      	adds	r3, #1
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	4b28      	ldr	r3, [pc, #160]	; (800a61c <SUBGRF_GetCFO+0xe4>)
 800a57c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a580:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	fb02 f303 	mul.w	r3, r2, r3
 800a59c:	2b07      	cmp	r3, #7
 800a59e:	d802      	bhi.n	800a5a6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800a5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	fb02 f303 	mul.w	r3, r2, r3
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d802      	bhi.n	800a5ba <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a5ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	fb02 f303 	mul.w	r3, r2, r3
 800a5c4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a5c6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800a5ca:	f7ff fd87 	bl	800a0dc <SUBGRF_ReadRegister>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5d6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a5d8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800a5dc:	f7ff fd7e 	bl	800a0dc <SUBGRF_ReadRegister>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d005      	beq.n	800a600 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800a5fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800a5fe:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	095b      	lsrs	r3, r3, #5
 800a604:	6a3a      	ldr	r2, [r7, #32]
 800a606:	fb02 f303 	mul.w	r3, r2, r3
 800a60a:	11da      	asrs	r2, r3, #7
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	601a      	str	r2, [r3, #0]
}
 800a610:	bf00      	nop
 800a612:	3728      	adds	r7, #40	; 0x28
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	0c0a0804 	.word	0x0c0a0804
 800a61c:	01e84800 	.word	0x01e84800

0800a620 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800a632:	f04f 33ff 	mov.w	r3, #4294967295
 800a636:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a638:	697b      	ldr	r3, [r7, #20]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr

0800a644 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800a644:	b480      	push	{r7}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800a656:	f04f 33ff 	mov.w	r3, #4294967295
 800a65a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800a65c:	697b      	ldr	r3, [r7, #20]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	bc80      	pop	{r7}
 800a666:	4770      	bx	lr

0800a668 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800a674:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bc80      	pop	{r7}
 800a680:	4770      	bx	lr

0800a682 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800a682:	b480      	push	{r7}
 800a684:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a686:	bf00      	nop
 800a688:	46bd      	mov	sp, r7
 800a68a:	bc80      	pop	{r7}
 800a68c:	4770      	bx	lr

0800a68e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800a68e:	b480      	push	{r7}
 800a690:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800a692:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr

0800a69c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800a6a0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr

0800a6aa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bc80      	pop	{r7}
 800a6bc:	4770      	bx	lr

0800a6be <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b087      	sub	sp, #28
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	60f8      	str	r0, [r7, #12]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800a6d2:	697b      	ldr	r3, [r7, #20]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	371c      	adds	r7, #28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr

0800a6de <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800a6de:	b480      	push	{r7}
 800a6e0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bc80      	pop	{r7}
 800a6ec:	4770      	bx	lr

0800a6ee <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a6f2:	bf00      	nop
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr

0800a6fa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a6fe:	bf00      	nop
 800a700:	46bd      	mov	sp, r7
 800a702:	bc80      	pop	{r7}
 800a704:	4770      	bx	lr

0800a706 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	4603      	mov	r3, r0
 800a70e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	bc80      	pop	{r7}
 800a718:	4770      	bx	lr

0800a71a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800a71e:	f7f6 f999 	bl	8000a54 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800a722:	f000 f80b 	bl	800a73c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800a726:	bf00      	nop
 800a728:	bd80      	pop	{r7, pc}

0800a72a <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	f000 fde9 	bl	800b308 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <SubghzApp_Init>:
static void PingPong_Process(void);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b08b      	sub	sp, #44	; 0x2c
 800a740:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800a742:	4b54      	ldr	r3, [pc, #336]	; (800a894 <SubghzApp_Init+0x158>)
 800a744:	2200      	movs	r2, #0
 800a746:	2100      	movs	r1, #0
 800a748:	2002      	movs	r0, #2
 800a74a:	f001 fa19 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Get SubGHY_Phy APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a74e:	2300      	movs	r3, #0
 800a750:	9302      	str	r3, [sp, #8]
 800a752:	2303      	movs	r3, #3
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	2301      	movs	r3, #1
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	4b4f      	ldr	r3, [pc, #316]	; (800a898 <SubghzApp_Init+0x15c>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	2002      	movs	r0, #2
 800a762:	f001 fa0d 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a766:	2300      	movs	r3, #0
 800a768:	9302      	str	r3, [sp, #8]
 800a76a:	2303      	movs	r3, #3
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	2301      	movs	r3, #1
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	4b4a      	ldr	r3, [pc, #296]	; (800a89c <SubghzApp_Init+0x160>)
 800a774:	2200      	movs	r2, #0
 800a776:	2100      	movs	r1, #0
 800a778:	2002      	movs	r0, #2
 800a77a:	f001 fa01 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Led Timers*/

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a77e:	4b48      	ldr	r3, [pc, #288]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a780:	4a48      	ldr	r2, [pc, #288]	; (800a8a4 <SubghzApp_Init+0x168>)
 800a782:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a784:	4b46      	ldr	r3, [pc, #280]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a786:	4a48      	ldr	r2, [pc, #288]	; (800a8a8 <SubghzApp_Init+0x16c>)
 800a788:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a78a:	4b45      	ldr	r3, [pc, #276]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a78c:	4a47      	ldr	r2, [pc, #284]	; (800a8ac <SubghzApp_Init+0x170>)
 800a78e:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a790:	4b43      	ldr	r3, [pc, #268]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a792:	4a47      	ldr	r2, [pc, #284]	; (800a8b0 <SubghzApp_Init+0x174>)
 800a794:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a796:	4b42      	ldr	r3, [pc, #264]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a798:	4a46      	ldr	r2, [pc, #280]	; (800a8b4 <SubghzApp_Init+0x178>)
 800a79a:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a79c:	4b46      	ldr	r3, [pc, #280]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	483f      	ldr	r0, [pc, #252]	; (800a8a0 <SubghzApp_Init+0x164>)
 800a7a2:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /*calculate random delay for synchronization*/
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a7a4:	4b44      	ldr	r3, [pc, #272]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	4798      	blx	r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	0d9b      	lsrs	r3, r3, #22
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4b42      	ldr	r3, [pc, #264]	; (800a8bc <SubghzApp_Init+0x180>)
 800a7b2:	601a      	str	r2, [r3, #0]

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 800a7b4:	4b40      	ldr	r3, [pc, #256]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4841      	ldr	r0, [pc, #260]	; (800a8c0 <SubghzApp_Init+0x184>)
 800a7ba:	4798      	blx	r3

  /* Radio configuration */
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a7bc:	4b41      	ldr	r3, [pc, #260]	; (800a8c4 <SubghzApp_Init+0x188>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	2002      	movs	r0, #2
 800a7c4:	f001 f9dc 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a7c8:	4b3f      	ldr	r3, [pc, #252]	; (800a8c8 <SubghzApp_Init+0x18c>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	2002      	movs	r0, #2
 800a7d0:	f001 f9d6 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_FR=%d mHz\n\r", RF_FREQUENCY/1000000);
 800a7d4:	f44f 7359 	mov.w	r3, #868	; 0x364
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	4b3c      	ldr	r3, [pc, #240]	; (800a8cc <SubghzApp_Init+0x190>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	2002      	movs	r0, #2
 800a7e2:	f001 f9cd 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_PW=%d  dBm\n\r", TX_OUTPUT_POWER);
 800a7e6:	230e      	movs	r3, #14
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4b39      	ldr	r3, [pc, #228]	; (800a8d0 <SubghzApp_Init+0x194>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	2002      	movs	r0, #2
 800a7f2:	f001 f9c5 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a7f6:	237d      	movs	r3, #125	; 0x7d
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4b36      	ldr	r3, [pc, #216]	; (800a8d4 <SubghzApp_Init+0x198>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	2002      	movs	r0, #2
 800a802:	f001 f9bd 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a806:	2307      	movs	r3, #7
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4b33      	ldr	r3, [pc, #204]	; (800a8d8 <SubghzApp_Init+0x19c>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	2100      	movs	r1, #0
 800a810:	2002      	movs	r0, #2
 800a812:	f001 f9b5 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a816:	4b28      	ldr	r3, [pc, #160]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a818:	69dc      	ldr	r4, [r3, #28]
 800a81a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a81e:	9308      	str	r3, [sp, #32]
 800a820:	2300      	movs	r3, #0
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	2300      	movs	r3, #0
 800a826:	9306      	str	r3, [sp, #24]
 800a828:	2300      	movs	r3, #0
 800a82a:	9305      	str	r3, [sp, #20]
 800a82c:	2301      	movs	r3, #1
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	2300      	movs	r3, #0
 800a832:	9303      	str	r3, [sp, #12]
 800a834:	2308      	movs	r3, #8
 800a836:	9302      	str	r3, [sp, #8]
 800a838:	2301      	movs	r3, #1
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	2307      	movs	r3, #7
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	2300      	movs	r3, #0
 800a842:	2200      	movs	r2, #0
 800a844:	210e      	movs	r1, #14
 800a846:	2001      	movs	r0, #1
 800a848:	47a0      	blx	r4
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);


  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a84a:	4b1b      	ldr	r3, [pc, #108]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a84e:	21ff      	movs	r1, #255	; 0xff
 800a850:	2001      	movs	r0, #1
 800a852:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /*fills tx buffer*/
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a854:	22ff      	movs	r2, #255	; 0xff
 800a856:	2100      	movs	r1, #0
 800a858:	4820      	ldr	r0, [pc, #128]	; (800a8dc <SubghzApp_Init+0x1a0>)
 800a85a:	f001 fc09 	bl	800c070 <memset>

  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a85e:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <SubghzApp_Init+0x180>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <SubghzApp_Init+0x1a4>)
 800a866:	2201      	movs	r2, #1
 800a868:	2100      	movs	r1, #0
 800a86a:	2001      	movs	r0, #1
 800a86c:	f001 f988 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /*starts reception*/
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a870:	4b11      	ldr	r3, [pc, #68]	; (800a8b8 <SubghzApp_Init+0x17c>)
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	4a11      	ldr	r2, [pc, #68]	; (800a8bc <SubghzApp_Init+0x180>)
 800a876:	6812      	ldr	r2, [r2, #0]
 800a878:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3

  /*register task to to be run in while(1) after Radio IT*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a880:	4a18      	ldr	r2, [pc, #96]	; (800a8e4 <SubghzApp_Init+0x1a8>)
 800a882:	2100      	movs	r1, #0
 800a884:	2001      	movs	r0, #1
 800a886:	f000 fe3b 	bl	800b500 <UTIL_SEQ_RegTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 800a88a:	bf00      	nop
 800a88c:	3704      	adds	r7, #4
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd90      	pop	{r4, r7, pc}
 800a892:	bf00      	nop
 800a894:	0800c1b4 	.word	0x0800c1b4
 800a898:	0800c1c4 	.word	0x0800c1c4
 800a89c:	0800c1e8 	.word	0x0800c1e8
 800a8a0:	20000324 	.word	0x20000324
 800a8a4:	0800a8e9 	.word	0x0800a8e9
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800aa29 	.word	0x0800aa29
 800a8b0:	0800aa55 	.word	0x0800aa55
 800a8b4:	0800aa81 	.word	0x0800aa81
 800a8b8:	0800c4b0 	.word	0x0800c4b0
 800a8bc:	20000548 	.word	0x20000548
 800a8c0:	33bca100 	.word	0x33bca100
 800a8c4:	0800c20c 	.word	0x0800c20c
 800a8c8:	0800c220 	.word	0x0800c220
 800a8cc:	0800c234 	.word	0x0800c234
 800a8d0:	0800c248 	.word	0x0800c248
 800a8d4:	0800c25c 	.word	0x0800c25c
 800a8d8:	0800c270 	.word	0x0800c270
 800a8dc:	20000444 	.word	0x20000444
 800a8e0:	0800c280 	.word	0x0800c280
 800a8e4:	0800aaad 	.word	0x0800aaad

0800a8e8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a8ec:	4b07      	ldr	r3, [pc, #28]	; (800a90c <OnTxDone+0x24>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	f001 f944 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX;
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <OnTxDone+0x28>)
 800a8fa:	2203      	movs	r2, #3
 800a8fc:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a8fe:	2100      	movs	r1, #0
 800a900:	2001      	movs	r0, #1
 800a902:	f000 fe1f 	bl	800b544 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a906:	bf00      	nop
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	0800c28c 	.word	0x0800c28c
 800a910:	20000340 	.word	0x20000340

0800a914 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af02      	add	r7, sp, #8
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	4608      	mov	r0, r1
 800a91e:	4611      	mov	r1, r2
 800a920:	461a      	mov	r2, r3
 800a922:	4603      	mov	r3, r0
 800a924:	817b      	strh	r3, [r7, #10]
 800a926:	460b      	mov	r3, r1
 800a928:	813b      	strh	r3, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a92e:	4b34      	ldr	r3, [pc, #208]	; (800aa00 <OnRxDone+0xec>)
 800a930:	2201      	movs	r2, #1
 800a932:	2100      	movs	r1, #0
 800a934:	2001      	movs	r0, #1
 800a936:	f001 f923 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a93a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a93e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a942:	9201      	str	r2, [sp, #4]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4b2f      	ldr	r3, [pc, #188]	; (800aa04 <OnRxDone+0xf0>)
 800a948:	2201      	movs	r2, #1
 800a94a:	2100      	movs	r1, #0
 800a94c:	2001      	movs	r0, #1
 800a94e:	f001 f917 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Record payload Signal to noise ratio in Lora*/
  SnrValue = LoraSnr_FskCfo;
 800a952:	4a2d      	ldr	r2, [pc, #180]	; (800aa08 <OnRxDone+0xf4>)
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	7013      	strb	r3, [r2, #0]
#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
  SnrValue = 0; /*not applicable in GFSK*/
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
  /* Update the State of the FSM*/
  State = RX;
 800a958:	4b2c      	ldr	r3, [pc, #176]	; (800aa0c <OnRxDone+0xf8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
  /* Clear BufferRx*/
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a95e:	22ff      	movs	r2, #255	; 0xff
 800a960:	2100      	movs	r1, #0
 800a962:	482b      	ldr	r0, [pc, #172]	; (800aa10 <OnRxDone+0xfc>)
 800a964:	f001 fb84 	bl	800c070 <memset>
  /* Record payload size*/
  RxBufferSize = size;
 800a968:	4a2a      	ldr	r2, [pc, #168]	; (800aa14 <OnRxDone+0x100>)
 800a96a:	897b      	ldrh	r3, [r7, #10]
 800a96c:	8013      	strh	r3, [r2, #0]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a96e:	4b29      	ldr	r3, [pc, #164]	; (800aa14 <OnRxDone+0x100>)
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	2bff      	cmp	r3, #255	; 0xff
 800a974:	d806      	bhi.n	800a984 <OnRxDone+0x70>
  {
    memcpy(BufferRx, payload, RxBufferSize);
 800a976:	4b27      	ldr	r3, [pc, #156]	; (800aa14 <OnRxDone+0x100>)
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	68f9      	ldr	r1, [r7, #12]
 800a97e:	4824      	ldr	r0, [pc, #144]	; (800aa10 <OnRxDone+0xfc>)
 800a980:	f001 fba2 	bl	800c0c8 <memcpy>
  }
  /* Record Received Signal Strength*/
  RssiValue = rssi;
 800a984:	893b      	ldrh	r3, [r7, #8]
 800a986:	b25a      	sxtb	r2, r3
 800a988:	4b23      	ldr	r3, [pc, #140]	; (800aa18 <OnRxDone+0x104>)
 800a98a:	701a      	strb	r2, [r3, #0]
  /* Record payload content*/
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a98c:	897b      	ldrh	r3, [r7, #10]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4b22      	ldr	r3, [pc, #136]	; (800aa1c <OnRxDone+0x108>)
 800a992:	2201      	movs	r2, #1
 800a994:	2100      	movs	r1, #0
 800a996:	2003      	movs	r0, #3
 800a998:	f001 f8f2 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a99c:	2300      	movs	r3, #0
 800a99e:	617b      	str	r3, [r7, #20]
 800a9a0:	e01d      	b.n	800a9de <OnRxDone+0xca>
  {
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	; (800aa10 <OnRxDone+0xfc>)
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4b1c      	ldr	r3, [pc, #112]	; (800aa20 <OnRxDone+0x10c>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	2003      	movs	r0, #3
 800a9b4:	f001 f8e4 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	425a      	negs	r2, r3
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	f002 020f 	and.w	r2, r2, #15
 800a9c4:	bf58      	it	pl
 800a9c6:	4253      	negpl	r3, r2
 800a9c8:	2b0f      	cmp	r3, #15
 800a9ca:	d105      	bne.n	800a9d8 <OnRxDone+0xc4>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a9cc:	4b15      	ldr	r3, [pc, #84]	; (800aa24 <OnRxDone+0x110>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	2003      	movs	r0, #3
 800a9d4:	f001 f8d4 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b3f      	cmp	r3, #63	; 0x3f
 800a9e2:	ddde      	ble.n	800a9a2 <OnRxDone+0x8e>
    }
  }
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a9e4:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <OnRxDone+0x110>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	2003      	movs	r0, #3
 800a9ec:	f001 f8c8 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	f000 fda6 	bl	800b544 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a9f8:	bf00      	nop
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0800c298 	.word	0x0800c298
 800aa04:	0800c2a4 	.word	0x0800c2a4
 800aa08:	20000547 	.word	0x20000547
 800aa0c:	20000340 	.word	0x20000340
 800aa10:	20000344 	.word	0x20000344
 800aa14:	20000544 	.word	0x20000544
 800aa18:	20000546 	.word	0x20000546
 800aa1c:	0800c2c8 	.word	0x0800c2c8
 800aa20:	0800c2dc 	.word	0x0800c2dc
 800aa24:	0800c2e4 	.word	0x0800c2e4

0800aa28 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <OnTxTimeout+0x24>)
 800aa2e:	2201      	movs	r2, #1
 800aa30:	2100      	movs	r1, #0
 800aa32:	2001      	movs	r0, #1
 800aa34:	f001 f8a4 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = TX_TIMEOUT;
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <OnTxTimeout+0x28>)
 800aa3a:	2204      	movs	r2, #4
 800aa3c:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa3e:	2100      	movs	r1, #0
 800aa40:	2001      	movs	r0, #1
 800aa42:	f000 fd7f 	bl	800b544 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800aa46:	bf00      	nop
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	0800c2e8 	.word	0x0800c2e8
 800aa50:	20000340 	.word	0x20000340

0800aa54 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800aa58:	4b07      	ldr	r3, [pc, #28]	; (800aa78 <OnRxTimeout+0x24>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	2001      	movs	r0, #1
 800aa60:	f001 f88e 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_TIMEOUT;
 800aa64:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <OnRxTimeout+0x28>)
 800aa66:	2201      	movs	r2, #1
 800aa68:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	2001      	movs	r0, #1
 800aa6e:	f000 fd69 	bl	800b544 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800aa72:	bf00      	nop
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	0800c2f8 	.word	0x0800c2f8
 800aa7c:	20000340 	.word	0x20000340

0800aa80 <OnRxError>:

static void OnRxError(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800aa84:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <OnRxError+0x24>)
 800aa86:	2201      	movs	r2, #1
 800aa88:	2100      	movs	r1, #0
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	f001 f878 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
  /* Update the State of the FSM*/
  State = RX_ERROR;
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <OnRxError+0x28>)
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
  /* Run PingPong process in background*/
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800aa96:	2100      	movs	r1, #0
 800aa98:	2001      	movs	r0, #1
 800aa9a:	f000 fd53 	bl	800b544 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800aa9e:	bf00      	nop
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800c308 	.word	0x0800c308
 800aaa8:	20000340 	.word	0x20000340

0800aaac <PingPong_Process>:

/* USER CODE BEGIN PrFD */
static void PingPong_Process(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
    while(1) // Pętla nieskończona
    {
    	 HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800aab0:	2201      	movs	r2, #1
 800aab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aaba:	f7f7 fdac 	bl	8002616 <HAL_GPIO_WritePin>
        if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == 1) // Sprawdzenie stanu przycisku
 800aabe:	2102      	movs	r1, #2
 800aac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aac4:	f7f7 fd90 	bl	80025e8 <HAL_GPIO_ReadPin>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d11a      	bne.n	800ab04 <PingPong_Process+0x58>
        {
            // Wybudzenie radia i wysyłanie danych
            Radio.Standby(); // Przejście z trybu uśpienia do trybu gotowości
 800aace:	4b11      	ldr	r3, [pc, #68]	; (800ab14 <PingPong_Process+0x68>)
 800aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad2:	4798      	blx	r3
            State = TX;
 800aad4:	4b10      	ldr	r3, [pc, #64]	; (800ab18 <PingPong_Process+0x6c>)
 800aad6:	2203      	movs	r2, #3
 800aad8:	701a      	strb	r2, [r3, #0]
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 800aada:	2204      	movs	r2, #4
 800aadc:	490f      	ldr	r1, [pc, #60]	; (800ab1c <PingPong_Process+0x70>)
 800aade:	4810      	ldr	r0, [pc, #64]	; (800ab20 <PingPong_Process+0x74>)
 800aae0:	f001 faf2 	bl	800c0c8 <memcpy>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800aae4:	4b0f      	ldr	r3, [pc, #60]	; (800ab24 <PingPong_Process+0x78>)
 800aae6:	2201      	movs	r2, #1
 800aae8:	2100      	movs	r1, #0
 800aaea:	2001      	movs	r0, #1
 800aaec:	f001 f848 	bl	800bb80 <UTIL_ADV_TRACE_COND_FSend>
            						"PING"
            						"\n\r");
            Radio.Send(BufferTx, PAYLOAD_LEN);
 800aaf0:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <PingPong_Process+0x68>)
 800aaf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf4:	2140      	movs	r1, #64	; 0x40
 800aaf6:	480a      	ldr	r0, [pc, #40]	; (800ab20 <PingPong_Process+0x74>)
 800aaf8:	4798      	blx	r3


            HAL_Delay(1000);
 800aafa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aafe:	f7f6 f833 	bl	8000b68 <HAL_Delay>
 800ab02:	e7d5      	b.n	800aab0 <PingPong_Process+0x4>
        }
        else
        {
            // Utrzymanie radia w trybie uśpienia
            Radio.Sleep();
 800ab04:	4b03      	ldr	r3, [pc, #12]	; (800ab14 <PingPong_Process+0x68>)
 800ab06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab08:	4798      	blx	r3
            HAL_Delay(1000);
 800ab0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab0e:	f7f6 f82b 	bl	8000b68 <HAL_Delay>
    	 HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800ab12:	e7cd      	b.n	800aab0 <PingPong_Process+0x4>
 800ab14:	0800c4b0 	.word	0x0800c4b0
 800ab18:	20000340 	.word	0x20000340
 800ab1c:	0800c314 	.word	0x0800c314
 800ab20:	20000444 	.word	0x20000444
 800ab24:	0800c31c 	.word	0x0800c31c

0800ab28 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ab2c:	f7f6 fd06 	bl	800153c <BSP_RADIO_Init>
 800ab30:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7f6 fd36 	bl	80015b4 <BSP_RADIO_ConfigRFSwitch>
 800ab48:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ab56:	f7f6 fd7f 	bl	8001658 <BSP_RADIO_GetTxConfig>
 800ab5a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ab64:	f7f6 fd7f 	bl	8001666 <BSP_RADIO_IsTCXO>
 800ab68:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ab72:	f7f6 fd7f 	bl	8001674 <BSP_RADIO_IsDCDC>
 800ab76:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#error user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f6 fd7a 	bl	8001682 <BSP_RADIO_GetRFOMaxPowerConfig>
 800ab8e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ab98:	b480      	push	{r7}
 800ab9a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ab9c:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <UTIL_LPM_Init+0x18>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800aba2:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <UTIL_LPM_Init+0x1c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800aba8:	bf00      	nop
 800abaa:	46bd      	mov	sp, r7
 800abac:	bc80      	pop	{r7}
 800abae:	4770      	bx	lr
 800abb0:	2000054c 	.word	0x2000054c
 800abb4:	20000550 	.word	0x20000550

0800abb8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abc4:	f3ef 8310 	mrs	r3, PRIMASK
 800abc8:	613b      	str	r3, [r7, #16]
  return(result);
 800abca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800abcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abce:	b672      	cpsid	i
}
 800abd0:	bf00      	nop
  
  switch( state )
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d008      	beq.n	800abea <UTIL_LPM_SetStopMode+0x32>
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d10e      	bne.n	800abfa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800abdc:	4b0d      	ldr	r3, [pc, #52]	; (800ac14 <UTIL_LPM_SetStopMode+0x5c>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	4a0b      	ldr	r2, [pc, #44]	; (800ac14 <UTIL_LPM_SetStopMode+0x5c>)
 800abe6:	6013      	str	r3, [r2, #0]
      break;
 800abe8:	e008      	b.n	800abfc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	43da      	mvns	r2, r3
 800abee:	4b09      	ldr	r3, [pc, #36]	; (800ac14 <UTIL_LPM_SetStopMode+0x5c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4013      	ands	r3, r2
 800abf4:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <UTIL_LPM_SetStopMode+0x5c>)
 800abf6:	6013      	str	r3, [r2, #0]
      break;
 800abf8:	e000      	b.n	800abfc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800abfa:	bf00      	nop
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f383 8810 	msr	PRIMASK, r3
}
 800ac06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac08:	bf00      	nop
 800ac0a:	371c      	adds	r7, #28
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bc80      	pop	{r7}
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	2000054c 	.word	0x2000054c

0800ac18 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac24:	f3ef 8310 	mrs	r3, PRIMASK
 800ac28:	613b      	str	r3, [r7, #16]
  return(result);
 800ac2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ac2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac2e:	b672      	cpsid	i
}
 800ac30:	bf00      	nop
  
  switch(state)
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d008      	beq.n	800ac4a <UTIL_LPM_SetOffMode+0x32>
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d10e      	bne.n	800ac5a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ac3c:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <UTIL_LPM_SetOffMode+0x5c>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	4a0b      	ldr	r2, [pc, #44]	; (800ac74 <UTIL_LPM_SetOffMode+0x5c>)
 800ac46:	6013      	str	r3, [r2, #0]
      break;
 800ac48:	e008      	b.n	800ac5c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	43da      	mvns	r2, r3
 800ac4e:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <UTIL_LPM_SetOffMode+0x5c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4013      	ands	r3, r2
 800ac54:	4a07      	ldr	r2, [pc, #28]	; (800ac74 <UTIL_LPM_SetOffMode+0x5c>)
 800ac56:	6013      	str	r3, [r2, #0]
      break;
 800ac58:	e000      	b.n	800ac5c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ac5a:	bf00      	nop
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f383 8810 	msr	PRIMASK, r3
}
 800ac66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ac68:	bf00      	nop
 800ac6a:	371c      	adds	r7, #28
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bc80      	pop	{r7}
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20000550 	.word	0x20000550

0800ac78 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac82:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac84:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800ac86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac88:	b672      	cpsid	i
}
 800ac8a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <UTIL_LPM_EnterLowPower+0x60>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d006      	beq.n	800aca2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4798      	blx	r3
 800aca0:	e010      	b.n	800acc4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800aca2:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <UTIL_LPM_EnterLowPower+0x68>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d006      	beq.n	800acb8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800acaa:	4b0c      	ldr	r3, [pc, #48]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	4798      	blx	r3
 800acb6:	e005      	b.n	800acc4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800acb8:	4b08      	ldr	r3, [pc, #32]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800acbe:	4b07      	ldr	r3, [pc, #28]	; (800acdc <UTIL_LPM_EnterLowPower+0x64>)
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	4798      	blx	r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f383 8810 	msr	PRIMASK, r3
}
 800acce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	2000054c 	.word	0x2000054c
 800acdc:	0800c380 	.word	0x0800c380
 800ace0:	20000550 	.word	0x20000550

0800ace4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	613b      	str	r3, [r7, #16]

  while( size-- )
 800acfa:	e007      	b.n	800ad0c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	1c53      	adds	r3, r2, #1
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	1c59      	adds	r1, r3, #1
 800ad06:	6179      	str	r1, [r7, #20]
 800ad08:	7812      	ldrb	r2, [r2, #0]
 800ad0a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ad0c:	88fb      	ldrh	r3, [r7, #6]
 800ad0e:	1e5a      	subs	r2, r3, #1
 800ad10:	80fa      	strh	r2, [r7, #6]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1f2      	bne.n	800acfc <UTIL_MEM_cpy_8+0x18>
    }
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr

0800ad22 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ad36:	e004      	b.n	800ad42 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	60fa      	str	r2, [r7, #12]
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ad42:	883b      	ldrh	r3, [r7, #0]
 800ad44:	1e5a      	subs	r2, r3, #1
 800ad46:	803a      	strh	r2, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1f5      	bne.n	800ad38 <UTIL_MEM_set_8+0x16>
  }
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bc80      	pop	{r7}
 800ad56:	4770      	bx	lr

0800ad58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800ad58:	b082      	sub	sp, #8
 800ad5a:	b480      	push	{r7}
 800ad5c:	b087      	sub	sp, #28
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	1d38      	adds	r0, r7, #4
 800ad64:	e880 0006 	stmia.w	r0, {r1, r2}
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	2300      	movs	r3, #0
 800ad70:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	4413      	add	r3, r2
 800ad78:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800ad7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4413      	add	r3, r2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	b21b      	sxth	r3, r3
 800ad8c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800ad8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ad92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad96:	db0a      	blt.n	800adae <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800ad9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	b21b      	sxth	r3, r3
 800adac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	461a      	mov	r2, r3
 800adb2:	f107 0310 	add.w	r3, r7, #16
 800adb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800adba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	371c      	adds	r7, #28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bc80      	pop	{r7}
 800adc6:	b002      	add	sp, #8
 800adc8:	4770      	bx	lr
	...

0800adcc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af02      	add	r7, sp, #8
 800add2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800add4:	2300      	movs	r3, #0
 800add6:	61bb      	str	r3, [r7, #24]
 800add8:	2300      	movs	r3, #0
 800adda:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800addc:	2300      	movs	r3, #0
 800adde:	613b      	str	r3, [r7, #16]
 800ade0:	2300      	movs	r3, #0
 800ade2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800ade4:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <SysTimeGet+0x6c>)
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	f107 0218 	add.w	r2, r7, #24
 800adec:	3204      	adds	r2, #4
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	4603      	mov	r3, r0
 800adf4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800adf6:	4b10      	ldr	r3, [pc, #64]	; (800ae38 <SysTimeGet+0x6c>)
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
 800adfe:	b21b      	sxth	r3, r3
 800ae00:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800ae02:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <SysTimeGet+0x6c>)
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4798      	blx	r3
 800ae08:	4603      	mov	r3, r0
 800ae0a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800ae0c:	f107 0010 	add.w	r0, r7, #16
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	ca06      	ldmia	r2, {r1, r2}
 800ae1c:	f7ff ff9c 	bl	800ad58 <SysTimeAdd>

  return sysTime;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f107 0310 	add.w	r3, r7, #16
 800ae28:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae2c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	3720      	adds	r7, #32
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	0800c464 	.word	0x0800c464

0800ae3c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  int i = 0;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ae48:	e00e      	b.n	800ae68 <ee_skip_atoi+0x2c>
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	4618      	mov	r0, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6011      	str	r1, [r2, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	4403      	add	r3, r0
 800ae64:	3b30      	subs	r3, #48	; 0x30
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ae70:	d904      	bls.n	800ae7c <ee_skip_atoi+0x40>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b39      	cmp	r3, #57	; 0x39
 800ae7a:	d9e6      	bls.n	800ae4a <ee_skip_atoi+0xe>
  return i;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bc80      	pop	{r7}
 800ae86:	4770      	bx	lr

0800ae88 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b099      	sub	sp, #100	; 0x64
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800ae96:	4b71      	ldr	r3, [pc, #452]	; (800b05c <ee_number+0x1d4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ae9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <ee_number+0x24>
 800aea6:	4b6e      	ldr	r3, [pc, #440]	; (800b060 <ee_number+0x1d8>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	dd02      	ble.n	800aeb8 <ee_number+0x30>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b24      	cmp	r3, #36	; 0x24
 800aeb6:	dd01      	ble.n	800aebc <ee_number+0x34>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e0ca      	b.n	800b052 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 800aebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <ee_number+0x42>
 800aec6:	2330      	movs	r3, #48	; 0x30
 800aec8:	e000      	b.n	800aecc <ee_number+0x44>
 800aeca:	2320      	movs	r3, #32
 800aecc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800aed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aed8:	f003 0302 	and.w	r3, r3, #2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <ee_number+0x70>
  {
    if (num < 0)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da08      	bge.n	800aef8 <ee_number+0x70>
    {
      sign = '-';
 800aee6:	232d      	movs	r3, #45	; 0x2d
 800aee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	425b      	negs	r3, r3
 800aef0:	607b      	str	r3, [r7, #4]
      size--;
 800aef2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aef4:	3b01      	subs	r3, #1
 800aef6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d11e      	bne.n	800af40 <ee_number+0xb8>
    tmp[i++] = '0';
 800af02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	657a      	str	r2, [r7, #84]	; 0x54
 800af08:	3360      	adds	r3, #96	; 0x60
 800af0a:	443b      	add	r3, r7
 800af0c:	2230      	movs	r2, #48	; 0x30
 800af0e:	f803 2c50 	strb.w	r2, [r3, #-80]
 800af12:	e018      	b.n	800af46 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	fbb3 f1f2 	udiv	r1, r3, r2
 800af1c:	fb01 f202 	mul.w	r2, r1, r2
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af24:	441a      	add	r2, r3
 800af26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af28:	1c59      	adds	r1, r3, #1
 800af2a:	6579      	str	r1, [r7, #84]	; 0x54
 800af2c:	7812      	ldrb	r2, [r2, #0]
 800af2e:	3360      	adds	r3, #96	; 0x60
 800af30:	443b      	add	r3, r7
 800af32:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1e6      	bne.n	800af14 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 800af46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	dd01      	ble.n	800af52 <ee_number+0xca>
 800af4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af50:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800af52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800af5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d112      	bne.n	800af8a <ee_number+0x102>
 800af64:	e00c      	b.n	800af80 <ee_number+0xf8>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	60fa      	str	r2, [r7, #12]
 800af6c:	2220      	movs	r2, #32
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	3b01      	subs	r3, #1
 800af74:	60bb      	str	r3, [r7, #8]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <ee_number+0xf8>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	e068      	b.n	800b052 <ee_number+0x1ca>
 800af80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af82:	1e5a      	subs	r2, r3, #1
 800af84:	66ba      	str	r2, [r7, #104]	; 0x68
 800af86:	2b00      	cmp	r3, #0
 800af88:	dced      	bgt.n	800af66 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 800af8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01b      	beq.n	800afca <ee_number+0x142>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	60fa      	str	r2, [r7, #12]
 800af98:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	60bb      	str	r3, [r7, #8]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10f      	bne.n	800afca <ee_number+0x142>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	e051      	b.n	800b052 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	60fa      	str	r2, [r7, #12]
 800afb4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60bb      	str	r3, [r7, #8]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <ee_number+0x142>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	e043      	b.n	800b052 <ee_number+0x1ca>
 800afca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afcc:	1e5a      	subs	r2, r3, #1
 800afce:	66ba      	str	r2, [r7, #104]	; 0x68
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dcec      	bgt.n	800afae <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800afd4:	e00c      	b.n	800aff0 <ee_number+0x168>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	60fa      	str	r2, [r7, #12]
 800afdc:	2230      	movs	r2, #48	; 0x30
 800afde:	701a      	strb	r2, [r3, #0]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	60bb      	str	r3, [r7, #8]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <ee_number+0x168>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	e030      	b.n	800b052 <ee_number+0x1ca>
 800aff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aff6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aff8:	429a      	cmp	r2, r3
 800affa:	dbec      	blt.n	800afd6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800affc:	e010      	b.n	800b020 <ee_number+0x198>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	60fa      	str	r2, [r7, #12]
 800b004:	f107 0110 	add.w	r1, r7, #16
 800b008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b00a:	440a      	add	r2, r1
 800b00c:	7812      	ldrb	r2, [r2, #0]
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	3b01      	subs	r3, #1
 800b014:	60bb      	str	r3, [r7, #8]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <ee_number+0x198>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	e018      	b.n	800b052 <ee_number+0x1ca>
 800b020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b022:	1e5a      	subs	r2, r3, #1
 800b024:	657a      	str	r2, [r7, #84]	; 0x54
 800b026:	2b00      	cmp	r3, #0
 800b028:	dce9      	bgt.n	800affe <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 800b02a:	e00c      	b.n	800b046 <ee_number+0x1be>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	60fa      	str	r2, [r7, #12]
 800b032:	2220      	movs	r2, #32
 800b034:	701a      	strb	r2, [r3, #0]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3b01      	subs	r3, #1
 800b03a:	60bb      	str	r3, [r7, #8]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <ee_number+0x1be>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	e005      	b.n	800b052 <ee_number+0x1ca>
 800b046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b048:	1e5a      	subs	r2, r3, #1
 800b04a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dced      	bgt.n	800b02c <ee_number+0x1a4>

  return str;
 800b050:	68fb      	ldr	r3, [r7, #12]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3764      	adds	r7, #100	; 0x64
 800b056:	46bd      	mov	sp, r7
 800b058:	bc80      	pop	{r7}
 800b05a:	4770      	bx	lr
 800b05c:	2000000c 	.word	0x2000000c
 800b060:	20000010 	.word	0x20000010

0800b064 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b092      	sub	sp, #72	; 0x48
 800b068:	af04      	add	r7, sp, #16
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	dc01      	bgt.n	800b07c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	e13e      	b.n	800b2fa <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b080:	e128      	b.n	800b2d4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 800b082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	429a      	cmp	r2, r3
 800b08e:	f280 812e 	bge.w	800b2ee <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b25      	cmp	r3, #37	; 0x25
 800b098:	d006      	beq.n	800b0a8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b0a2:	7812      	ldrb	r2, [r2, #0]
 800b0a4:	701a      	strb	r2, [r3, #0]
      continue;
 800b0a6:	e112      	b.n	800b2ce <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	d103      	bne.n	800b0c2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	f043 0301 	orr.w	r3, r3, #1
 800b0c0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 800b0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	2b2f      	cmp	r3, #47	; 0x2f
 800b0ce:	d908      	bls.n	800b0e2 <tiny_vsnprintf_like+0x7e>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b39      	cmp	r3, #57	; 0x39
 800b0d6:	d804      	bhi.n	800b0e2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800b0d8:	1d3b      	adds	r3, r7, #4
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff feae 	bl	800ae3c <ee_skip_atoi>
 800b0e0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 800b0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 800b0ee:	230a      	movs	r3, #10
 800b0f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	3b58      	subs	r3, #88	; 0x58
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	f200 8094 	bhi.w	800b226 <tiny_vsnprintf_like+0x1c2>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <tiny_vsnprintf_like+0xa0>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b20f 	.word	0x0800b20f
 800b108:	0800b227 	.word	0x0800b227
 800b10c:	0800b227 	.word	0x0800b227
 800b110:	0800b227 	.word	0x0800b227
 800b114:	0800b227 	.word	0x0800b227
 800b118:	0800b227 	.word	0x0800b227
 800b11c:	0800b227 	.word	0x0800b227
 800b120:	0800b227 	.word	0x0800b227
 800b124:	0800b227 	.word	0x0800b227
 800b128:	0800b227 	.word	0x0800b227
 800b12c:	0800b227 	.word	0x0800b227
 800b130:	0800b193 	.word	0x0800b193
 800b134:	0800b21d 	.word	0x0800b21d
 800b138:	0800b227 	.word	0x0800b227
 800b13c:	0800b227 	.word	0x0800b227
 800b140:	0800b227 	.word	0x0800b227
 800b144:	0800b227 	.word	0x0800b227
 800b148:	0800b21d 	.word	0x0800b21d
 800b14c:	0800b227 	.word	0x0800b227
 800b150:	0800b227 	.word	0x0800b227
 800b154:	0800b227 	.word	0x0800b227
 800b158:	0800b227 	.word	0x0800b227
 800b15c:	0800b227 	.word	0x0800b227
 800b160:	0800b227 	.word	0x0800b227
 800b164:	0800b227 	.word	0x0800b227
 800b168:	0800b227 	.word	0x0800b227
 800b16c:	0800b227 	.word	0x0800b227
 800b170:	0800b1b3 	.word	0x0800b1b3
 800b174:	0800b227 	.word	0x0800b227
 800b178:	0800b273 	.word	0x0800b273
 800b17c:	0800b227 	.word	0x0800b227
 800b180:	0800b227 	.word	0x0800b227
 800b184:	0800b217 	.word	0x0800b217
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	1c5a      	adds	r2, r3, #1
 800b18c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b18e:	2220      	movs	r2, #32
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	3b01      	subs	r3, #1
 800b196:	61fb      	str	r3, [r7, #28]
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dcf4      	bgt.n	800b188 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	603a      	str	r2, [r7, #0]
 800b1a4:	6819      	ldr	r1, [r3, #0]
 800b1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1ac:	b2ca      	uxtb	r2, r1
 800b1ae:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800b1b0:	e08d      	b.n	800b2ce <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	1d1a      	adds	r2, r3, #4
 800b1b6:	603a      	str	r2, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <tiny_vsnprintf_like+0x162>
 800b1c2:	4b50      	ldr	r3, [pc, #320]	; (800b304 <tiny_vsnprintf_like+0x2a0>)
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800b1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1c8:	f7f4 ffd6 	bl	8000178 <strlen>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800b1d0:	e004      	b.n	800b1dc <tiny_vsnprintf_like+0x178>
 800b1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1d8:	2220      	movs	r2, #32
 800b1da:	701a      	strb	r2, [r3, #0]
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	1e5a      	subs	r2, r3, #1
 800b1e0:	61fa      	str	r2, [r7, #28]
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	dbf4      	blt.n	800b1d2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1ec:	e00a      	b.n	800b204 <tiny_vsnprintf_like+0x1a0>
 800b1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1f0:	1c53      	adds	r3, r2, #1
 800b1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	1c59      	adds	r1, r3, #1
 800b1f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b1fa:	7812      	ldrb	r2, [r2, #0]
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b200:	3301      	adds	r3, #1
 800b202:	62bb      	str	r3, [r7, #40]	; 0x28
 800b204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	429a      	cmp	r2, r3
 800b20a:	dbf0      	blt.n	800b1ee <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800b20c:	e05f      	b.n	800b2ce <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b214:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800b216:	2310      	movs	r3, #16
 800b218:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800b21a:	e02b      	b.n	800b274 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f043 0302 	orr.w	r3, r3, #2
 800b222:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800b224:	e025      	b.n	800b272 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b25      	cmp	r3, #37	; 0x25
 800b22c:	d004      	beq.n	800b238 <tiny_vsnprintf_like+0x1d4>
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b234:	2225      	movs	r2, #37	; 0x25
 800b236:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800b238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	1ad2      	subs	r2, r2, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	3b01      	subs	r3, #1
 800b242:	429a      	cmp	r2, r3
 800b244:	da16      	bge.n	800b274 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d006      	beq.n	800b25c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	701a      	strb	r2, [r3, #0]
 800b25a:	e002      	b.n	800b262 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	3b01      	subs	r3, #1
 800b260:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800b262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	429a      	cmp	r2, r3
 800b26e:	db2d      	blt.n	800b2cc <tiny_vsnprintf_like+0x268>
 800b270:	e000      	b.n	800b274 <tiny_vsnprintf_like+0x210>
        break;
 800b272:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2b6c      	cmp	r3, #108	; 0x6c
 800b278:	d105      	bne.n	800b286 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	1d1a      	adds	r2, r3, #4
 800b27e:	603a      	str	r2, [r7, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	637b      	str	r3, [r7, #52]	; 0x34
 800b284:	e00f      	b.n	800b2a6 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	1d1a      	adds	r2, r3, #4
 800b294:	603a      	str	r2, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	637b      	str	r3, [r7, #52]	; 0x34
 800b29a:	e004      	b.n	800b2a6 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	1d1a      	adds	r2, r3, #4
 800b2a0:	603a      	str	r2, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	1e5a      	subs	r2, r3, #1
 800b2aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1acb      	subs	r3, r1, r3
 800b2b0:	1ad1      	subs	r1, r2, r3
 800b2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2c4:	f7ff fde0 	bl	800ae88 <ee_number>
 800b2c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b2ca:	e000      	b.n	800b2ce <tiny_vsnprintf_like+0x26a>
        continue;
 800b2cc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	607b      	str	r3, [r7, #4]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f47f aed2 	bne.w	800b082 <tiny_vsnprintf_like+0x1e>
 800b2de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	1ad2      	subs	r2, r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	f6bf aeca 	bge.w	800b082 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800b2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	1ad3      	subs	r3, r2, r3
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3738      	adds	r7, #56	; 0x38
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	0800c378 	.word	0x0800c378

0800b308 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b090      	sub	sp, #64	; 0x40
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b310:	4b73      	ldr	r3, [pc, #460]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b316:	4b72      	ldr	r3, [pc, #456]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4013      	ands	r3, r2
 800b31e:	4a70      	ldr	r2, [pc, #448]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b320:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b322:	4b70      	ldr	r3, [pc, #448]	; (800b4e4 <UTIL_SEQ_Run+0x1dc>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b328:	4b6f      	ldr	r3, [pc, #444]	; (800b4e8 <UTIL_SEQ_Run+0x1e0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b32e:	4b6f      	ldr	r3, [pc, #444]	; (800b4ec <UTIL_SEQ_Run+0x1e4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b334:	4b6e      	ldr	r3, [pc, #440]	; (800b4f0 <UTIL_SEQ_Run+0x1e8>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b33a:	e08d      	b.n	800b458 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b340:	e002      	b.n	800b348 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b344:	3301      	adds	r3, #1
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b348:	4a6a      	ldr	r2, [pc, #424]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	401a      	ands	r2, r3
 800b354:	4b62      	ldr	r3, [pc, #392]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4013      	ands	r3, r2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d0f1      	beq.n	800b342 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b35e:	4a65      	ldr	r2, [pc, #404]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b362:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b368:	401a      	ands	r2, r3
 800b36a:	4b5d      	ldr	r3, [pc, #372]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4013      	ands	r3, r2
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b372:	4a60      	ldr	r2, [pc, #384]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b376:	00db      	lsls	r3, r3, #3
 800b378:	4413      	add	r3, r2
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	4013      	ands	r3, r2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b384:	4a5b      	ldr	r2, [pc, #364]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	4413      	add	r3, r2
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b392:	4a58      	ldr	r2, [pc, #352]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b396:	00db      	lsls	r3, r3, #3
 800b398:	4413      	add	r3, r2
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	4013      	ands	r3, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 f907 	bl	800b5b4 <SEQ_BitPosition>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	4b53      	ldr	r3, [pc, #332]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b3ac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b3ae:	4a51      	ldr	r2, [pc, #324]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b2:	00db      	lsls	r3, r3, #3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	4b4f      	ldr	r3, [pc, #316]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2101      	movs	r1, #1
 800b3be:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c2:	43db      	mvns	r3, r3
 800b3c4:	401a      	ands	r2, r3
 800b3c6:	494b      	ldr	r1, [pc, #300]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	440b      	add	r3, r1
 800b3ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b3d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3da:	b672      	cpsid	i
}
 800b3dc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b3de:	4b46      	ldr	r3, [pc, #280]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e8:	43da      	mvns	r2, r3
 800b3ea:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <UTIL_SEQ_Run+0x1dc>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	4a3c      	ldr	r2, [pc, #240]	; (800b4e4 <UTIL_SEQ_Run+0x1dc>)
 800b3f2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f8:	e013      	b.n	800b422 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	4a3d      	ldr	r2, [pc, #244]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b400:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b404:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2201      	movs	r2, #1
 800b40a:	fa02 f303 	lsl.w	r3, r2, r3
 800b40e:	43da      	mvns	r2, r3
 800b410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b412:	3b01      	subs	r3, #1
 800b414:	400a      	ands	r2, r1
 800b416:	4937      	ldr	r1, [pc, #220]	; (800b4f4 <UTIL_SEQ_Run+0x1ec>)
 800b418:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b41c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41e:	3b01      	subs	r3, #1
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e8      	bne.n	800b3fa <UTIL_SEQ_Run+0xf2>
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f383 8810 	msr	PRIMASK, r3
}
 800b432:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b434:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a30      	ldr	r2, [pc, #192]	; (800b4fc <UTIL_SEQ_Run+0x1f4>)
 800b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43e:	4798      	blx	r3

    local_taskset = TaskSet;
 800b440:	4b28      	ldr	r3, [pc, #160]	; (800b4e4 <UTIL_SEQ_Run+0x1dc>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b446:	4b28      	ldr	r3, [pc, #160]	; (800b4e8 <UTIL_SEQ_Run+0x1e0>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b44c:	4b27      	ldr	r3, [pc, #156]	; (800b4ec <UTIL_SEQ_Run+0x1e4>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b452:	4b27      	ldr	r3, [pc, #156]	; (800b4f0 <UTIL_SEQ_Run+0x1e8>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	401a      	ands	r2, r3
 800b45e:	4b20      	ldr	r3, [pc, #128]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4013      	ands	r3, r2
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <UTIL_SEQ_Run+0x16c>
 800b468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	4013      	ands	r3, r2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f43f af64 	beq.w	800b33c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b474:	4b20      	ldr	r3, [pc, #128]	; (800b4f8 <UTIL_SEQ_Run+0x1f0>)
 800b476:	f04f 32ff 	mov.w	r2, #4294967295
 800b47a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b47c:	f000 f88e 	bl	800b59c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b480:	f3ef 8310 	mrs	r3, PRIMASK
 800b484:	613b      	str	r3, [r7, #16]
  return(result);
 800b486:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b48a:	b672      	cpsid	i
}
 800b48c:	bf00      	nop
  local_taskset = TaskSet;
 800b48e:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <UTIL_SEQ_Run+0x1dc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b494:	4b14      	ldr	r3, [pc, #80]	; (800b4e8 <UTIL_SEQ_Run+0x1e0>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b49a:	4b14      	ldr	r3, [pc, #80]	; (800b4ec <UTIL_SEQ_Run+0x1e4>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b4a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	401a      	ands	r2, r3
 800b4a6:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d107      	bne.n	800b4c0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <UTIL_SEQ_Run+0x1e8>)
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b4bc:	f7f5 faea 	bl	8000a94 <UTIL_SEQ_Idle>
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f383 8810 	msr	PRIMASK, r3
}
 800b4ca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b4cc:	f000 f86c 	bl	800b5a8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b4d0:	4a03      	ldr	r2, [pc, #12]	; (800b4e0 <UTIL_SEQ_Run+0x1d8>)
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	6013      	str	r3, [r2, #0]

  return;
 800b4d6:	bf00      	nop
}
 800b4d8:	3740      	adds	r7, #64	; 0x40
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000018 	.word	0x20000018
 800b4e4:	20000554 	.word	0x20000554
 800b4e8:	20000558 	.word	0x20000558
 800b4ec:	20000014 	.word	0x20000014
 800b4f0:	2000055c 	.word	0x2000055c
 800b4f4:	20000568 	.word	0x20000568
 800b4f8:	20000560 	.word	0x20000560
 800b4fc:	20000564 	.word	0x20000564

0800b500 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b50c:	f3ef 8310 	mrs	r3, PRIMASK
 800b510:	617b      	str	r3, [r7, #20]
  return(result);
 800b512:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b516:	b672      	cpsid	i
}
 800b518:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f000 f84a 	bl	800b5b4 <SEQ_BitPosition>
 800b520:	4603      	mov	r3, r0
 800b522:	4619      	mov	r1, r3
 800b524:	4a06      	ldr	r2, [pc, #24]	; (800b540 <UTIL_SEQ_RegTask+0x40>)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f383 8810 	msr	PRIMASK, r3
}
 800b536:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b538:	bf00      	nop
}
 800b53a:	3720      	adds	r7, #32
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20000564 	.word	0x20000564

0800b544 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b54e:	f3ef 8310 	mrs	r3, PRIMASK
 800b552:	60fb      	str	r3, [r7, #12]
  return(result);
 800b554:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b558:	b672      	cpsid	i
}
 800b55a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b55c:	4b0d      	ldr	r3, [pc, #52]	; (800b594 <UTIL_SEQ_SetTask+0x50>)
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4313      	orrs	r3, r2
 800b564:	4a0b      	ldr	r2, [pc, #44]	; (800b594 <UTIL_SEQ_SetTask+0x50>)
 800b566:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b568:	4a0b      	ldr	r2, [pc, #44]	; (800b598 <UTIL_SEQ_SetTask+0x54>)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	431a      	orrs	r2, r3
 800b574:	4908      	ldr	r1, [pc, #32]	; (800b598 <UTIL_SEQ_SetTask+0x54>)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f383 8810 	msr	PRIMASK, r3
}
 800b586:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b588:	bf00      	nop
}
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bc80      	pop	{r7}
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	20000554 	.word	0x20000554
 800b598:	20000568 	.word	0x20000568

0800b59c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b5a0:	bf00      	nop
}
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bc80      	pop	{r7}
 800b5a6:	4770      	bx	lr

0800b5a8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b5ac:	bf00      	nop
}
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc80      	pop	{r7}
 800b5b2:	4770      	bx	lr

0800b5b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	0c1b      	lsrs	r3, r3, #16
 800b5c8:	041b      	lsls	r3, r3, #16
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d104      	bne.n	800b5d8 <SEQ_BitPosition+0x24>
 800b5ce:	2310      	movs	r3, #16
 800b5d0:	73fb      	strb	r3, [r7, #15]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	041b      	lsls	r3, r3, #16
 800b5d6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d105      	bne.n	800b5ee <SEQ_BitPosition+0x3a>
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	73fb      	strb	r3, [r7, #15]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	021b      	lsls	r3, r3, #8
 800b5ec:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d105      	bne.n	800b604 <SEQ_BitPosition+0x50>
 800b5f8:	7bfb      	ldrb	r3, [r7, #15]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	73fb      	strb	r3, [r7, #15]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	4a06      	ldr	r2, [pc, #24]	; (800b624 <SEQ_BitPosition+0x70>)
 800b60a:	5cd2      	ldrb	r2, [r2, r3]
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	4413      	add	r3, r2
 800b610:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	f1c3 031f 	rsb	r3, r3, #31
 800b618:	b2db      	uxtb	r3, r3
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	bc80      	pop	{r7}
 800b622:	4770      	bx	lr
 800b624:	0800c5f0 	.word	0x0800c5f0

0800b628 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b62c:	4b04      	ldr	r3, [pc, #16]	; (800b640 <UTIL_TIMER_Init+0x18>)
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b632:	4b04      	ldr	r3, [pc, #16]	; (800b644 <UTIL_TIMER_Init+0x1c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4798      	blx	r3
 800b638:	4603      	mov	r3, r0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	20000570 	.word	0x20000570
 800b644:	0800c438 	.word	0x0800c438

0800b648 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	4613      	mov	r3, r2
 800b656:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d023      	beq.n	800b6a6 <UTIL_TIMER_Create+0x5e>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d020      	beq.n	800b6a6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b66a:	4b11      	ldr	r3, [pc, #68]	; (800b6b0 <UTIL_TIMER_Create+0x68>)
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	4798      	blx	r3
 800b672:	4602      	mov	r2, r0
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	79fa      	ldrb	r2, [r7, #7]
 800b69a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e000      	b.n	800b6a8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b6a6:	2301      	movs	r3, #1
  }
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	0800c438 	.word	0x0800c438

0800b6b4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08a      	sub	sp, #40	; 0x28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d056      	beq.n	800b776 <UTIL_TIMER_Start+0xc2>
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9a9 	bl	800ba20 <TimerExists>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f083 0301 	eor.w	r3, r3, #1
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d04d      	beq.n	800b776 <UTIL_TIMER_Start+0xc2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7a5b      	ldrb	r3, [r3, #9]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d149      	bne.n	800b776 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6e6:	613b      	str	r3, [r7, #16]
  return(result);
 800b6e8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b6ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6ec:	b672      	cpsid	i
}
 800b6ee:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b6f6:	4b24      	ldr	r3, [pc, #144]	; (800b788 <UTIL_TIMER_Start+0xd4>)
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	4798      	blx	r3
 800b6fc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b6fe:	6a3a      	ldr	r2, [r7, #32]
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	429a      	cmp	r2, r3
 800b704:	d201      	bcs.n	800b70a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a3a      	ldr	r2, [r7, #32]
 800b70e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b722:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <UTIL_TIMER_Start+0xd8>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d106      	bne.n	800b738 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b72a:	4b17      	ldr	r3, [pc, #92]	; (800b788 <UTIL_TIMER_Start+0xd4>)
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 f9eb 	bl	800bb0c <TimerInsertNewHeadTimer>
 800b736:	e017      	b.n	800b768 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b738:	4b13      	ldr	r3, [pc, #76]	; (800b788 <UTIL_TIMER_Start+0xd4>)
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	4798      	blx	r3
 800b73e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	441a      	add	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <UTIL_TIMER_Start+0xd8>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	429a      	cmp	r2, r3
 800b758:	d203      	bcs.n	800b762 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f9d6 	bl	800bb0c <TimerInsertNewHeadTimer>
 800b760:	e002      	b.n	800b768 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f9a2 	bl	800baac <TimerInsertTimer>
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f383 8810 	msr	PRIMASK, r3
}
 800b772:	bf00      	nop
  {
 800b774:	e002      	b.n	800b77c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b776:	2301      	movs	r3, #1
 800b778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b77c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b780:	4618      	mov	r0, r3
 800b782:	3728      	adds	r7, #40	; 0x28
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	0800c438 	.word	0x0800c438
 800b78c:	20000570 	.word	0x20000570

0800b790 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d05b      	beq.n	800b85a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b7aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7ac:	b672      	cpsid	i
}
 800b7ae:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b7b0:	4b2d      	ldr	r3, [pc, #180]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b7b6:	4b2c      	ldr	r3, [pc, #176]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b7c2:	4b29      	ldr	r3, [pc, #164]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d041      	beq.n	800b84e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b7d0:	4b25      	ldr	r3, [pc, #148]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d134      	bne.n	800b844 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b7da:	4b23      	ldr	r3, [pc, #140]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b7e2:	4b21      	ldr	r3, [pc, #132]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d00a      	beq.n	800b802 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b7ec:	4b1e      	ldr	r3, [pc, #120]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	4a1d      	ldr	r2, [pc, #116]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7f4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b7f6:	4b1c      	ldr	r3, [pc, #112]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f92c 	bl	800ba58 <TimerSetTimeout>
 800b800:	e023      	b.n	800b84a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b802:	4b1a      	ldr	r3, [pc, #104]	; (800b86c <UTIL_TIMER_Stop+0xdc>)
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	4798      	blx	r3
            TimerListHead = NULL;
 800b808:	4b17      	ldr	r3, [pc, #92]	; (800b868 <UTIL_TIMER_Stop+0xd8>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e01c      	b.n	800b84a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	429a      	cmp	r2, r3
 800b816:	d110      	bne.n	800b83a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b82c:	e00d      	b.n	800b84a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	615a      	str	r2, [r3, #20]
            break;
 800b838:	e007      	b.n	800b84a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e2      	bne.n	800b810 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	77fb      	strb	r3, [r7, #31]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	f383 8810 	msr	PRIMASK, r3
}
 800b858:	e001      	b.n	800b85e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b85a:	2301      	movs	r3, #1
 800b85c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b85e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3720      	adds	r7, #32
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20000570 	.word	0x20000570
 800b86c:	0800c438 	.word	0x0800c438

0800b870 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d102      	bne.n	800b88a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b884:	2301      	movs	r3, #1
 800b886:	73fb      	strb	r3, [r7, #15]
 800b888:	e014      	b.n	800b8b4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b88a:	4b0d      	ldr	r3, [pc, #52]	; (800b8c0 <UTIL_TIMER_SetPeriod+0x50>)
 800b88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88e:	6838      	ldr	r0, [r7, #0]
 800b890:	4798      	blx	r3
 800b892:	4602      	mov	r2, r0
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f8c1 	bl	800ba20 <TimerExists>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff ff73 	bl	800b790 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff ff02 	bl	800b6b4 <UTIL_TIMER_Start>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	0800c438 	.word	0x0800c438

0800b8c4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b089      	sub	sp, #36	; 0x24
 800b8c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b8ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b8d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d4:	b672      	cpsid	i
}
 800b8d6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b8d8:	4b38      	ldr	r3, [pc, #224]	; (800b9bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	4798      	blx	r3
 800b8de:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b8e0:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	4798      	blx	r3
 800b8e6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b8f0:	4b33      	ldr	r3, [pc, #204]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d037      	beq.n	800b968 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b8f8:	4b31      	ldr	r3, [pc, #196]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	429a      	cmp	r2, r3
 800b906:	d206      	bcs.n	800b916 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	1ad2      	subs	r2, r2, r3
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	e002      	b.n	800b91c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	695b      	ldr	r3, [r3, #20]
 800b920:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1ea      	bne.n	800b8fe <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b928:	e01e      	b.n	800b968 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b92a:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b930:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b938:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2200      	movs	r2, #0
 800b93e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	2200      	movs	r2, #0
 800b944:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	69fa      	ldr	r2, [r7, #28]
 800b94c:	6912      	ldr	r2, [r2, #16]
 800b94e:	4610      	mov	r0, r2
 800b950:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	7adb      	ldrb	r3, [r3, #11]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d106      	bne.n	800b968 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	7a9b      	ldrb	r3, [r3, #10]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d102      	bne.n	800b968 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b962:	69f8      	ldr	r0, [r7, #28]
 800b964:	f7ff fea6 	bl	800b6b4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b968:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00d      	beq.n	800b98c <UTIL_TIMER_IRQ_Handler+0xc8>
 800b970:	4b13      	ldr	r3, [pc, #76]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d0d7      	beq.n	800b92a <UTIL_TIMER_IRQ_Handler+0x66>
 800b97a:	4b11      	ldr	r3, [pc, #68]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681c      	ldr	r4, [r3, #0]
 800b980:	4b0e      	ldr	r3, [pc, #56]	; (800b9bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	4798      	blx	r3
 800b986:	4603      	mov	r3, r0
 800b988:	429c      	cmp	r4, r3
 800b98a:	d3ce      	bcc.n	800b92a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b98c:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b994:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	7a1b      	ldrb	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b99e:	4b08      	ldr	r3, [pc, #32]	; (800b9c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f858 	bl	800ba58 <TimerSetTimeout>
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f383 8810 	msr	PRIMASK, r3
}
 800b9b2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b9b4:	bf00      	nop
 800b9b6:	3724      	adds	r7, #36	; 0x24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd90      	pop	{r4, r7, pc}
 800b9bc:	0800c438 	.word	0x0800c438
 800b9c0:	20000570 	.word	0x20000570

0800b9c4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b9ca:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	4798      	blx	r3
 800b9d0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b9d2:	4b04      	ldr	r3, [pc, #16]	; (800b9e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	4798      	blx	r3
 800b9da:	4603      	mov	r3, r0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	0800c438 	.word	0x0800c438

0800b9e8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	4798      	blx	r3
 800b9f6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b9f8:	4b08      	ldr	r3, [pc, #32]	; (800ba1c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	4798      	blx	r3
 800ba00:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	68f9      	ldr	r1, [r7, #12]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	1a8a      	subs	r2, r1, r2
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
 800ba10:	4603      	mov	r3, r0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	0800c438 	.word	0x0800c438

0800ba20 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <TimerExists+0x34>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ba2e:	e008      	b.n	800ba42 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d101      	bne.n	800ba3c <TimerExists+0x1c>
    {
      return true;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e006      	b.n	800ba4a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f3      	bne.n	800ba30 <TimerExists+0x10>
  }
  return false;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bc80      	pop	{r7}
 800ba52:	4770      	bx	lr
 800ba54:	20000570 	.word	0x20000570

0800ba58 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ba60:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <TimerSetTimeout+0x50>)
 800ba62:	6a1b      	ldr	r3, [r3, #32]
 800ba64:	4798      	blx	r3
 800ba66:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681c      	ldr	r4, [r3, #0]
 800ba72:	4b0d      	ldr	r3, [pc, #52]	; (800baa8 <TimerSetTimeout+0x50>)
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	4798      	blx	r3
 800ba78:	4602      	mov	r2, r0
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	429c      	cmp	r4, r3
 800ba80:	d207      	bcs.n	800ba92 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ba82:	4b09      	ldr	r3, [pc, #36]	; (800baa8 <TimerSetTimeout+0x50>)
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	4798      	blx	r3
 800ba88:	4602      	mov	r2, r0
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	441a      	add	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800ba92:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <TimerSetTimeout+0x50>)
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4798      	blx	r3
}
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd90      	pop	{r4, r7, pc}
 800baa6:	bf00      	nop
 800baa8:	0800c438 	.word	0x0800c438

0800baac <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bab4:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <TimerInsertTimer+0x5c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800baba:	4b13      	ldr	r3, [pc, #76]	; (800bb08 <TimerInsertTimer+0x5c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bac2:	e012      	b.n	800baea <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d905      	bls.n	800badc <TimerInsertTimer+0x30>
    {
        cur = next;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	60bb      	str	r3, [r7, #8]
 800bada:	e006      	b.n	800baea <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	615a      	str	r2, [r3, #20]
        return;
 800bae8:	e009      	b.n	800bafe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e8      	bne.n	800bac4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	615a      	str	r2, [r3, #20]
}
 800bafe:	3714      	adds	r7, #20
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bc80      	pop	{r7}
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	20000570 	.word	0x20000570

0800bb0c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <TimerInsertNewHeadTimer+0x38>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bb2c:	4a05      	ldr	r2, [pc, #20]	; (800bb44 <TimerInsertNewHeadTimer+0x38>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bb32:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <TimerInsertNewHeadTimer+0x38>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff ff8e 	bl	800ba58 <TimerSetTimeout>
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20000570 	.word	0x20000570

0800bb48 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800bb4c:	2218      	movs	r2, #24
 800bb4e:	2100      	movs	r1, #0
 800bb50:	4807      	ldr	r0, [pc, #28]	; (800bb70 <UTIL_ADV_TRACE_Init+0x28>)
 800bb52:	f7ff f8e6 	bl	800ad22 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bb56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4805      	ldr	r0, [pc, #20]	; (800bb74 <UTIL_ADV_TRACE_Init+0x2c>)
 800bb5e:	f7ff f8e0 	bl	800ad22 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bb62:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <UTIL_ADV_TRACE_Init+0x30>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4805      	ldr	r0, [pc, #20]	; (800bb7c <UTIL_ADV_TRACE_Init+0x34>)
 800bb68:	4798      	blx	r3
 800bb6a:	4603      	mov	r3, r0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	bd80      	pop	{r7, pc}
 800bb70:	20000574 	.word	0x20000574
 800bb74:	2000058c 	.word	0x2000058c
 800bb78:	0800c478 	.word	0x0800c478
 800bb7c:	0800bdc5 	.word	0x0800bdc5

0800bb80 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800bb80:	b408      	push	{r3}
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b08d      	sub	sp, #52	; 0x34
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800bb92:	2300      	movs	r3, #0
 800bb94:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800bb96:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bb98:	7a1b      	ldrb	r3, [r3, #8]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d902      	bls.n	800bba8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800bba2:	f06f 0304 	mvn.w	r3, #4
 800bba6:	e05e      	b.n	800bc66 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800bba8:	4b32      	ldr	r3, [pc, #200]	; (800bc74 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4013      	ands	r3, r2
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d002      	beq.n	800bbbc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800bbb6:	f06f 0305 	mvn.w	r3, #5
 800bbba:	e054      	b.n	800bc66 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800bbbc:	4b2d      	ldr	r3, [pc, #180]	; (800bc74 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00a      	beq.n	800bbda <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800bbca:	4b2a      	ldr	r3, [pc, #168]	; (800bc74 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f107 0116 	add.w	r1, r7, #22
 800bbd2:	f107 0218 	add.w	r2, r7, #24
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800bbda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbde:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bbe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bbe8:	4823      	ldr	r0, [pc, #140]	; (800bc78 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800bbea:	f7ff fa3b 	bl	800b064 <tiny_vsnprintf_like>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800bbf2:	f000 f9f1 	bl	800bfd8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800bbf6:	8afa      	ldrh	r2, [r7, #22]
 800bbf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bbfa:	4413      	add	r3, r2
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	f107 0214 	add.w	r2, r7, #20
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 f969 	bl	800bedc <TRACE_AllocateBufer>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc10:	d025      	beq.n	800bc5e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800bc12:	2300      	movs	r3, #0
 800bc14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc16:	e00e      	b.n	800bc36 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800bc18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc1a:	8aba      	ldrh	r2, [r7, #20]
 800bc1c:	3330      	adds	r3, #48	; 0x30
 800bc1e:	443b      	add	r3, r7
 800bc20:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800bc24:	4b15      	ldr	r3, [pc, #84]	; (800bc7c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bc26:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800bc28:	8abb      	ldrh	r3, [r7, #20]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800bc30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc32:	3301      	adds	r3, #1
 800bc34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc36:	8afb      	ldrh	r3, [r7, #22]
 800bc38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d3ec      	bcc.n	800bc18 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800bc3e:	8abb      	ldrh	r3, [r7, #20]
 800bc40:	461a      	mov	r2, r3
 800bc42:	4b0e      	ldr	r3, [pc, #56]	; (800bc7c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800bc44:	18d0      	adds	r0, r2, r3
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc4e:	f7ff fa09 	bl	800b064 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800bc52:	f000 f9df 	bl	800c014 <TRACE_UnLock>

    return TRACE_Send();
 800bc56:	f000 f831 	bl	800bcbc <TRACE_Send>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	e003      	b.n	800bc66 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800bc5e:	f000 f9d9 	bl	800c014 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800bc62:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3734      	adds	r7, #52	; 0x34
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc70:	b001      	add	sp, #4
 800bc72:	4770      	bx	lr
 800bc74:	20000574 	.word	0x20000574
 800bc78:	2000078c 	.word	0x2000078c
 800bc7c:	2000058c 	.word	0x2000058c

0800bc80 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800bc88:	4a03      	ldr	r2, [pc, #12]	; (800bc98 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6053      	str	r3, [r2, #4]
}
 800bc8e:	bf00      	nop
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bc80      	pop	{r7}
 800bc96:	4770      	bx	lr
 800bc98:	20000574 	.word	0x20000574

0800bc9c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800bca6:	4a04      	ldr	r2, [pc, #16]	; (800bcb8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	7213      	strb	r3, [r2, #8]
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bc80      	pop	{r7}
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	20000574 	.word	0x20000574

0800bcbc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcca:	f3ef 8310 	mrs	r3, PRIMASK
 800bcce:	613b      	str	r3, [r7, #16]
  return(result);
 800bcd0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bcd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcd4:	b672      	cpsid	i
}
 800bcd6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800bcd8:	f000 f9ba 	bl	800c050 <TRACE_IsLocked>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d15d      	bne.n	800bd9e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800bce2:	f000 f979 	bl	800bfd8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bce6:	4b34      	ldr	r3, [pc, #208]	; (800bdb8 <TRACE_Send+0xfc>)
 800bce8:	8a1a      	ldrh	r2, [r3, #16]
 800bcea:	4b33      	ldr	r3, [pc, #204]	; (800bdb8 <TRACE_Send+0xfc>)
 800bcec:	8a5b      	ldrh	r3, [r3, #18]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d04d      	beq.n	800bd8e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bcf2:	4b31      	ldr	r3, [pc, #196]	; (800bdb8 <TRACE_Send+0xfc>)
 800bcf4:	789b      	ldrb	r3, [r3, #2]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d117      	bne.n	800bd2a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <TRACE_Send+0xfc>)
 800bcfc:	881a      	ldrh	r2, [r3, #0]
 800bcfe:	4b2e      	ldr	r3, [pc, #184]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd00:	8a1b      	ldrh	r3, [r3, #16]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	4b2c      	ldr	r3, [pc, #176]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd08:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bd0a:	4b2b      	ldr	r3, [pc, #172]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd0c:	2202      	movs	r2, #2
 800bd0e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bd10:	4b29      	ldr	r3, [pc, #164]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bd16:	4b28      	ldr	r3, [pc, #160]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd18:	8a9b      	ldrh	r3, [r3, #20]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d105      	bne.n	800bd2a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bd1e:	4b26      	ldr	r3, [pc, #152]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bd24:	4b24      	ldr	r3, [pc, #144]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bd2a:	4b23      	ldr	r3, [pc, #140]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd2c:	789b      	ldrb	r3, [r3, #2]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d115      	bne.n	800bd5e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bd32:	4b21      	ldr	r3, [pc, #132]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd34:	8a5a      	ldrh	r2, [r3, #18]
 800bd36:	4b20      	ldr	r3, [pc, #128]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd38:	8a1b      	ldrh	r3, [r3, #16]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d908      	bls.n	800bd50 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bd3e:	4b1e      	ldr	r3, [pc, #120]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd40:	8a5a      	ldrh	r2, [r3, #18]
 800bd42:	4b1d      	ldr	r3, [pc, #116]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd44:	8a1b      	ldrh	r3, [r3, #16]
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	4b1b      	ldr	r3, [pc, #108]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd4c:	829a      	strh	r2, [r3, #20]
 800bd4e:	e006      	b.n	800bd5e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bd50:	4b19      	ldr	r3, [pc, #100]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd52:	8a1b      	ldrh	r3, [r3, #16]
 800bd54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	4b17      	ldr	r3, [pc, #92]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd5c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bd5e:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd60:	8a1b      	ldrh	r3, [r3, #16]
 800bd62:	461a      	mov	r2, r3
 800bd64:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <TRACE_Send+0x100>)
 800bd66:	4413      	add	r3, r2
 800bd68:	61bb      	str	r3, [r7, #24]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f383 8810 	msr	PRIMASK, r3
}
 800bd74:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800bd76:	f7f4 feb3 	bl	8000ae0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bd7a:	4b11      	ldr	r3, [pc, #68]	; (800bdc0 <TRACE_Send+0x104>)
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	4a0e      	ldr	r2, [pc, #56]	; (800bdb8 <TRACE_Send+0xfc>)
 800bd80:	8a92      	ldrh	r2, [r2, #20]
 800bd82:	4611      	mov	r1, r2
 800bd84:	69b8      	ldr	r0, [r7, #24]
 800bd86:	4798      	blx	r3
 800bd88:	4603      	mov	r3, r0
 800bd8a:	77fb      	strb	r3, [r7, #31]
 800bd8c:	e00d      	b.n	800bdaa <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800bd8e:	f000 f941 	bl	800c014 <TRACE_UnLock>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f383 8810 	msr	PRIMASK, r3
}
 800bd9c:	e005      	b.n	800bdaa <TRACE_Send+0xee>
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f383 8810 	msr	PRIMASK, r3
}
 800bda8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800bdaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000574 	.word	0x20000574
 800bdbc:	2000058c 	.word	0x2000058c
 800bdc0:	0800c478 	.word	0x0800c478

0800bdc4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b088      	sub	sp, #32
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdd0:	f3ef 8310 	mrs	r3, PRIMASK
 800bdd4:	617b      	str	r3, [r7, #20]
  return(result);
 800bdd6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bdd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdda:	b672      	cpsid	i
}
 800bddc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800bdde:	4b3c      	ldr	r3, [pc, #240]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bde0:	789b      	ldrb	r3, [r3, #2]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d106      	bne.n	800bdf4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bde6:	4b3a      	ldr	r3, [pc, #232]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bdec:	4b38      	ldr	r3, [pc, #224]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	821a      	strh	r2, [r3, #16]
 800bdf2:	e00a      	b.n	800be0a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bdf4:	4b36      	ldr	r3, [pc, #216]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bdf6:	8a1a      	ldrh	r2, [r3, #16]
 800bdf8:	4b35      	ldr	r3, [pc, #212]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bdfa:	8a9b      	ldrh	r3, [r3, #20]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be04:	b29a      	uxth	r2, r3
 800be06:	4b32      	ldr	r3, [pc, #200]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be08:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800be0a:	4b31      	ldr	r3, [pc, #196]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be0c:	8a1a      	ldrh	r2, [r3, #16]
 800be0e:	4b30      	ldr	r3, [pc, #192]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be10:	8a5b      	ldrh	r3, [r3, #18]
 800be12:	429a      	cmp	r2, r3
 800be14:	d04d      	beq.n	800beb2 <TRACE_TxCpltCallback+0xee>
 800be16:	4b2e      	ldr	r3, [pc, #184]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be18:	8adb      	ldrh	r3, [r3, #22]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d149      	bne.n	800beb2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800be1e:	4b2c      	ldr	r3, [pc, #176]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be20:	789b      	ldrb	r3, [r3, #2]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d117      	bne.n	800be56 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800be26:	4b2a      	ldr	r3, [pc, #168]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be28:	881a      	ldrh	r2, [r3, #0]
 800be2a:	4b29      	ldr	r3, [pc, #164]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be2c:	8a1b      	ldrh	r3, [r3, #16]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	b29a      	uxth	r2, r3
 800be32:	4b27      	ldr	r3, [pc, #156]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be34:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800be36:	4b26      	ldr	r3, [pc, #152]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be38:	2202      	movs	r2, #2
 800be3a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800be3c:	4b24      	ldr	r3, [pc, #144]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be3e:	2200      	movs	r2, #0
 800be40:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800be42:	4b23      	ldr	r3, [pc, #140]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be44:	8a9b      	ldrh	r3, [r3, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d105      	bne.n	800be56 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800be4a:	4b21      	ldr	r3, [pc, #132]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800be50:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be52:	2200      	movs	r2, #0
 800be54:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800be56:	4b1e      	ldr	r3, [pc, #120]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be58:	789b      	ldrb	r3, [r3, #2]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d115      	bne.n	800be8a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800be5e:	4b1c      	ldr	r3, [pc, #112]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be60:	8a5a      	ldrh	r2, [r3, #18]
 800be62:	4b1b      	ldr	r3, [pc, #108]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be64:	8a1b      	ldrh	r3, [r3, #16]
 800be66:	429a      	cmp	r2, r3
 800be68:	d908      	bls.n	800be7c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800be6a:	4b19      	ldr	r3, [pc, #100]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be6c:	8a5a      	ldrh	r2, [r3, #18]
 800be6e:	4b18      	ldr	r3, [pc, #96]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be70:	8a1b      	ldrh	r3, [r3, #16]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	b29a      	uxth	r2, r3
 800be76:	4b16      	ldr	r3, [pc, #88]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be78:	829a      	strh	r2, [r3, #20]
 800be7a:	e006      	b.n	800be8a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800be7c:	4b14      	ldr	r3, [pc, #80]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be7e:	8a1b      	ldrh	r3, [r3, #16]
 800be80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800be84:	b29a      	uxth	r2, r3
 800be86:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be88:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800be8a:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800be8c:	8a1b      	ldrh	r3, [r3, #16]
 800be8e:	461a      	mov	r2, r3
 800be90:	4b10      	ldr	r3, [pc, #64]	; (800bed4 <TRACE_TxCpltCallback+0x110>)
 800be92:	4413      	add	r3, r2
 800be94:	61fb      	str	r3, [r7, #28]
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f383 8810 	msr	PRIMASK, r3
}
 800bea0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bea2:	4b0d      	ldr	r3, [pc, #52]	; (800bed8 <TRACE_TxCpltCallback+0x114>)
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	4a0a      	ldr	r2, [pc, #40]	; (800bed0 <TRACE_TxCpltCallback+0x10c>)
 800bea8:	8a92      	ldrh	r2, [r2, #20]
 800beaa:	4611      	mov	r1, r2
 800beac:	69f8      	ldr	r0, [r7, #28]
 800beae:	4798      	blx	r3
 800beb0:	e00a      	b.n	800bec8 <TRACE_TxCpltCallback+0x104>
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f383 8810 	msr	PRIMASK, r3
}
 800bebc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800bebe:	f7f4 fe17 	bl	8000af0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800bec2:	f000 f8a7 	bl	800c014 <TRACE_UnLock>
  }
}
 800bec6:	bf00      	nop
 800bec8:	bf00      	nop
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	20000574 	.word	0x20000574
 800bed4:	2000058c 	.word	0x2000058c
 800bed8:	0800c478 	.word	0x0800c478

0800bedc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800bee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800beec:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800beee:	f3ef 8310 	mrs	r3, PRIMASK
 800bef2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bef4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bef8:	b672      	cpsid	i
}
 800befa:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800befc:	4b35      	ldr	r3, [pc, #212]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800befe:	8a5a      	ldrh	r2, [r3, #18]
 800bf00:	4b34      	ldr	r3, [pc, #208]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf02:	8a1b      	ldrh	r3, [r3, #16]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d11b      	bne.n	800bf40 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bf08:	4b32      	ldr	r3, [pc, #200]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf0a:	8a5b      	ldrh	r3, [r3, #18]
 800bf0c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf10:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800bf12:	88fa      	ldrh	r2, [r7, #6]
 800bf14:	8afb      	ldrh	r3, [r7, #22]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d33a      	bcc.n	800bf90 <TRACE_AllocateBufer+0xb4>
 800bf1a:	4b2e      	ldr	r3, [pc, #184]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf1c:	8a1b      	ldrh	r3, [r3, #16]
 800bf1e:	88fa      	ldrh	r2, [r7, #6]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d235      	bcs.n	800bf90 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bf24:	4b2b      	ldr	r3, [pc, #172]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf26:	2201      	movs	r2, #1
 800bf28:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bf2a:	4b2a      	ldr	r3, [pc, #168]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf2c:	8a5a      	ldrh	r2, [r3, #18]
 800bf2e:	4b29      	ldr	r3, [pc, #164]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf30:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bf32:	4b28      	ldr	r3, [pc, #160]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf34:	8a1b      	ldrh	r3, [r3, #16]
 800bf36:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bf38:	4b26      	ldr	r3, [pc, #152]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	825a      	strh	r2, [r3, #18]
 800bf3e:	e027      	b.n	800bf90 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bf40:	4b24      	ldr	r3, [pc, #144]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf42:	8a5a      	ldrh	r2, [r3, #18]
 800bf44:	4b23      	ldr	r3, [pc, #140]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf46:	8a1b      	ldrh	r3, [r3, #16]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d91b      	bls.n	800bf84 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800bf4c:	4b21      	ldr	r3, [pc, #132]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf4e:	8a5b      	ldrh	r3, [r3, #18]
 800bf50:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf54:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800bf56:	88fa      	ldrh	r2, [r7, #6]
 800bf58:	8afb      	ldrh	r3, [r7, #22]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d318      	bcc.n	800bf90 <TRACE_AllocateBufer+0xb4>
 800bf5e:	4b1d      	ldr	r3, [pc, #116]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf60:	8a1b      	ldrh	r3, [r3, #16]
 800bf62:	88fa      	ldrh	r2, [r7, #6]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d213      	bcs.n	800bf90 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800bf68:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800bf6e:	4b19      	ldr	r3, [pc, #100]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf70:	8a5a      	ldrh	r2, [r3, #18]
 800bf72:	4b18      	ldr	r3, [pc, #96]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf74:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800bf76:	4b17      	ldr	r3, [pc, #92]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf78:	8a1b      	ldrh	r3, [r3, #16]
 800bf7a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800bf7c:	4b15      	ldr	r3, [pc, #84]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf7e:	2200      	movs	r2, #0
 800bf80:	825a      	strh	r2, [r3, #18]
 800bf82:	e005      	b.n	800bf90 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800bf84:	4b13      	ldr	r3, [pc, #76]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf86:	8a1a      	ldrh	r2, [r3, #16]
 800bf88:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf8a:	8a5b      	ldrh	r3, [r3, #18]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800bf90:	8afa      	ldrh	r2, [r7, #22]
 800bf92:	88fb      	ldrh	r3, [r7, #6]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d90f      	bls.n	800bfb8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800bf98:	4b0e      	ldr	r3, [pc, #56]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bf9a:	8a5a      	ldrh	r2, [r3, #18]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bfa2:	8a5a      	ldrh	r2, [r3, #18]
 800bfa4:	88fb      	ldrh	r3, [r7, #6]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <TRACE_AllocateBufer+0xf8>)
 800bfb2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	82bb      	strh	r3, [r7, #20]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f383 8810 	msr	PRIMASK, r3
}
 800bfc2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800bfc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	371c      	adds	r7, #28
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bc80      	pop	{r7}
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	20000574 	.word	0x20000574

0800bfd8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfde:	f3ef 8310 	mrs	r3, PRIMASK
 800bfe2:	607b      	str	r3, [r7, #4]
  return(result);
 800bfe4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bfe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe8:	b672      	cpsid	i
}
 800bfea:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800bfec:	4b08      	ldr	r3, [pc, #32]	; (800c010 <TRACE_Lock+0x38>)
 800bfee:	8adb      	ldrh	r3, [r3, #22]
 800bff0:	3301      	adds	r3, #1
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	4b06      	ldr	r3, [pc, #24]	; (800c010 <TRACE_Lock+0x38>)
 800bff6:	82da      	strh	r2, [r3, #22]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f383 8810 	msr	PRIMASK, r3
}
 800c002:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c004:	bf00      	nop
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	bc80      	pop	{r7}
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	20000574 	.word	0x20000574

0800c014 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c01a:	f3ef 8310 	mrs	r3, PRIMASK
 800c01e:	607b      	str	r3, [r7, #4]
  return(result);
 800c020:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800c022:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800c024:	b672      	cpsid	i
}
 800c026:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800c028:	4b08      	ldr	r3, [pc, #32]	; (800c04c <TRACE_UnLock+0x38>)
 800c02a:	8adb      	ldrh	r3, [r3, #22]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	b29a      	uxth	r2, r3
 800c030:	4b06      	ldr	r3, [pc, #24]	; (800c04c <TRACE_UnLock+0x38>)
 800c032:	82da      	strh	r2, [r3, #22]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f383 8810 	msr	PRIMASK, r3
}
 800c03e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800c040:	bf00      	nop
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	bc80      	pop	{r7}
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	20000574 	.word	0x20000574

0800c050 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800c054:	4b05      	ldr	r3, [pc, #20]	; (800c06c <TRACE_IsLocked+0x1c>)
 800c056:	8adb      	ldrh	r3, [r3, #22]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	bf14      	ite	ne
 800c05c:	2301      	movne	r3, #1
 800c05e:	2300      	moveq	r3, #0
 800c060:	b2db      	uxtb	r3, r3
}
 800c062:	4618      	mov	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	bc80      	pop	{r7}
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	20000574 	.word	0x20000574

0800c070 <memset>:
 800c070:	4402      	add	r2, r0
 800c072:	4603      	mov	r3, r0
 800c074:	4293      	cmp	r3, r2
 800c076:	d100      	bne.n	800c07a <memset+0xa>
 800c078:	4770      	bx	lr
 800c07a:	f803 1b01 	strb.w	r1, [r3], #1
 800c07e:	e7f9      	b.n	800c074 <memset+0x4>

0800c080 <__libc_init_array>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	4d0d      	ldr	r5, [pc, #52]	; (800c0b8 <__libc_init_array+0x38>)
 800c084:	4c0d      	ldr	r4, [pc, #52]	; (800c0bc <__libc_init_array+0x3c>)
 800c086:	1b64      	subs	r4, r4, r5
 800c088:	10a4      	asrs	r4, r4, #2
 800c08a:	2600      	movs	r6, #0
 800c08c:	42a6      	cmp	r6, r4
 800c08e:	d109      	bne.n	800c0a4 <__libc_init_array+0x24>
 800c090:	4d0b      	ldr	r5, [pc, #44]	; (800c0c0 <__libc_init_array+0x40>)
 800c092:	4c0c      	ldr	r4, [pc, #48]	; (800c0c4 <__libc_init_array+0x44>)
 800c094:	f000 f826 	bl	800c0e4 <_init>
 800c098:	1b64      	subs	r4, r4, r5
 800c09a:	10a4      	asrs	r4, r4, #2
 800c09c:	2600      	movs	r6, #0
 800c09e:	42a6      	cmp	r6, r4
 800c0a0:	d105      	bne.n	800c0ae <__libc_init_array+0x2e>
 800c0a2:	bd70      	pop	{r4, r5, r6, pc}
 800c0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0a8:	4798      	blx	r3
 800c0aa:	3601      	adds	r6, #1
 800c0ac:	e7ee      	b.n	800c08c <__libc_init_array+0xc>
 800c0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0b2:	4798      	blx	r3
 800c0b4:	3601      	adds	r6, #1
 800c0b6:	e7f2      	b.n	800c09e <__libc_init_array+0x1e>
 800c0b8:	0800c608 	.word	0x0800c608
 800c0bc:	0800c608 	.word	0x0800c608
 800c0c0:	0800c608 	.word	0x0800c608
 800c0c4:	0800c60c 	.word	0x0800c60c

0800c0c8 <memcpy>:
 800c0c8:	440a      	add	r2, r1
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0d0:	d100      	bne.n	800c0d4 <memcpy+0xc>
 800c0d2:	4770      	bx	lr
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0de:	4291      	cmp	r1, r2
 800c0e0:	d1f9      	bne.n	800c0d6 <memcpy+0xe>
 800c0e2:	bd10      	pop	{r4, pc}

0800c0e4 <_init>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr

0800c0f0 <_fini>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	bf00      	nop
 800c0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0f6:	bc08      	pop	{r3}
 800c0f8:	469e      	mov	lr, r3
 800c0fa:	4770      	bx	lr
